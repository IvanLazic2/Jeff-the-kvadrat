class Pathfinding
{
    field Array map;

    field int rows;
    field int cols;

    field Array rowsDir; 
    field Array colsDir;

    constructor Pathfinding new(Array map2, int width, int height)
    {
        
        let rowsDir = Array.new(4);
        let colsDir = Array.new(4);

        

        let rowsDir[0] = -1;
        let rowsDir[1] = 1;
        let rowsDir[2] = 0;
        let rowsDir[3] = 0;

        let colsDir[0] = 0;
        let colsDir[1] = 0;
        let colsDir[2] = 1;
        let colsDir[3] = -1;

        

        let map = map2; 
        let cols = width;
        let rows = height;

        return this;
    }

    //function void setMap(Map m) 
    //{ 
    //    let map = m; 
    //    let cols = Map.getWidth();
    //    let rows = Map.getHeight();
    //    let mapArray = Map.getMap();
    //    return; 
    //}



    method int exploreNeighbours(int r, int c, PQueue rowsQ, PQueue colsQ, Array visited)
    {
        var int i;
        var int rr;
        var int cc;
        var int nodesInNextLayer;

        
        
        while (i < 4)
        {
            let rr = r + rowsDir[i];
            let cc = c + colsDir[i];

            //do Output.printInt(rr);
            //do Output.printString(", ");
            //do Output.printInt(cc);
            //do Output.println();

            if ((rr > -1) & (cc > -1) & (rr < rows) & (cc < cols))
            {
                if (~(visited[Matrix.getIndex(cc, rr, cols, rows)]) & (Matrix.getValue(cc, rr, map, cols, rows) = 0))
                {
                    do rowsQ.enqueue(rr);
                    do colsQ.enqueue(cc);
                    let visited[Matrix.getIndex(cc, rr, cols, rows)] = true;
                    let nodesInNextLayer = nodesInNextLayer + 1;
                }
            }

            let i = i + 1;
        }

        return nodesInNextLayer;
    }

    method void search(int rowS, int colS, int rowE, int colE)
    {
        var PQueue rowsQ;
        var PQueue colsQ;
        var int moveCount;
        var int nodesLeftInLayer;
        var int nodesInNextLayer;
        var bool reachedEnd;
        var Array visited; // visited matrix
        var int r;
        var int c;
        var int i;
        var int temp;

        let rowsQ = PQueue.new();
        let colsQ = PQueue.new();

        let nodesLeftInLayer = 1;

        let visited = Array.new(cols * rows);

        while (i < (cols * rows))
        {
            let visited[i] = 0;
            let i = i + 1;
        }

        do rowsQ.enqueue(rowS);
        do colsQ.enqueue(colS);

        let visited[Matrix.getIndex(colS, rowS, cols, rows)] = true;



        
        
        let i = rowsQ.get_size();
        
        while (i > 0)
        {
            //do Output.printInt(i);
            

            //do rowsQ.print();
            //do Output.printString(", ");
            //do colsQ.print();
            //do Output.println();
            //do Output.printString(" : ");

            let r = rowsQ.dequeue();
            let c = colsQ.dequeue();





            //do Output.printInt(r);
            //do Output.printString(", ");
            //do Output.printInt(c);
            //do Output.println();




            if ((r = rowE) & (c = colE))
            {
                let reachedEnd = true;
                let i = 0;
            }
            else
            {
                let temp = exploreNeighbours(r, c, rowsQ, colsQ, visited);
                let nodesInNextLayer = nodesInNextLayer + temp;
                let nodesLeftInLayer = nodesLeftInLayer - 1;
                if (nodesLeftInLayer = 0)
                {
                    let nodesLeftInLayer = nodesInNextLayer;
                    let nodesInNextLayer = 0;
                    let moveCount = moveCount + 1;
                }

                let i = rowsQ.get_size();
            }

            

           


            
        }

        //do Output.printInt(moveCount);

        if (reachedEnd)
        {
            //do Output.printInt(moveCount);
            //do Output.printString("aaa");
        }






        do rowsQ.dispose();
        do colsQ.dispose();
        do visited.dispose();

        return;
    }
}