// 0 - coin
// 1 - heart
// 2 - ammo

class Collectable
{
    field int X;
    field int Y;
    field int Type;
    field bool IsAvailable;

    field int memAddress;

    constructor Collectable new(int x, int y, int type)
    {
        do resetObject();

        let X = x;
        let Y = y;
        let memAddress = Constants.getMemAddress(x, y);
        let Type = type;

        let IsAvailable = true;

        return this;
    }

    method int getX() { return X; }
    method int getY() { return Y; }
    method int getType() { return Type; }
    method bool getIsAvailable() { return IsAvailable; }
    
    method void setIsAvailable(int b) { let IsAvailable = b; return; }

    method int CheckCollisionWithCharacter(int cx, int cy, int cw, int ch)
    {
        if (IsAvailable)
        {
            if (Collision.IsBulletCollidedWithEntity(cx, cy, cw, ch, X, Y))
            {
                do Collect();
                return Type;
            }
        }

        return -1;
    }

    method void Collect()
    {
        do Clear();
        let IsAvailable = false;
        return;
    }

    method void ScrollRight()
	{
        if (IsAvailable)
        {
            do Clear();
            let memAddress = memAddress + 1;
            let X = X + 1;
            do Draw();
        }

        return;
	}

	method void ScrollLeft()
    {
        if (IsAvailable)
        {
            do Clear();
            let memAddress = memAddress - 1;
            let X = X - 1;
            do Draw();
        }

		return;
    }

    method void Clear()
	{

        if (((-1 < X) & (X < 32)))
        {
            do Memory.poke(memAddress, 0);
		    do Memory.poke(memAddress + 32, 0);
		    do Memory.poke(memAddress + 64, 0);
		    do Memory.poke(memAddress + 96, 0);
		    do Memory.poke(memAddress + 128, 0);
		    do Memory.poke(memAddress + 160, 0);
		    do Memory.poke(memAddress + 192, 0);
		    do Memory.poke(memAddress + 224, 0);
		    do Memory.poke(memAddress + 256, 0);
		    do Memory.poke(memAddress + 288, 0);
		    do Memory.poke(memAddress + 320, 0);
		    do Memory.poke(memAddress + 352, 0);
		    do Memory.poke(memAddress + 384, 0);
		    do Memory.poke(memAddress + 416, 0);
		    do Memory.poke(memAddress + 448, 0);
		    do Memory.poke(memAddress + 480, 0);
        }
        

		return;
	}

    method void Draw()
    {
        if (IsAvailable)
        {
            // COIN
		    if (Type = 0)
		    {
		    	do Coin.DrawFrame(memAddress, X, Y);
		    }
            // HEART
		    else { if (Type = 1)
		    {
                if (Difficulty.getCanPickUpHealth())
                {
                    do Heart.DrawFrame(memAddress, X, Y);
                }
		    }
            // AMMO
            else { if (Type = 2)
            {
                if (Difficulty.getCanPickUpAmmo())
                {
                    do Ammo.DrawFrame(memAddress, X, Y);
                }
            }}}
        }

		return;
    }

    method void resetObject()
    {
        let X = 0;
        let Y = 0;
        let Type = 0;
        let IsAvailable = 0;
        let memAddress = 0;
        return;
    }

    method void dispose()
    {
        do resetObject();
        
        do Memory.deAlloc(this);
        return;
    }
}