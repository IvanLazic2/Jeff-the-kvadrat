class Collision
{
    //// PLATFORMS

    static int lastY;
    static int platformY;

    


    function int getLastY() { return lastY; }
    function int getPlatformY() { return platformY; }

    function int getNearestPlatformY(Array x_map, int y, int height, int mapHeight)
    {
        var int currIndex;
        var int nearestPlatformY;

        let currIndex = y / 16;

        while (currIndex < mapHeight)
        {
            if (Collision.IsPlatform(x_map[currIndex]))
            {   
                let nearestPlatformY = currIndex * 16;
                let currIndex = mapHeight;
            }

            let currIndex = currIndex + 1;
        }

        return nearestPlatformY;
    }






    function bool IsOnAnyPlatform(int x, int y, int width, int height, int forceY, Array map, int mapWidth, int mapHeight)
    {
        var bool is_stable_x;
        var bool is_stable_y;
        var int platform_x;
        var int h;
        var int w;
        var Array x_map;
        var int nearestPlatformY;
        var int i;
        var int minNearestPlatformY;
        var int py;

        let minNearestPlatformY = (mapHeight - 1) * 16;
        while (i < width)
        {
            let x_map = map[x + i];
            let py = Collision.getNearestPlatformY(x_map, y, height, mapHeight);
            if (~(py = 0) & (py < minNearestPlatformY))
            {
                let minNearestPlatformY = py;
            }

            let i = i + 1;
        }



        let platformY = minNearestPlatformY;
        let h = minNearestPlatformY - y - 16; // blockHeight;
        let is_stable_y = (-1 < h) & (h < (forceY + 1));


        //do Output.printInt(y);
        //do Output.println();
        //do Output.printInt(is_stable_y);
        //do Output.println();


        // + 16 -> blockHeight
        if (Math.abs(y + 16 + forceY - minNearestPlatformY) < 7) // < 15
        {
            let is_stable_y = true;
        }

        return is_stable_y;
    }










    function bool IsOnPlatform(Platform platform, int x, int y, int width, int height, int forceY)
    {
        var bool is_stable_x;
        var bool is_stable_y;
        var int platform_x;
        var int h;
        var int w;

        let h = platform.get_y() - y - height;
        let w = x + width;

        let is_stable_y = (-1 < h) & (h < (forceY + 1));

        //if (Math.abs(y + height + forceY + 1 - platform.get_y()) < 8) // < 16
        if (Math.abs(y + height + forceY - platform.get_y()) < 7) // < 15
        {
            let is_stable_y = true;
        }

        let is_stable_x = (x < (platform.get_x() + platform.get_size())) & (w > platform.get_x());

        return (is_stable_x & is_stable_y);
    }

    function bool CheckAnyPlatformCollisionRight(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight)
    {
        var Array x_map;
        var int i;
        var bool result;

        let x_map = map[x + width];

        

        let i = y - (height - 16); // TEMP -> Jeff height is 16

        //do Output.printInt(i);
        //do Output.printString(", ");
        //do Output.printInt(y + 16);
        //do Output.println();

        while (i < (y + 16)) // y + blockHeight
        {
            //do Output.printInt(i / 16);
            //do Output.printString("a");
            //do Output.println();

            let result = result | (Collision.IsPlatform(x_map[i / 16]));

            let i = i + 16;
        }

        //return x_map[(y + height - 1) / 16] < 10;
        //return Collision.IsPlatform(x_map[(y + height - 1) / 16]);
        return result;
    }

    function bool CheckPlatformCollisionRight(Array platforms, int platforms_num, int x, int y, int width, int height)
    {
        var int i;
        var Platform platform;
        var Section section;
        var bool result;

        while (i < platforms_num)
        {
            let platform = platforms[i];

            let result = Collision.IsCollidedPlatformRight(platform, x, y, width, height);

            if (result)
            {
                let i = platforms_num - 1;
            }

            let i = i + 1;
        }

        return result;
    }

    function bool IsCollidedPlatformRight(Platform platform, int x, int y, int width, int height)
    {
        return ((x + width) = platform.get_x()) & (platform.get_y() < (y + height)) & (y < (platform.get_y()));
    }

    function bool CheckAnyPlatformCollisionLeft(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight)
    {
        var Array x_map;
        var int i;
        var bool result;

        let x_map = map[x + width];

        if (~(x = 0))
        {
            let x_map = map[x - 1];
            //let result = x_map[(y + height - 1) / 16] < 10;
            //let result = Collision.IsPlatform(x_map[(y + height - 1) / 16]);

            let i = y - (height - 16); // TEMP -> Jeff height is 16

            while (i < (y + 16)) // y + blockHeight
            {
                let result = result | (Collision.IsPlatform(x_map[i / 16]));

                let i = i + 16;
            }
        }

        

        //return x_map[(y + height - 1) / 16] < 10;
        //return Collision.IsPlatform(x_map[(y + height - 1) / 16]);
        return result;
    }

    function bool CheckPlatformCollisionLeft(Array platforms, int platforms_num, int x, int y, int width, int height)
    {
        var int i;
        var Platform platform;
        var Section section;
        var bool result;

        while (i < platforms_num)
        {
            let platform = platforms[i];

            let result = Collision.IsCollidedPlatformLeft(platform, x, y, width, height);

            if (result)
            {
                let i = platforms_num - 1;
            }

            let i = i + 1;
        }

        return result;
    }

    function bool IsCollidedPlatformLeft(Platform platform, int x, int y, int width, int height)
    {
        return (x = (platform.get_x() + platform.get_size())) & (platform.get_y() < (y + height)) & (y < (platform.get_y()));
    }

    function bool IsPlatform(int value)
    {
        return ((0 < value) & (value < 11));
    }   

    function bool IsObstacle(int value)
    {
        return ((10 < value) & (value < 16));
    }

    function bool IsAtPlatformBoundaryLeft(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight)
    {
        var Array x_map;
        var bool result;

        if (x > 0)
        {
            let x_map = map[x - 1];

            let result = ~Collision.IsPlatform(x_map[(y / 16) + 1]);
        }

        return result;
    }

    function bool IsAtPlatformBoundaryRight(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight)
    {
        var Array x_map;
        var bool result;

        if (x > 0)
        {
            let x_map = map[x + width];

            let result = ~Collision.IsPlatform(x_map[(y / 16) + 1]);
        }

        return result;
    }


    //// OBSTACLES

    function bool IsCollidedAnyObstacle(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight)
    {
        var Array x_map;
        var bool result;
        var int i;
        var int j;
        var int blockValue;

        while (i < width)
        {
            let x_map = map[x + i];

            let j = y - (height - 16); // TEMP -> Jeff height is 16

            while (j < (y + 16)) // y + blockHeight
            {
                let result = result | (Collision.IsObstacle(x_map[j / 16]));

                let j = j + 16;
            }

            if (result)
            {
                let i = width;
            }

            let i = i + 1;
        }
        
        return result;
    }

    function bool IsCollidedObstacle(Obstacle obstacle, int x, int y, int width, int height)
    {
        var bool is_collided_y;
        var bool is_collided_x;

        let is_collided_x = (((x + width) > (obstacle.get_x()) & (x < (obstacle.get_x() + obstacle.get_size()))));
        let is_collided_y = (obstacle.get_y() - obstacle.get_height() < (y + height)) & (y < (obstacle.get_y() + 1));
        
        return is_collided_x & is_collided_y;
    }
}