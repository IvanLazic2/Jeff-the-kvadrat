class Collision
{

    //// PLATFORMS
    static int lastY;
    static int platformY;

    
    function void init()
    {
        return;
    }

    function int getLastY() { return lastY; }
    function int getPlatformY() { return platformY; }

    function int getNearestPlatformY(int col, int y, int height, int mapHeight)
    {
        var int currIndex;
        var int nearestPlatformY;

        let currIndex = (y/16) + 1;


        while (currIndex < mapHeight)
        {
            if (Collision.IsPlatform(Map.getValue(col, currIndex)))
            {   
                let nearestPlatformY = currIndex * 16;
                let currIndex = mapHeight;
            }

            let currIndex = currIndex + 1;
        }

        return nearestPlatformY;
    }

    function bool IsOnAnyPlatform(int x, int y, int width, int height, int forceY, Array map, int mapWidth, int mapHeight, int worldOffset)
    {
        var bool is_stable_x;
        var bool is_stable_y;
        var int platform_x;
        var int h;
        var int w;
        //var Array x_map;
        var int nearestPlatformY;
        var int i;
        var int minNearestPlatformY;
        var int py;

        //let minNearestPlatformY = (mapHeight - 1) * 16;
        let minNearestPlatformY = (mapHeight - 1) * 16;
        while (i < width)
        {
            //let x_map = map[x + i + worldOffset];
            let py = Collision.getNearestPlatformY(x + i + worldOffset, y, height, mapHeight);
            if (~(py = 0) & (py < minNearestPlatformY))
            {
                let minNearestPlatformY = py;
            }

            let i = i + 1;
        }


        let platformY = minNearestPlatformY;
        let h = minNearestPlatformY - y - Constants.getBlockHeight(); // blockHeight;
        let is_stable_y = (-1 < h) & (h < (forceY + 1));

        if (Math.abs(y + Constants.getBlockHeight() + forceY - minNearestPlatformY) < 7) // < 15
        {
            let is_stable_y = true;
        }

        

        return is_stable_y;
    }










    //function bool IsOnPlatform(Platform platform, int x, int y, int width, int height, int forceY)
    //{
    //    var bool is_stable_x;
    //    var bool is_stable_y;
    //    var int platform_x;
    //    var int h;
    //    var int w;
//
    //    let h = platform.get_y() - y - height;
    //    let w = x + width;
//
    //    let is_stable_y = (-1 < h) & (h < (forceY + 1));
//
    //    //if (Math.abs(y + height + forceY + 1 - platform.get_y()) < 8) // < 16
    //    if (Math.abs(y + height + forceY - platform.get_y()) < 7) // < 15
    //    {
    //        let is_stable_y = true;
    //    }
//
    //    let is_stable_x = (x < (platform.get_x() + platform.get_size())) & (w > platform.get_x());
//
    //    return (is_stable_x & is_stable_y);
    //}

    function bool CheckAnyPlatformCollisionRight(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight, int worldOffset, int forceY)
    {
        var int i;
        var bool result;

        let i = (y/16) - (height - 1);
        while (i < ((y/16) + 1)) // +(forceY/16) TEMP FIX !!!!!!!!!!!!!!!!
        {
            let result = result | (Collision.IsPlatform(Map.getValue(x + width + worldOffset, i)));

            let i = i + 1;
        }

        return result;
    }

    //function bool CheckPlatformCollisionRight(Array platforms, int platforms_num, int x, int y, int width, int height)
    //{
    //    var int i;
    //    var Platform platform;
    //    var Section section;
    //    var bool result;
//
    //    while (i < platforms_num)
    //    {
    //        let platform = platforms[i];
//
    //        let result = Collision.IsCollidedPlatformRight(platform, x, y, width, height);
//
    //        if (result)
    //        {
    //            let i = platforms_num - 1;
    //        }
//
    //        let i = i + 1;
    //    }
//
    //    return result;
    //}

    //function bool IsCollidedPlatformRight(Platform platform, int x, int y, int width, int height)
    //{
    //    return ((x + width) = platform.get_x()) & (platform.get_y() < (y + height)) & (y < (platform.get_y()));
    //}

    function bool CheckAnyPlatformCollisionLeft(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight, int worldOffset, int forceY)
    {
        var int i;
        var bool result;

        let i = (y/16) - (height - 1);
        while (i < ((y/16) + 1))
        {
            let result = result | (Collision.IsPlatform(Map.getValue(x - 1 + worldOffset, i)));
            let i = i + 1;
        }

        return result;
    }

    //function bool CheckPlatformCollisionLeft(Array platforms, int platforms_num, int x, int y, int width, int height)
    //{
    //    var int i;
    //    var Platform platform;
    //    var Section section;
    //    var bool result;
//
    //    while (i < platforms_num)
    //    {
    //        let platform = platforms[i];
//
    //        let result = Collision.IsCollidedPlatformLeft(platform, x, y, width, height);
//
    //        if (result)
    //        {
    //            let i = platforms_num - 1;
    //        }
//
    //        let i = i + 1;
    //    }
//
    //    return result;
    //}

    //function bool IsCollidedPlatformLeft(Platform platform, int x, int y, int width, int height)
    //{
    //    return (x = (platform.get_x() + platform.get_size())) & (platform.get_y() < (y + height)) & (y < (platform.get_y()));
    //}

    function bool IsPlatform(int value)
    {
        return ((0 < value) & (value < 11));
    }   

    function bool IsObstacle(int value)
    {
        return ((10 < value) & (value < 16));
    }

    function bool IsCollectable(int value)
    {
        return ((15 < value) & (value < 18));
    }

    function bool GetPlatformType(int value)
    {
        return value - 1;
    }   

    //function bool GetObstacleType(int value)
    //{
    //    return value - 10 - 1;
    //}
//
    //function bool GetCollectableType(int value)
    //{
    //    return ;
    //}


    function bool IsAtPlatformBoundaryLeft(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight, int worldOffset)
    {
        var bool result;

        let result = ~Collision.IsPlatform(Map.getValue(x - 1 + worldOffset, (y/16) + 1));

        return result;
    }

    function bool IsAtPlatformBoundaryRight(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight, int worldOffset)
    {
        var Array x_map;
        var bool result;

        let result = ~Collision.IsPlatform(Map.getValue(x + width + worldOffset, (y/16) + 1));

        return result;
    }





    //// OBSTACLES

    function bool IsCollidedAnyObstacle(int x, int y, int width, int height, Array map, int mapWidth, int mapHeight)
    {
        //var Array x_map;
        var bool result;
        var int i;
        var int j;
        var int blockValue;

        while (i < width)
        {
            //let x_map = map[x + i];

            let j = (y/16) - (height - 1); // TEMP -> Jeff height is 16

            while (j < ((y/16) + 1)) // y + blockHeight
            {
                let result = result | (Collision.IsObstacle(Map.getValue(x + i, j)));

                let j = j + 1;
            }

            if (result)
            {
                let i = width;
            }

            let i = i + 1;
        }
        
        return result;
    }

    function bool IsCollidedObstacle(Obstacle obstacle, int x, int y, int width, int height)
    {
        var bool is_collided_y;
        var bool is_collided_x;

        let is_collided_x = (((x + width) > (obstacle.get_x()) & (x < (obstacle.get_x() + obstacle.get_size()))));
        let is_collided_y = (obstacle.get_y() - obstacle.get_height() < (y + height)) & (y < (obstacle.get_y() + 1));
        
        return is_collided_x & is_collided_y;
    }

    function void RedrawPlatforms(Array map, int mapWidth, int mapHeight, int x, int y, int width, int height, int worldOffset)
    {
        var int i;
        var int j;
        var int px;
        var int py;
        var int location;
        var int memAddress;
        //var Array x_map;

        if (Constants.IsInScreenX(x - 1) & Constants.IsInScreenX(x + width + 1))
        {
            let i = x - 1;
            while (i < (x + width + 1))
            {
                //let x_map = map[i + worldOffset];

                let j = (y / 16) - height - 2;
                while (j < (((y + Constants.getBlockHeight()) / 16) + 2)) // 16 = blockHeight
                //let j = (y / 16) - 2;
                //while (j < (((y + height) / 16) + 1))
                {
                    if (((i + worldOffset) < mapWidth) & (j < mapHeight))
                    {
                        if (Collision.IsPlatform(Map.getValue(i + worldOffset, j)))
                        {
                            let location = (j * 512) + i; // 16 * 32 = 512
		                    let memAddress = 16384 + location;

                            do Platform.DrawBlock(0, Map.getValue(i + worldOffset, j) - 1, memAddress);
                        }
                    }
                    

                    let j = j + 1;
                }

                let i = i + 1;
            }
        }
        

        return;
    }

    function bool IsCharacterCollidedWithEnemySides(int cx, int cy, int cw, int ch, int ex, int ey, int ew, int eh)
    {
        var bool is_collided;

        let is_collided = (ex < (cx + cw)) & (cx < (ex + ew)) & ((ey - 16) < cy) & (cy < (ey + eh));

        return is_collided;
    }

    function bool IsCharacterCollidedWithEnemyTop(int cx, int cy, int cw, int ch, int ex, int ey, int ew, int eh)
    {
        var bool is_collided;

        let is_collided = (ex < (cx + cw)) & (cx < (ex + ew)) & ((ey - eh - 24) < (cy)) & ((cy) < (ey - eh));

        return is_collided;
    }

    function bool IsBulletCollidedWithMap(Array map, int mapWidth, int mapHeight, int x, int y, bool drawLeft, int worldOffset)
    {
        var bool result;
        var int col;

        if (Constants.IsInScreen(x, y))
        {
            if (drawLeft)
            {
                let col = x - 2 + worldOffset;
            }
            else 
            {
                let col = x + 2 + worldOffset;
            }

            let result = (Map.getValue(col, (y + 8)/16) = 0);
        }

        return ~result;
    }

    function bool IsBulletCollidedWithEntity(int ex, int ey, int ewidth, int eheight, int bx, int by)
    {
        return Collision.IsCharacterCollidedWithEnemySides(bx, by + 16, 1, 16, ex, ey, ewidth, eheight);
    }
}