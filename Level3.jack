class Level3
{
	field Character character;
	field Finish finish;
	field int PlatformsCount;
	field int ObstaclesCount;
	field int EnemiesCount;
	field int CollectablesCount;
	field Array Platforms;
	field Array Obstacles;
	field Array Enemies;
	field Array Collectables;
	field Array Map;
	field int MapWidth;
	field int MapHeight;
	constructor Level3 new()
	{
		var int i;
		let character = Character.new(2, 200, false);
		let finish = Finish.new(95, 224);
		let PlatformsCount = 10;
		let ObstaclesCount = 0;
		let EnemiesCount = 2;
		let CollectablesCount = 0;
		let Platforms = Array.new(10);
		let Platforms[0] = Platform.new(44, 112, 0, 5);
		let Platforms[1] = Platform.new(24, 128, 0, 6);
		let Platforms[2] = Platform.new(56, 128, 0, 6);
		let Platforms[3] = Platform.new(16, 160, 0, 6);
		let Platforms[4] = Platform.new(50, 160, 0, 4);
		let Platforms[5] = Platform.new(71, 176, 0, 9);
		let Platforms[6] = Platform.new(8, 192, 0, 6);
		let Platforms[7] = Platform.new(42, 192, 0, 6);
		let Platforms[8] = Platform.new(57, 192, 0, 5);
		let Platforms[9] = Platform.new(0, 240, 0, 99);
		let Enemies = Array.new(2);
		let Enemies[0] = Enemy.new(9, 32, 3);
		let Enemies[1] = Enemy.new(84, 224, 2);
		let MapWidth = 128;
		let MapHeight = 16;
		let Map = Array.new(MapWidth * MapHeight);
		while (i < (MapWidth * MapHeight))
		{
			let Map[i] = 0;
			let i = i + 1;
		}
		let Map[15] = 1;
		let Map[31] = 1;
		let Map[47] = 1;
		let Map[63] = 1;
		let Map[79] = 1;
		let Map[95] = 1;
		let Map[111] = 1;
		let Map[127] = 1;
		let Map[140] = 1;
		let Map[143] = 1;
		let Map[156] = 1;
		let Map[159] = 1;
		let Map[172] = 1;
		let Map[175] = 1;
		let Map[188] = 1;
		let Map[191] = 1;
		let Map[204] = 1;
		let Map[207] = 1;
		let Map[220] = 1;
		let Map[223] = 1;
		let Map[239] = 1;
		let Map[255] = 1;
		let Map[266] = 1;
		let Map[271] = 1;
		let Map[282] = 1;
		let Map[287] = 1;
		let Map[298] = 1;
		let Map[303] = 1;
		let Map[314] = 1;
		let Map[319] = 1;
		let Map[330] = 1;
		let Map[335] = 1;
		let Map[346] = 1;
		let Map[351] = 1;
		let Map[367] = 1;
		let Map[383] = 1;
		let Map[392] = 1;
		let Map[399] = 1;
		let Map[408] = 1;
		let Map[415] = 1;
		let Map[424] = 1;
		let Map[431] = 1;
		let Map[440] = 1;
		let Map[447] = 1;
		let Map[456] = 1;
		let Map[463] = 1;
		let Map[472] = 1;
		let Map[479] = 1;
		let Map[495] = 1;
		let Map[511] = 1;
		let Map[527] = 1;
		let Map[543] = 1;
		let Map[559] = 1;
		let Map[575] = 1;
		let Map[591] = 1;
		let Map[607] = 1;
		let Map[623] = 1;
		let Map[639] = 1;
		let Map[655] = 1;
		let Map[671] = 1;
		let Map[684] = 1;
		let Map[687] = 1;
		let Map[700] = 1;
		let Map[703] = 1;
		let Map[711] = 1;
		let Map[716] = 1;
		let Map[719] = 1;
		let Map[727] = 1;
		let Map[732] = 1;
		let Map[735] = 1;
		let Map[743] = 1;
		let Map[748] = 1;
		let Map[751] = 1;
		let Map[759] = 1;
		let Map[764] = 1;
		let Map[767] = 1;
		let Map[775] = 1;
		let Map[783] = 1;
		let Map[799] = 1;
		let Map[810] = 1;
		let Map[815] = 1;
		let Map[826] = 1;
		let Map[831] = 1;
		let Map[842] = 1;
		let Map[847] = 1;
		let Map[858] = 1;
		let Map[863] = 1;
		let Map[879] = 1;
		let Map[895] = 1;
		let Map[904] = 1;
		let Map[911] = 1;
		let Map[920] = 1;
		let Map[924] = 1;
		let Map[927] = 1;
		let Map[936] = 1;
		let Map[940] = 1;
		let Map[943] = 1;
		let Map[952] = 1;
		let Map[956] = 1;
		let Map[959] = 1;
		let Map[968] = 1;
		let Map[972] = 1;
		let Map[975] = 1;
		let Map[984] = 1;
		let Map[988] = 1;
		let Map[991] = 1;
		let Map[1007] = 1;
		let Map[1023] = 1;
		let Map[1039] = 1;
		let Map[1055] = 1;
		let Map[1071] = 1;
		let Map[1087] = 1;
		let Map[1103] = 1;
		let Map[1119] = 1;
		let Map[1135] = 1;
		let Map[1147] = 1;
		let Map[1151] = 1;
		let Map[1163] = 1;
		let Map[1167] = 1;
		let Map[1179] = 1;
		let Map[1183] = 1;
		let Map[1195] = 1;
		let Map[1199] = 1;
		let Map[1211] = 1;
		let Map[1215] = 1;
		let Map[1227] = 1;
		let Map[1231] = 1;
		let Map[1243] = 1;
		let Map[1247] = 1;
		let Map[1259] = 1;
		let Map[1263] = 1;
		let Map[1275] = 1;
		let Map[1279] = 1;
		let Map[1295] = 1;
		let Map[1311] = 1;
		let Map[1327] = 1;
		let Map[1343] = 1;
		let Map[1359] = 1;
		let Map[1375] = 1;
		let Map[1391] = 1;
		let Map[1407] = 1;
		let Map[1423] = 1;
		let Map[1439] = 1;
		let Map[1455] = 1;
		let Map[1471] = 1;
		let Map[1487] = 1;
		let Map[1503] = 1;
		let Map[1519] = 1;
		let Map[1535] = 1;
		let Map[1551] = 1;
		let Map[1567] = 1;
		let Map[1583] = 1;
		return this;
	}
	method int getPlatformsCount() { return PlatformsCount; }
	method int getObstaclesCount() { return ObstaclesCount; }
	method int getEnemiesCount() { return EnemiesCount; }
	method int getCollectablesCount() { return CollectablesCount; }
	method Array getPlatforms() { return Platforms; }
	method Array getObstacles() { return Obstacles; }
	method Array getEnemies() { return Enemies; }
	method Array getCollectables() { return Collectables; }
	method Character getCharacter() { return character; }
	method int getFinish() { return finish; }
	method Array getMap() { return Map; }
	method int getMapWidth() { return MapWidth; }
	method int getMapHeight() { return MapHeight; }
	method void dispose()
	{
		var int i;
		var Platform platform;
		var Obstacle obstacle;
		var Enemy enemy;
		var Collectable collectable;
		do character.dispose();
		let character = 0;
		do finish.dispose();
		let finish = 0;
		while (i < PlatformsCount)
		{
			let platform = Platforms[i];
			do platform.dispose();
			let platform = 0;
			let i = i + 1;
		}
		let PlatformsCount = 0;
		let i = 0;
		while (i < ObstaclesCount)
		{
			let obstacle = Obstacles[i];
			do obstacle.dispose();
			let obstacle = 0;
			let i = i + 1;
		}
		let ObstaclesCount = 0;
		let i = 0;
		while (i < EnemiesCount)
		{
			let enemy = Enemies[i];
			do enemy.dispose();
			let enemy = 0;
			let i = i + 1;
		}
		let EnemiesCount = 0;
		let i = 0;
		while (i < CollectablesCount)
		{
			let collectable = Collectables[i];
			do collectable.dispose();
			let collectable = 0;
			let i = i + 1;
		}
		let CollectablesCount = 0;
		if (~(PlatformsCount = 0))
		{
			do Platforms.dispose();
		}
		let Platforms = 0;
		if (~(ObstaclesCount = 0))
		{
			do Obstacles.dispose();
		}
		let Obstacles = 0;
		if (~(EnemiesCount = 0))
		{
			do Enemies.dispose();
		}
		let Enemies = 0;
		if (~(CollectablesCount = 0))
		{
			do Collectables.dispose();
		}
		let Collectables = 0;

		let i = 0;
		while (i < (MapWidth * MapHeight))
		{
			let Map[i] = 0;
			let i = i + 1;
		}

		do Map.dispose();
		let Map = 0;
		let MapWidth = 0;
		let MapHeight = 0;
		
		do Memory.deAlloc(this);
		return;
	}
}
