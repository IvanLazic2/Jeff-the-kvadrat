//https://www.youtube.com/watch?v=Ouza_4SsbLc
//https://codepen.io/rickyjw/pen/qrjmdz
//https://editor.p5js.org/Coulomb1/sketches/ajYsnHRW2
//https://www.coursera.org/lecture/nand2tetris2/unit-3-10-graphics-optimization-hHNmi
//https://classes.engineering.wustl.edu/cse365/demo_program.php
//https://arieljannai.gitlab.io/Nand2TetrisBitmapEditor/
//https://github.com/ErikUmble/nand2tetris/tree/main/DinoAdventure

//https://www.redblobgames.com/pathfinding/a-star/introduction.html
//https://www.youtube.com/watch?v=5DhCoqoPmzs

//https://github.com/IshankGulati/Image-Processing-Mini-projects/blob/master/Astar%20Search/pathPlanning.py



class Game
{
    field int Direction;
    field Character Character;
    field Finish Finish;
    field int MoveAreaWidth;
    field int ScreenMiddle;
    field int LeftBorder;
    field int RightBorder;

    field int PlatformsCount;
    field int ObstaclesCount;
    field int EnemiesCount;
    field int CollectablesCount;

    field Array Platforms;
    field Array Obstacles;
    field Array Enemies;
    field Array Collectables;

    field Level1 Level;

    field int GameDelay;

    field int redrawAllObstaclesTimer;
    field int redrawAllObstaclesDelay;

    field Array map;
    field int mapWidth;
    field int mapHeight;

    field int WorldOffset;

    static int currLevel;
    static String text;

    field int Deaths;
    static int Kills;
    static int TotalKills;
    static int TotalCoins;
    static int TotalDeaths;

    static int LevelsCount;

    field bool quit;
    field bool showMainMenu;

    field Menu levelMenu;
    field Menu difficultyMenu;
    field Menu pauseMenu;
    field Menu nextMenu;
    field Menu deadMenu;

    static AnimationLevel animationLevel;
    static Character animationCharacter;
    static int animationPlatformsCount;
    static Array animationPlatforms;
    static int animationWorldOffset;

    field bool shouldDisposeAnimation;

    function void init()
    {
        let Kills = 0;
        let TotalCoins = 0;
        let TotalKills = 0;
        do Difficulty.setDifficulty(2);
        let currLevel = 1;
        let LevelsCount = 3;

        do Game.initAnimation();

        return;
    }

    function void initAnimation()
    {
        var int i;
        var Platform platform;
        var int memAddress;

        let animationLevel = AnimationLevel.new();
        let animationCharacter = animationLevel.getCharacter();
        let animationPlatformsCount = animationLevel.getPlatformsCount();
        let animationPlatforms = animationLevel.getPlatforms();
        do Map.setMap(animationLevel.getMap());
        do Map.setWidth(animationLevel.getMapWidth());
        do Map.setHeight(animationLevel.getMapHeight());

        do animationCharacter.setJumpHeight(10);

        do animationCharacter.ForceDraw();

        let i = 0;
        while (i < animationPlatformsCount)
        {
            let platform = animationPlatforms[i];
            do platform.Draw();
            let i = i + 1;
        }

        let i = 0;
        while (i < 32)
        {
            let memAddress = Constants.getMemAddress(i, (animationLevel.getMapHeight() - 1) * 16);

            do MemoryExt.poke(memAddress, 0, -1);
	        do MemoryExt.poke(memAddress, 32, -12744);
	        do MemoryExt.poke(memAddress, 64, -6372);
	        do MemoryExt.poke(memAddress, 96, 29582);
	        do MemoryExt.poke(memAddress, 128, 14791);
	        do MemoryExt.poke(memAddress, 160, -25373);
	        do MemoryExt.poke(memAddress, 192, -12687);
	        do MemoryExt.poke(memAddress, 224, -6344);
	        do MemoryExt.poke(memAddress, 256, 29596);
	        do MemoryExt.poke(memAddress, 288, 14798);
	        do MemoryExt.poke(memAddress, 320, 7399);
	        do MemoryExt.poke(memAddress, 352, -29069);
	        do MemoryExt.poke(memAddress, 384, -14535);
	        do MemoryExt.poke(memAddress, 416, -7268);
	        do MemoryExt.poke(memAddress, 448, 29134);
	        do MemoryExt.poke(memAddress, 480, -1);

            let i = i + 1;
        }

        return;
    }

    function void disposeAnimiation()
    {
        do animationLevel.dispose();

        let animationLevel = 0;
        let animationCharacter = 0;
        let animationPlatformsCount = 0;
        let animationPlatforms = 0;

        return;
    }

    constructor Game new()
    {
        let MoveAreaWidth = 3; // 5
        let ScreenMiddle = 16;
        let LeftBorder = ScreenMiddle - MoveAreaWidth;
        let RightBorder = ScreenMiddle + MoveAreaWidth;

        let GameDelay = 20; //20

        let redrawAllObstaclesDelay = 7;
        let redrawAllObstaclesTimer = redrawAllObstaclesDelay;

        let Deaths = 0;

        let levelMenu = Menu.new(23, 12, 10, 5, 4, true);
        do levelMenu.AddItem("Level 1");
        do levelMenu.AddItem("Level 2");
        do levelMenu.AddItem("Level 3");
        do levelMenu.AddItem("Quit");

        let difficultyMenu = Menu.new(23, 10, 10, 5, 5, true); // sredina (23, 5)
        do difficultyMenu.AddItem("Easy");
        do difficultyMenu.AddItem("Medium");
        do difficultyMenu.AddItem("Hard");
        do difficultyMenu.AddItem("Insane");
        do difficultyMenu.AddItem("Return");

        let pauseMenu = Menu.new(23, 7, 10, 5, 4, false);
        do pauseMenu.AddItem("Resume");
        do pauseMenu.AddItem("Restart level");
        do pauseMenu.AddItem("Main menu");
        do pauseMenu.AddItem("Quit");

        let nextMenu = Menu.new(53, 19, 6, 5, 1, false);
        do nextMenu.AddItem("Next");

        let deadMenu = Menu.new(23, 11, 10, 5, 3, false);
        do deadMenu.AddItem("Restart level");
        do deadMenu.AddItem("Main menu");
        do deadMenu.AddItem("Quit");

        let shouldDisposeAnimation = true;

        do ShowMainMenu();

        do setupGame();
        do start();

        return this;
    }

    method void getLevel()
    {
        if (currLevel = 1)
        {
            let Level = Level1.new();
        }
        else { if (currLevel = 2)
        {
            let Level = Level2.new();
        }
        else {if (currLevel = 3)
        {
            let Level = Level3.new();
        }}}

        return;
    }

    function void CheckMainMenuAnimation()
    {
        var int i;
        var Platform platform;

        do animationCharacter.Jump();
        do animationCharacter.CheckGravity(animationCharacter.getAbsoluteX());
        do animationCharacter.Shoot(0);
        do animationCharacter.CheckBullets(0);

        if (animationCharacter.getAbsoluteX() > (animationLevel.getMapWidth() - 4))
        {
            do Game.disposeAnimiation();
            do Game.initAnimation();
        }

        do Sys.wait(10);

        let i = 0;
        while (i < animationPlatformsCount)
        {
            let platform = animationPlatforms[i];
            do platform.ClearScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < animationPlatformsCount)
        {
            let platform = animationPlatforms[i];
            do platform.DrawScrollLeft();

            let i = i + 1;
        }

        do animationCharacter.incrementAbsoluteX(1);

        return;
    }

    method void ShowMainMenu()
    {
        do Screen.clearScreen();

        do Output.moveCursor(0, 27);
        let text = "MAIN MENU";
        do Output.printString(text);

        do DrawLogo();

        do Game.initAnimation();

        do showLevelMenu();

        return;
    }

    method void showLevelMenu()
    {
        var int levelMenuResult;

        let quit = false;

        let levelMenuResult = levelMenu.Show();

        if (levelMenuResult = 3)
        {
            let quit = true;
            do Quit();
        }
        else
        {
            let currLevel = levelMenuResult + 1;
        }

        do levelMenu.Clear();

        if (~quit)
        {
            do showDifficultyMenu();
        }

        if (shouldDisposeAnimation)
        {
            do Game.disposeAnimiation();
            let shouldDisposeAnimation = false;
        }

        return;
    }

    method void showDifficultyMenu()
    {
        var int difficultyMenuResult;

        let difficultyMenuResult = difficultyMenu.Show();

        if (difficultyMenuResult = 4)
        {
            do difficultyMenu.Clear();
            do showLevelMenu();
            return;
        }
        else
        {
            do Difficulty.setDifficulty(difficultyMenuResult + 1);
        }

        do difficultyMenu.Clear();

        return;
    }

    method void showPauseMenu()
    {
        var int pauseMenuResult;

        let pauseMenuResult = pauseMenu.Show();

        if (pauseMenuResult = 0)
        {
            do RedrawAll();
            return;
        }
        else { if (pauseMenuResult = 1)
        {
            do dispose();
            do setupGame();
        }
        else { if (pauseMenuResult = 2)
        {
            let showMainMenu = true;
        }
        else { if (pauseMenuResult = 3)
        {
            let quit = true;
        }}}}

        return;
    }

    method void RedrawAll()
    {
        do DrawAllPlatforms();
        do DrawAllObstacles();
        do DrawAllEnemies();
        do DrawAllCollectables();
        do DrawAllBullets();

        do Character.Draw();
        do Finish.Draw(true);

        return;
    }

    method void setupGame()
    {
        if (quit)
        {
            do Quit();
            return;
        }

        do Screen.clearScreen();

        do getLevel();

        let map = Level.getMap();
        let mapWidth = Level.getMapWidth();
        let mapHeight = Level.getMapHeight();
        do Map.setWidth(mapWidth);
        do Map.setHeight(mapHeight);
        do Map.setMap(map);

        let Character = Level.getCharacter();

        do printLevel();
        do drawHeart();
        do drawCoin();
        do drawAmmo();
        do drawSkull();
        do Character.printHealth();
        do Character.printCoins();
        do Character.printAmmo();
        do Game.printKills();

        let Finish = Level.getFinish();

        let PlatformsCount = Level.getPlatformsCount();
        let ObstaclesCount = Level.getObstaclesCount();
        let EnemiesCount = Level.getEnemiesCount();
        let CollectablesCount = Level.getCollectablesCount();

        let Platforms = Level.getPlatforms();
        let Obstacles = Level.getObstacles();
        let Enemies = Level.getEnemies();
        let Collectables = Level.getCollectables();

        let WorldOffset = 0;

        do DrawAllPlatforms();
        do DrawAllCollectables();

        do Screen.drawLine(125, 0, 125, 15);

        return;
    }

    method void Quit()
    {
        do Screen.clearScreen();
        do Output.moveCursor(12, 29);
        let text = "bye";
        do Output.printString(text);
        return;
    }

    method void start()
    {
        var char key;
        var bool exit;
        var int i;
        var int j;
        var int temp;
        var Platform platform;
        var int value;

        let exit = false;

        while (~exit)
        {
            if (quit)
            {
                do Quit();
                return;
            }

            let key = Keyboard.keyPressed();

            if (key = 0)
            {
                let Direction = 0;
            }
            else { if (key = 131)
            {
                do Character.Jump();
            }
            else { if (key = 81) 
            {
                let exit = true;
            }
            else { if (key = 130) 
            {
                let Direction = 1;
            }
            else { if (key = 132) 
            {
                let Direction = 2;
            }
            else { if (key = 32)
            {
                do Character.Shoot(WorldOffset);
            }
            else { if (key = 140)
            {
                do showPauseMenu();
            }}}}}}}
            
            do Move();
            do Sys.wait(GameDelay);
            
            do Character.RedrawPlatforms(WorldOffset);

            do DoAllEnemyActions();

            do CheckEnemyAndCharacterCollision();

            do CheckAllBullets();
            do CheckAllBulletCollisions();
            
            do CheckCollectableAndCharacterCollision();

            do CheckTimers();
            do DecrementTimers();


            if (showMainMenu | Character.IsCollidedWithFinish(Finish) | (Character.getHealth() < 1))
            {
                let exit = true;
            }
        }

        do Screen.clearScreen();

        if (Character.getHealth() < 1)
        {
            do ShowDeadScreen();
        }
        else
        {
            if (showMainMenu)
            {
                do ShowMainMenu();
                let showMainMenu = false;
            }
            else
            {
                if (currLevel < LevelsCount)
                {
                    do ShowLevelComplete();
                    let currLevel = currLevel + 1;
                }
                else
                {
                    do ShowLevelComplete();
                    do ShowTheEnd();
                    do ShowMainMenu();
                }
            }
        }
        
        do dispose();
        do setupGame();
        do start();

        return;
    }

    method void ShowDeadScreen()
    {
        var int memAddress;
        var int result;

        do Output.moveCursor(5, 28);
        let text = "YOU DEAD";
        do Output.printString(text);

        let memAddress = Constants.getMemAddress(15, 96);

        do MemoryExt.poke(memAddress, 0, 16288);
	    do MemoryExt.poke(memAddress, 32, -24688);
	    do MemoryExt.poke(memAddress, 64, -14576);
	    do MemoryExt.poke(memAddress, 96, -10096);
	    do MemoryExt.poke(memAddress, 128, -14576);
	    do MemoryExt.poke(memAddress, 160, 17440);
	    do MemoryExt.poke(memAddress, 192, 576);
	    do MemoryExt.poke(memAddress, 224, 1920);
	    do MemoryExt.poke(memAddress, 256, -27008);
	    do MemoryExt.poke(memAddress, 288, -27008);
	    do MemoryExt.poke(memAddress, 320, -384);
	    do MemoryExt.poke(memAddress, 352, -27008);
	    do MemoryExt.poke(memAddress, 384, -27392);
	    do MemoryExt.poke(memAddress, 416, 512);
	    do MemoryExt.poke(memAddress, 448, 3584);
	    do MemoryExt.poke(memAddress, 480, -2048);

        let memAddress = memAddress + 1;

        do MemoryExt.poke(memAddress, 0, 766);
	    do MemoryExt.poke(memAddress, 32, 1276);
	    do MemoryExt.poke(memAddress, 64, 1137);
	    do MemoryExt.poke(memAddress, 96, 1165);
	    do MemoryExt.poke(memAddress, 128, 1137);
	    do MemoryExt.poke(memAddress, 160, 529);
	    do MemoryExt.poke(memAddress, 192, 288);
	    do MemoryExt.poke(memAddress, 224, 240);
	    do MemoryExt.poke(memAddress, 256, 180);
	    do MemoryExt.poke(memAddress, 288, 180);
	    do MemoryExt.poke(memAddress, 320, 191);
	    do MemoryExt.poke(memAddress, 352, 180);
	    do MemoryExt.poke(memAddress, 384, 84);
	    do MemoryExt.poke(memAddress, 416, 32);
	    do MemoryExt.poke(memAddress, 448, 56);
	    do MemoryExt.poke(memAddress, 480, 15);

        let memAddress = memAddress - 512;

        do MemoryExt.poke(memAddress, 0, 31);
	    do MemoryExt.poke(memAddress, 32, 96);
	    do MemoryExt.poke(memAddress, 64, 384);
	    do MemoryExt.poke(memAddress, 96, 512);
	    do MemoryExt.poke(memAddress, 128, 1024);
	    do MemoryExt.poke(memAddress, 160, 2048);
	    do MemoryExt.poke(memAddress, 192, 2048);
	    do MemoryExt.poke(memAddress, 224, 4096);
	    do MemoryExt.poke(memAddress, 256, 4096);
	    do MemoryExt.poke(memAddress, 288, 4608);
	    do MemoryExt.poke(memAddress, 320, 4636);
	    do MemoryExt.poke(memAddress, 352, 4354);
	    do MemoryExt.poke(memAddress, 384, 4352);
	    do MemoryExt.poke(memAddress, 416, 2425);
	    do MemoryExt.poke(memAddress, 448, 2814);
	    do MemoryExt.poke(memAddress, 480, 1532);

        let memAddress = memAddress - 1;

        do MemoryExt.poke(memAddress, 0, -2048);
	    do MemoryExt.poke(memAddress, 32, 1536);
	    do MemoryExt.poke(memAddress, 64, 384);
	    do MemoryExt.poke(memAddress, 96, 64);
	    do MemoryExt.poke(memAddress, 128, 32);
	    do MemoryExt.poke(memAddress, 160, 16);
	    do MemoryExt.poke(memAddress, 192, 16);
	    do MemoryExt.poke(memAddress, 224, 8);
	    do MemoryExt.poke(memAddress, 256, 8);
	    do MemoryExt.poke(memAddress, 288, 72);
	    do MemoryExt.poke(memAddress, 320, 14408);
	    do MemoryExt.poke(memAddress, 352, 16520);
	    do MemoryExt.poke(memAddress, 384, 136);
	    do MemoryExt.poke(memAddress, 416, -24944);
	    do MemoryExt.poke(memAddress, 448, 32592);
	    do MemoryExt.poke(memAddress, 480, 16288);

        let result = deadMenu.Show();

        if (result = 0)
        {
            let Kills = 0;
            let Deaths = Deaths + 1;
            do Character.setCoins(0);
        }
        else { if (result = 1)
        {
            do ShowMainMenu();
        }
        else { if (result = 2)
        {
            let quit = true;
        }}}

        return;
    }

    method void ShowLevelComplete()
    {
        var int curY;
        var int curX;

        do Screen.clearScreen();

        let curY = 8;
        let curX = 24;

        do Output.moveCursor(curY, curX);
        let text = "LEVEL ";
        do Output.printString(text);
        do Output.printInt(currLevel);
        let text = " COMPLETE";
        do Output.printString(text);

        do Sys.wait(500);
        let curY = curY + 2;

        do Output.moveCursor(curY, curX);
        let text = "Difficulty: ";
        do Output.printString(text);

        if (Difficulty.getDifficulty() = 1)
        {
            let text = "Easy";
        }
        else { if (Difficulty.getDifficulty() = 2)
        {
            let text = "Medium";
        }
        else { if (Difficulty.getDifficulty() = 3)
        {
            let text = "Hard";
        }
        else { if (Difficulty.getDifficulty() = 4)
        {
            let text = "Insane";
        }}}}

        do Output.printString(text);

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Deaths: ";
        do Output.printString(text);
        do Output.printInt(Deaths);

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Coins: ";
        do Output.printString(text);
        do Output.printInt(Character.getCoins());

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Kills: ";
        do Output.printString(text);
        do Output.printInt(Kills);

        do Sys.wait(500);

        do nextMenu.Show();
        
        return;
    }

    method void ShowTheEnd()
    {
        var int curY;
        var int curX;

        do Screen.clearScreen();

        let curY = 8;
        let curX = 29;

        do Output.moveCursor(curY, curX);
        let text = "THE END";
        do Output.printString(text);

        do Sys.wait(500);
        let curY = curY + 2;
        let curX = 24;

        do Output.moveCursor(curY, curX);
        let text = "Difficulty: ";
        do Output.printString(text);

        if (Difficulty.getDifficulty() = 1)
        {
            let text = "Easy";
        }
        else { if (Difficulty.getDifficulty() = 2)
        {
            let text = "Medium";
        }
        else { if (Difficulty.getDifficulty() = 3)
        {
            let text = "Hard";
        }
        else { if (Difficulty.getDifficulty() = 4)
        {
            let text = "Insane";
        }}}}

        do Output.printString(text);

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Total Deaths: ";
        do Output.printString(text);
        do Output.printInt(TotalDeaths + Deaths);

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Total Coins: ";
        do Output.printString(text);
        do Output.printInt(TotalCoins + Character.getCoins());

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Total Kills: ";
        do Output.printString(text);
        do Output.printInt(TotalKills + Kills);

        do Sys.wait(500);

        let TotalCoins = 0;
        let TotalDeaths = 0;
        let TotalKills = 0;

        do nextMenu.Show();



        return;
    }

    // GAME TIMERS
    method void CheckTimers()
    {
        if (redrawAllObstaclesTimer < 1)
        {
            do DrawAllObstacles();
            let redrawAllObstaclesTimer = redrawAllObstaclesDelay;
        }

        do Character.CheckTimers();
        do CheckAllEnemyTimers();
        do CheckAllSpriteTimers();
        
        return;
    }

    
    method void DecrementTimers()
    {
        let redrawAllObstaclesTimer = redrawAllObstaclesTimer - 1;

        do Character.DecrementTimers();
        do DecrementAllEnemyTimers();
        do DecrementAllSpriteTimers();

        return;
    }

    //// ENEMY TIMERS
    method void CheckAllEnemyTimers()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.CheckTimers();
            let i = i + 1;
        }

        return;
    }

    method void DecrementAllEnemyTimers()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.DecrementTimers();
            let i = i + 1;
        }

        return;
    }

    method void CheckAllSpriteTimers()
    {
        do Bat.CheckTimers();
        //do Spider.CheckTimers();

        do Heart.CheckTimers();
        do Coin.CheckTimers();

        do DrawAllCollectables();

        return;
    }

    method void DecrementAllSpriteTimers()
    {
        do Bat.DecrementTimers();
        //do Spider.DecrementTimers();

        do Heart.DecrementTimers();
        do Coin.DecrementTimers();

        return;
    }

    method void DrawAllPlatforms()
    {
        var Platform platform;
        var int i;

        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.Draw();
            let i = i + 1;
        }

        return;
    }

    method void DrawAllObstacles()
    {
        var Obstacle obstacle;
        var int i;

        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.Draw();
            let i = i + 1;
        }

        return;
    }

    method void DrawAllEnemies()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.Draw();
            let i = i + 1;
        }

        return;
    }

    method void DrawAllCollectables()
    {
        var int i;
        var Collectable collectable;

        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];
            do collectable.Draw(true);
            let i = i + 1;
        }

        return;
    }

    method void DrawAllBullets()
    {
        var Enemy enemy;
        var int i;

        do Character.DrawAllBullets();

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.DrawAllBullets();
            let i = i + 1;
        }

        return;

    }

    method void DoAllEnemyActions()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do Character.DoEnemyAction(enemy, WorldOffset);
            let i = i + 1;
        }

        return;
    }

    method void CheckEnemyAndCharacterCollision()
    {
        var int i;
        var Enemy enemy;
        var bool collided_sides;
        var bool collided_top;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];

            if (Character.CheckCollisionWithEnemy(enemy))
            {
                do DrawAllPlatforms();
                let i = EnemiesCount;
            }

            let i = i + 1;
        }

        return;
    }


    method void CheckAllBullets()
    {
        var int i;
        var Enemy enemy;

        do Character.CheckBullets(WorldOffset);

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.CheckBullets(WorldOffset);
            let i = i + 1;
        }

        return;
    }

    method void CheckAllBulletCollisions()
    {
        var int i;
        var int j;
        var int characterBulletsCount;
        var int enemyBulletsCount;
        var Array characterBullets;
        var Array enemyBullets;
        var Enemy enemy;
        var Bullet bullet;

        let characterBulletsCount = Character.getBulletsCount();
        let characterBullets = Character.getBullets();

        while (i < characterBulletsCount)
        {
            let bullet = characterBullets[i];
            do Character.CheckCollisionWithBullet(bullet);

            let j = 0;
            while (j < EnemiesCount)
            {
                let enemy = Enemies[j];
                do enemy.CheckCollisionWithBullet(bullet);
                let j = j + 1;
            }

            let i = i + 1;
        }

        let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];

            let enemyBulletsCount = enemy.getBulletsCount();
            let enemyBullets = enemy.getBullets();

            let j = 0;
            while (j < enemyBulletsCount)
            {
                let bullet = enemyBullets[j];
                do Character.CheckCollisionWithBullet(bullet);
                let j = j + 1;
            }

            let i = i + 1;
        }     

        return;
    }

    method void CheckCollectableAndCharacterCollision()
    {
        var int i;
        var Collectable collectable;

        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];

            do Character.CheckCollisionWithCollectable(collectable);

            let i = i + 1;
        }

        return;
    }

    method void ScrollLeft()
    {
        var int i;
        var Platform platform;
        var Obstacle obstacle;
        var Enemy enemy;
        var Collectable collectable;

        let WorldOffset = WorldOffset + 1;
        do Character.incrementAbsoluteX(1);

        do Character.ScrollBulletsLeft();

        //let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.ScrollBulletsLeft();
            do enemy.ScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];
            do collectable.ScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.ClearScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.ClearScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.DrawScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.DrawScrollLeft();

            let i = i + 1;
        }

        do Finish.ScrollLeft();


        return;
    }

    method void ScrollRight()
    {
        var int i;
        var Platform platform;
        var Obstacle obstacle;
        var Enemy enemy;
        var Collectable collectable;

        let WorldOffset = WorldOffset - 1;
        do Character.incrementAbsoluteX(-1);

        do Character.ScrollBulletsRight();

        //let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.ScrollBulletsRight();
            do enemy.ScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];
            do collectable.ScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.ClearScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.ClearScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.DrawScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.DrawScrollRight();

            let i = i + 1;
        }

        do Finish.ScrollRight();

        return;
    }

    method void Move()
    {
        var int x;
        var int absX;
        var int cWidth;
        
        let x = Character.getX();
        let absX = Character.getAbsoluteX();
        let cWidth = Character.getWidth();

        do Character.CheckGravity(WorldOffset);
        do Character.CheckCollisionWithObstacles();

        if (Direction = 1) 
        {
            do Character.setMovingLeft(true);

            if (~Character.CheckCollisionWithPlatformLeft(WorldOffset))
            {
                if (absX < LeftBorder)
                {
                    do Character.MoveLeft();
                }
                else { if (x < LeftBorder)
                {
                    do ScrollRight();
                }
                else 
                {
                    do Character.MoveLeft();
                }}
            }
        }
        else { if (Direction = 2)
        {
            do Character.setMovingLeft(false);

            if (~Character.CheckCollisionWithPlatformRight(WorldOffset))
            {
                if (absX > (mapWidth - RightBorder))
                {
                    do Character.MoveRight();
                }
                else { if (x > (RightBorder - cWidth))
                {
                    do ScrollLeft();
                }
                else 
                {
                    do Character.MoveRight();
                }}
            }
        }}
        
        return;
    }

    // DRAWING AND PRINTING
    method void drawHeart()
    {
        var int memAddress;
        let memAddress = Constants.getScreenStart() + 8;

	    do MemoryExt.poke(memAddress, 96, 3696);
	    do MemoryExt.poke(memAddress, 128, 8184);
	    do MemoryExt.poke(memAddress, 160, 8184);
	    do MemoryExt.poke(memAddress, 192, 4080);
	    do MemoryExt.poke(memAddress, 224, 2016);
	    do MemoryExt.poke(memAddress, 256, 960);
	    do MemoryExt.poke(memAddress, 288, 384);

        return;
    }

    method void drawCoin()
    {
        var int memAddress;
        let memAddress = Constants.getScreenStart() + 12;

        do MemoryExt.poke(memAddress, 32, 2016);
	    do MemoryExt.poke(memAddress, 64, 2064);
	    do MemoryExt.poke(memAddress, 96, 5064);
	    do MemoryExt.poke(memAddress, 128, 5160);
	    do MemoryExt.poke(memAddress, 160, 5160);
	    do MemoryExt.poke(memAddress, 192, 5160);
	    do MemoryExt.poke(memAddress, 224, 5160);
	    do MemoryExt.poke(memAddress, 256, 5064);
	    do MemoryExt.poke(memAddress, 288, 2064);
	    do MemoryExt.poke(memAddress, 320, 2016);

        return;
    }

    method void drawAmmo()
    {
        var int memAddress;
        let memAddress = Constants.getScreenStart() + 16;

        do MemoryExt.poke(memAddress, 32, 12684);
	    do MemoryExt.poke(memAddress, 64, 12684);
	    do MemoryExt.poke(memAddress, 96, 31710);
	    do MemoryExt.poke(memAddress, 128, 31710);
	    do MemoryExt.poke(memAddress, 160, 19026);
	    do MemoryExt.poke(memAddress, 192, 19026);
	    do MemoryExt.poke(memAddress, 224, 19026);
	    do MemoryExt.poke(memAddress, 256, 19026);
	    do MemoryExt.poke(memAddress, 288, 19026);
	    do MemoryExt.poke(memAddress, 320, 12684);
        return;
    }

    method void drawSkull()
    {
        var int memAddress;
        let memAddress = Constants.getScreenStart() + 28;

        //do Memory.poke(memAddress + 32, 1016);
	    //do Memory.poke(memAddress + 64, 1548);
	    //do Memory.poke(memAddress + 96, 3078);
	    //do Memory.poke(memAddress + 128, 2050);
	    //do Memory.poke(memAddress + 160, 2446);
	    //do Memory.poke(memAddress + 192, 2478);
	    //do Memory.poke(memAddress + 224, 3074);
	    //do Memory.poke(memAddress + 256, 3590);
	    //do Memory.poke(memAddress + 288, 1620);
	    //do Memory.poke(memAddress + 320, 1020);

        do MemoryExt.poke(memAddress, 32, 4064);
	    do MemoryExt.poke(memAddress, 64, 8176);
	    do MemoryExt.poke(memAddress, 96, 8176);
	    do MemoryExt.poke(memAddress, 128, 7088);
	    do MemoryExt.poke(memAddress, 160, 12568);
	    do MemoryExt.poke(memAddress, 192, 13208);
	    do MemoryExt.poke(memAddress, 224, 16376);
	    do MemoryExt.poke(memAddress, 256, 7920);
	    do MemoryExt.poke(memAddress, 288, 8176);
	    do MemoryExt.poke(memAddress, 320, 1984);
	    do MemoryExt.poke(memAddress, 352, 1344);

        return;
    }


    method void printLevel()
    {
        do Output.moveCursor(0, 1);
        let text = "Level ";
        do Output.printString(text);
        do Output.printInt(currLevel);
        
        if (Difficulty.getDifficulty() = 1)
        {
            let text = " Easy";
        }
        else { if (Difficulty.getDifficulty() = 2)
        {
            let text = " Medium";
        }
        else { if (Difficulty.getDifficulty() = 3)
        {
            let text = " Hard";
        }
        else { if (Difficulty.getDifficulty() = 4)
        {
            let text = " Insane";
        }}}}

        do Output.printString(text);

        return;
    }


    function void addKill() 
    { 
        let Kills = Kills + 1; 
        do Game.printKills();
        return;
    }
    function void printKills()
    {   
        do Output.moveCursor(0, 58);
        let text = ": ";
        do Output.printString(text);
        do Output.printInt(Kills);

        return;
    }

    method void dispose()
    {
        do Level.dispose();

        let TotalCoins = TotalCoins + Character.getCoins();
        let TotalKills = TotalKills + Kills;
        let Kills = 0;
        if (Character.getHealth() > 0)
        {
            let TotalDeaths = TotalDeaths + Deaths;
            let Deaths = 0;
        }

        //do Game.disposeAnimiation();

        let PlatformsCount = 0;
        let ObstaclesCount = 0;
        let EnemiesCount = 0;
        let CollectablesCount = 0;

        let Platforms = 0;
        let Obstacles = 0;
        let Collectables = 0;
        let Enemies = 0;

        let shouldDisposeAnimation = true;

        //do Memory.deAlloc(this);

        return;
    }

    method void DrawLogo()
    {
        // Jeff
        do Memory.poke(21347, -194);
        do Memory.poke(21348, 32767);
        do Memory.poke(21349, -2);
        do Memory.poke(21350, -385);
        do Memory.poke(21351, -1);
        do Memory.poke(21379, -194);
        do Memory.poke(21380, 32767);
        do Memory.poke(21381, -2);
        do Memory.poke(21382, -385);
        do Memory.poke(21383, -1);
        do Memory.poke(21411, -194);
        do Memory.poke(21412, 32767);
        do Memory.poke(21413, -2);
        do Memory.poke(21414, -385);
        do Memory.poke(21415, 32767);
        do Memory.poke(21443, -194);
        do Memory.poke(21444, 32368);
        do Memory.poke(21445, -32258);
        do Memory.poke(21446, -481);
        do Memory.poke(21447, 7937);
        do Memory.poke(21475, -194);
        do Memory.poke(21476, 32352);
        do Memory.poke(21477, 254);
        do Memory.poke(21478, -481);
        do Memory.poke(21479, 7937);
        do Memory.poke(21507, -194);
        do Memory.poke(21508, 31840);
        do Memory.poke(21509, 254);
        do Memory.poke(21510, -481);
        do Memory.poke(21511, 7937);
        do Memory.poke(21539, 16190);
        do Memory.poke(21540, 28672);
        do Memory.poke(21541, 62);
        do Memory.poke(21542, 15900);
        do Memory.poke(21543, 7168);
        do Memory.poke(21571, 7998);
        do Memory.poke(21572, 28672);
        do Memory.poke(21573, 62);
        do Memory.poke(21574, 15900);
        do Memory.poke(21575, 7168);
        do Memory.poke(21603, 7998);
        do Memory.poke(21604, 12288);
        do Memory.poke(21605, 62);
        do Memory.poke(21606, 32284);
        do Memory.poke(21607, 6144);
        do Memory.poke(21635, 7998);
        do Memory.poke(21636, 3584);
        do Memory.poke(21637, 254);
        do Memory.poke(21638, -512);
        do Memory.poke(21639, 1);
        do Memory.poke(21667, 7998);
        do Memory.poke(21668, 3584);
        do Memory.poke(21669, 254);
        do Memory.poke(21670, -512);
        do Memory.poke(21671, 1);
        do Memory.poke(21699, 16190);
        do Memory.poke(21700, 3072);
        do Memory.poke(21701, 254);
        do Memory.poke(21702, -512);
        do Memory.poke(21703, 1);
        do Memory.poke(21731, -194);
        do Memory.poke(21732, 31);
        do Memory.poke(21733, 62);
        do Memory.poke(21734, 15900);
        do Memory.poke(21735, 7168);
        do Memory.poke(21763, -194);
        do Memory.poke(21764, 31);
        do Memory.poke(21765, 62);
        do Memory.poke(21766, 15900);
        do Memory.poke(21767, 7168);
        do Memory.poke(21795, -194);
        do Memory.poke(21796, 31);
        do Memory.poke(21797, 62);
        do Memory.poke(21798, 32284);
        do Memory.poke(21799, 7168);
        do Memory.poke(21827, -194);
        do Memory.poke(21828, 28);
        do Memory.poke(21829, -2);
        do Memory.poke(21830, -512);
        do Memory.poke(21831, 255);
        do Memory.poke(21859, -194);
        do Memory.poke(21860, 28);
        do Memory.poke(21861, -2);
        do Memory.poke(21862, -512);
        do Memory.poke(21863, 255);
        do Memory.poke(21891, -194);
        do Memory.poke(21892, 28);
        do Memory.poke(21893, -2);
        do Memory.poke(21894, -512);
        do Memory.poke(21895, 255);
        do Memory.poke(21923, 16190);
        do Memory.poke(21925, 8190);
        do Memory.poke(21926, -512);
        do Memory.poke(21927, 63);
        do Memory.poke(21955, 7998);
        do Memory.poke(21957, 8190);
        do Memory.poke(21958, -512);
        do Memory.poke(21959, 63);
        do Memory.poke(21987, 7998);
        do Memory.poke(21988, 8);
        do Memory.poke(21989, 8190);
        do Memory.poke(21990, -512);
        do Memory.poke(21991, 63);
        do Memory.poke(22018, 7);
        do Memory.poke(22019, 7998);
        do Memory.poke(22020, 28);
        do Memory.poke(22021, 1854);
        do Memory.poke(22022, 15872);
        do Memory.poke(22023, 6);
        do Memory.poke(22050, 7);
        do Memory.poke(22051, 7998);
        do Memory.poke(22052, 28);
        do Memory.poke(22053, 1854);
        do Memory.poke(22054, 15872);
        do Memory.poke(22055, 6);
        do Memory.poke(22082, 7);
        do Memory.poke(22083, 7998);
        do Memory.poke(22084, 12);
        do Memory.poke(22085, 1854);
        do Memory.poke(22086, 15872);
        do Memory.poke(22087, 6);
        do Memory.poke(22114, 7);
        do Memory.poke(22115, 7998);
        do Memory.poke(22117, 62);
        do Memory.poke(22118, 15872);
        do Memory.poke(22146, 7);
        do Memory.poke(22147, 7998);
        do Memory.poke(22149, 62);
        do Memory.poke(22150, 15872);
        do Memory.poke(22178, 7);
        do Memory.poke(22179, 16190);
        do Memory.poke(22181, 62);
        do Memory.poke(22182, 15872);
        do Memory.poke(22210, -4);
        do Memory.poke(22211, -199);
        do Memory.poke(22212, 32767);
        do Memory.poke(22213, 62);
        do Memory.poke(22214, 15872);
        do Memory.poke(22242, -4);
        do Memory.poke(22243, -199);
        do Memory.poke(22244, 32767);
        do Memory.poke(22245, 62);
        do Memory.poke(22246, 15872);
        do Memory.poke(22274, -4);
        do Memory.poke(22275, -199);
        do Memory.poke(22276, 32767);
        do Memory.poke(22277, 62);
        do Memory.poke(22278, 15872);
        do Memory.poke(22306, -3972);
        do Memory.poke(22307, 7993);
        do Memory.poke(22308, 31747);
        do Memory.poke(22309, 6206);
        do Memory.poke(22310, 15872);
        do Memory.poke(22311, 56);
        do Memory.poke(22338, -3972);
        do Memory.poke(22339, 7993);
        do Memory.poke(22340, 32259);
        do Memory.poke(22341, 6206);
        do Memory.poke(22342, 15872);
        do Memory.poke(22343, 56);
        do Memory.poke(22370, -3972);
        do Memory.poke(22371, 7985);
        do Memory.poke(22372, 31842);
        do Memory.poke(22373, 6206);
        do Memory.poke(22374, 15872);
        do Memory.poke(22375, 24);
        do Memory.poke(22402, -32740);
        do Memory.poke(22403, 7937);
        do Memory.poke(22404, 28768);
        do Memory.poke(22405, 14);
        do Memory.poke(22406, 3584);
        do Memory.poke(22434, -32740);
        do Memory.poke(22435, 7937);
        do Memory.poke(22436, 28768);
        do Memory.poke(22437, 14);
        do Memory.poke(22438, 3584);
        do Memory.poke(22466, -32744);
        do Memory.poke(22467, 7937);
        do Memory.poke(22468, 8288);
        do Memory.poke(22469, 6);
        do Memory.poke(22470, 3072);
        do Memory.poke(22499, 1792);
        do Memory.poke(22500, 96);
        do Memory.poke(22531, 1792);
        do Memory.poke(22532, 96);
        do Memory.poke(22564, 12288);
        do Memory.poke(22565, 6);
        do Memory.poke(22566, 3072);
        do Memory.poke(22596, 28672);
        do Memory.poke(22597, 14);
        do Memory.poke(22598, 3584);
        do Memory.poke(22628, 28672);
        do Memory.poke(22629, 14);
        do Memory.poke(22630, 3584);
        do Memory.poke(22658, -32760);
        do Memory.poke(22659, 6145);
        do Memory.poke(22690, -32740);
        do Memory.poke(22691, 6145);
        do Memory.poke(22722, -32740);
        do Memory.poke(22723, 6145);
        do Memory.poke(22754, -32740);
        do Memory.poke(22755, 6145);
        do Memory.poke(22757, 16);
        do Memory.poke(22758, 12288);
        do Memory.poke(22786, 28);
        do Memory.poke(22789, 56);
        do Memory.poke(22790, 12288);
        do Memory.poke(22818, 28);
        do Memory.poke(22821, 56);
        do Memory.poke(22822, 12288);
        do Memory.poke(22850, 24);
        do Memory.poke(22853, 16);
        do Memory.poke(22854, 12288);

        // evil jeff
        do Memory.poke(21048, -16384);
        do Memory.poke(21049, -1);
        do Memory.poke(21050, -1);
        do Memory.poke(21051, -1);
        do Memory.poke(21052, 3);
        do Memory.poke(21080, -8192);
        do Memory.poke(21081, -1);
        do Memory.poke(21082, -1);
        do Memory.poke(21083, -1);
        do Memory.poke(21084, 7);
        do Memory.poke(21112, -1024);
        do Memory.poke(21113, -1);
        do Memory.poke(21114, -1);
        do Memory.poke(21115, -1);
        do Memory.poke(21116, 15);
        do Memory.poke(21144, -1024);
        do Memory.poke(21145, -1);
        do Memory.poke(21146, -1);
        do Memory.poke(21147, -1);
        do Memory.poke(21148, 31);
        do Memory.poke(21176, -4096);
        do Memory.poke(21177, -1);
        do Memory.poke(21178, -1);
        do Memory.poke(21179, -1);
        do Memory.poke(21180, 63);
        do Memory.poke(21208, -3840);
        do Memory.poke(21209, -1);
        do Memory.poke(21210, -1);
        do Memory.poke(21211, -1);
        do Memory.poke(21212, 127);
        do Memory.poke(21240, -1600);
        do Memory.poke(21241, -1);
        do Memory.poke(21242, -1);
        do Memory.poke(21243, -1);
        do Memory.poke(21244, 255);
        do Memory.poke(21272, -512);
        do Memory.poke(21273, -1);
        do Memory.poke(21274, -1);
        do Memory.poke(21275, -1);
        do Memory.poke(21276, 511);
        do Memory.poke(21304, -256);
        do Memory.poke(21305, -1);
        do Memory.poke(21306, -1);
        do Memory.poke(21307, -1);
        do Memory.poke(21308, 511);
        do Memory.poke(21336, -256);
        do Memory.poke(21337, -1);
        do Memory.poke(21338, -1);
        do Memory.poke(21339, -1);
        do Memory.poke(21340, 255);
        do Memory.poke(21368, -256);
        do Memory.poke(21369, -1);
        do Memory.poke(21370, -1);
        do Memory.poke(21371, -1);
        do Memory.poke(21372, 1215);
        do Memory.poke(21400, -128);
        do Memory.poke(21401, -1);
        do Memory.poke(21402, -1);
        do Memory.poke(21403, -1);
        do Memory.poke(21404, 319);
        do Memory.poke(21432, -256);
        do Memory.poke(21433, -1);
        do Memory.poke(21434, -1);
        do Memory.poke(21435, -1);
        do Memory.poke(21436, 1599);
        do Memory.poke(21464, -256);
        do Memory.poke(21465, -1);
        do Memory.poke(21466, -1);
        do Memory.poke(21467, -1);
        do Memory.poke(21468, 63);
        do Memory.poke(21496, -128);
        do Memory.poke(21497, -1);
        do Memory.poke(21498, -1);
        do Memory.poke(21499, -1);
        do Memory.poke(21500, 255);
        do Memory.poke(21528, -256);
        do Memory.poke(21529, -1);
        do Memory.poke(21530, -1);
        do Memory.poke(21531, -1);
        do Memory.poke(21532, 127);
        do Memory.poke(21560, -30);
        do Memory.poke(21561, -1);
        do Memory.poke(21562, -1);
        do Memory.poke(21563, -1);
        do Memory.poke(21564, 127);
        do Memory.poke(21592, -30);
        do Memory.poke(21593, -1);
        do Memory.poke(21594, -1);
        do Memory.poke(21595, -1);
        do Memory.poke(21596, 255);
        do Memory.poke(21624, -6);
        do Memory.poke(21625, -493);
        do Memory.poke(21626, -1);
        do Memory.poke(21627, -1);
        do Memory.poke(21628, 255);
        do Memory.poke(21656, -2);
        do Memory.poke(21657, -1021);
        do Memory.poke(21658, -1);
        do Memory.poke(21659, -1);
        do Memory.poke(21660, 511);
        do Memory.poke(21688, -1);
        do Memory.poke(21689, -2045);
        do Memory.poke(21690, -1);
        do Memory.poke(21691, -1);
        do Memory.poke(21692, 511);
        do Memory.poke(21720, -1);
        do Memory.poke(21721, -1021);
        do Memory.poke(21722, -1);
        do Memory.poke(21723, -1);
        do Memory.poke(21724, 511);
        do Memory.poke(21752, -2);
        do Memory.poke(21753, -2047);
        do Memory.poke(21754, -1);
        do Memory.poke(21755, -1);
        do Memory.poke(21756, 511);
        do Memory.poke(21784, -1);
        do Memory.poke(21785, -2047);
        do Memory.poke(21786, -1);
        do Memory.poke(21787, -1);
        do Memory.poke(21788, 511);
        do Memory.poke(21816, -2);
        do Memory.poke(21817, -1021);
        do Memory.poke(21818, -1);
        do Memory.poke(21819, -1);
        do Memory.poke(21820, 255);
        do Memory.poke(21848, -2);
        do Memory.poke(21849, -113);
        do Memory.poke(21850, -1);
        do Memory.poke(21851, -1);
        do Memory.poke(21852, 255);
        do Memory.poke(21880, -4);
        do Memory.poke(21881, -81);
        do Memory.poke(21882, -1);
        do Memory.poke(21883, -1);
        do Memory.poke(21884, 255);
        do Memory.poke(21912, -2);
        do Memory.poke(21913, -321);
        do Memory.poke(21914, -1);
        do Memory.poke(21915, -1);
        do Memory.poke(21916, 127);
        do Memory.poke(21944, -1);
        do Memory.poke(21945, -1);
        do Memory.poke(21946, -1);
        do Memory.poke(21947, -1);
        do Memory.poke(21948, 127);
        do Memory.poke(21976, -1);
        do Memory.poke(21977, -17);
        do Memory.poke(21978, -1);
        do Memory.poke(21979, -1);
        do Memory.poke(21980, 127);
        do Memory.poke(22008, -2);
        do Memory.poke(22009, -497);
        do Memory.poke(22010, -1);
        do Memory.poke(22011, -1);
        do Memory.poke(22012, 127);
        do Memory.poke(22039, 16384);
        do Memory.poke(22040, -1);
        do Memory.poke(22041, -1);
        do Memory.poke(22042, -4097);
        do Memory.poke(22043, -1);
        do Memory.poke(22044, 127);
        do Memory.poke(22072, -1);
        do Memory.poke(22073, -1);
        do Memory.poke(22074, 4095);
        do Memory.poke(22075, -2);
        do Memory.poke(22076, 255);
        do Memory.poke(22104, -2);
        do Memory.poke(22105, -1);
        do Memory.poke(22106, 3975);
        do Memory.poke(22107, -4);
        do Memory.poke(22108, 1663);
        do Memory.poke(22136, -2);
        do Memory.poke(22137, -1);
        do Memory.poke(22138, -3897);
        do Memory.poke(22139, -1);
        do Memory.poke(22140, 8191);
        do Memory.poke(22168, -1);
        do Memory.poke(22169, -1);
        do Memory.poke(22170, -4089);
        do Memory.poke(22171, -1);
        do Memory.poke(22172, 8191);
        do Memory.poke(22200, -1);
        do Memory.poke(22201, -1);
        do Memory.poke(22202, -1024);
        do Memory.poke(22203, -1);
        do Memory.poke(22204, 16383);
        do Memory.poke(22232, -2);
        do Memory.poke(22233, 24575);
        do Memory.poke(22234, -1856);
        do Memory.poke(22235, -1);
        do Memory.poke(22236, 16383);
        do Memory.poke(22264, -1);
        do Memory.poke(22265, 1023);
        do Memory.poke(22266, -1024);
        do Memory.poke(22267, -1);
        do Memory.poke(22268, 16383);
        do Memory.poke(22295, -4096);
        do Memory.poke(22296, -1);
        do Memory.poke(22297, 95);
        do Memory.poke(22298, -2048);
        do Memory.poke(22299, -1);
        do Memory.poke(22300, 32767);
        do Memory.poke(22327, 28672);
        do Memory.poke(22328, -1);
        do Memory.poke(22329, 15);
        do Memory.poke(22330, -1919);
        do Memory.poke(22331, -1);
        do Memory.poke(22332, 32767);
        do Memory.poke(22359, 12288);
        do Memory.poke(22360, -1);
        do Memory.poke(22361, -8161);
        do Memory.poke(22362, -829);
        do Memory.poke(22363, -1);
        do Memory.poke(22364, 32767);
        do Memory.poke(22391, 2048);
        do Memory.poke(22392, -1);
        do Memory.poke(22393, -1);
        do Memory.poke(22394, -61);
        do Memory.poke(22395, -1);
        do Memory.poke(22396, 32767);
        do Memory.poke(22423, 3072);
        do Memory.poke(22424, -3313);
        do Memory.poke(22425, -1);
        do Memory.poke(22426, -1);
        do Memory.poke(22427, -1);
        do Memory.poke(22428, 32543);
        do Memory.poke(22455, 1024);
        do Memory.poke(22456, -7289);
        do Memory.poke(22457, -1);
        do Memory.poke(22458, 8167);
        do Memory.poke(22459, -64);
        do Memory.poke(22460, 32319);
        do Memory.poke(22488, -14338);
        do Memory.poke(22489, -16385);
        do Memory.poke(22490, 4037);
        do Memory.poke(22491, -64);
        do Memory.poke(22492, 16191);
        do Memory.poke(22520, 4094);
        do Memory.poke(22521, -1);
        do Memory.poke(22522, 4033);
        do Memory.poke(22523, -256);
        do Memory.poke(22524, 16383);
        do Memory.poke(22551, 64);
        do Memory.poke(22552, 8190);
        do Memory.poke(22553, -16384);
        do Memory.poke(22554, 4074);
        do Memory.poke(22555, -8192);
        do Memory.poke(22556, 16383);
        do Memory.poke(22584, 16383);
        do Memory.poke(22585, -8192);
        do Memory.poke(22587, -2048);
        do Memory.poke(22588, 16383);
        do Memory.poke(22616, 16383);
        do Memory.poke(22617, -3088);
        do Memory.poke(22618, 64);
        do Memory.poke(22619, -2048);
        do Memory.poke(22620, 16383);
        do Memory.poke(22647, -16384);
        do Memory.poke(22648, -4097);
        do Memory.poke(22649, -4);
        do Memory.poke(22651, -1536);
        do Memory.poke(22652, 8191);
        do Memory.poke(22679, -16384);
        do Memory.poke(22680, 20479);
        do Memory.poke(22681, 32767);
        do Memory.poke(22682, 2);
        do Memory.poke(22683, -256);
        do Memory.poke(22684, 8191);
        do Memory.poke(22711, -16384);
        do Memory.poke(22712, 4095);
        do Memory.poke(22713, 32767);
        do Memory.poke(22715, -1024);
        do Memory.poke(22716, 4095);
        do Memory.poke(22744, 16383);
        do Memory.poke(22745, 16383);
        do Memory.poke(22747, -2048);
        do Memory.poke(22748, 4095);
        do Memory.poke(22776, 4095);
        do Memory.poke(22777, 16383);
        do Memory.poke(22779, -8192);
        do Memory.poke(22780, 2047);
        do Memory.poke(22808, 26622);
        do Memory.poke(22809, 8190);
        do Memory.poke(22811, -7680);
        do Memory.poke(22812, 2047);
        do Memory.poke(22840, -3076);
        do Memory.poke(22841, 16383);
        do Memory.poke(22843, -6400);
        do Memory.poke(22844, 1023);
        do Memory.poke(22872, 2046);
        do Memory.poke(22873, 16382);
        do Memory.poke(22875, -1792);
        do Memory.poke(22876, 511);
        do Memory.poke(22904, 2044);
        do Memory.poke(22905, 8188);
        do Memory.poke(22907, -1792);
        do Memory.poke(22908, 127);
        do Memory.poke(22936, 1528);
        do Memory.poke(22937, 8160);
        do Memory.poke(22939, -3840);
        do Memory.poke(22940, 15);
        do Memory.poke(22968, 216);
        do Memory.poke(22969, 8064);
        do Memory.poke(22971, -2560);
        do Memory.poke(22972, 31);
        do Memory.poke(23000, 960);
        do Memory.poke(23001, 8064);
        do Memory.poke(23003, -928);
        do Memory.poke(23004, 31);
        do Memory.poke(23032, -14592);
        do Memory.poke(23033, 7967);
        do Memory.poke(23035, -928);
        do Memory.poke(23036, 63);
        do Memory.poke(23064, -256);
        do Memory.poke(23065, 7999);
        do Memory.poke(23067, -928);
        do Memory.poke(23068, 31);
        do Memory.poke(23096, -8296);
        do Memory.poke(23097, 8095);
        do Memory.poke(23099, -832);
        do Memory.poke(23100, 31);
        do Memory.poke(23128, -16488);
        do Memory.poke(23129, -8225);
        do Memory.poke(23131, -64);
        do Memory.poke(23132, 63);
        do Memory.poke(23160, -120);
        do Memory.poke(23161, -1);
        do Memory.poke(23163, -640);
        do Memory.poke(23164, 63);
        do Memory.poke(23192, -232);
        do Memory.poke(23193, -1);
        do Memory.poke(23194, 1);
        do Memory.poke(23195, -256);
        do Memory.poke(23196, 63);
        do Memory.poke(23224, -112);
        do Memory.poke(23225, -1);
        do Memory.poke(23226, 1);
        do Memory.poke(23227, -256);
        do Memory.poke(23228, 63);
        do Memory.poke(23256, -128);
        do Memory.poke(23257, -1);
        do Memory.poke(23258, 1);
        do Memory.poke(23259, -256);
        do Memory.poke(23260, 63);
        do Memory.poke(23288, -128);
        do Memory.poke(23289, -1);
        do Memory.poke(23290, 3);
        do Memory.poke(23291, -128);
        do Memory.poke(23292, 63);
        do Memory.poke(23320, -240);
        do Memory.poke(23321, -1);
        do Memory.poke(23322, 7);
        do Memory.poke(23323, -256);
        do Memory.poke(23324, 63);
        do Memory.poke(23352, -128);
        do Memory.poke(23353, -1);
        do Memory.poke(23354, 7);
        do Memory.poke(23355, -32);
        do Memory.poke(23356, 63);
        do Memory.poke(23384, -128);
        do Memory.poke(23385, -28674);
        do Memory.poke(23386, 15);
        do Memory.poke(23387, -32);
        do Memory.poke(23388, 63);
        do Memory.poke(23416, 8064);
        do Memory.poke(23417, 3072);
        do Memory.poke(23418, 7);
        do Memory.poke(23419, -32);
        do Memory.poke(23420, 63);
        do Memory.poke(23448, 800);
        do Memory.poke(23450, 3);
        do Memory.poke(23451, -32);
        do Memory.poke(23452, 63);
        do Memory.poke(23480, 12512);
        do Memory.poke(23483, -32);
        do Memory.poke(23484, 63);
        do Memory.poke(23512, -16288);
        do Memory.poke(23515, -32);
        do Memory.poke(23516, 127);
        do Memory.poke(23544, -416);
        do Memory.poke(23545, 32767);
        do Memory.poke(23547, -128);
        do Memory.poke(23548, 127);
        do Memory.poke(23576, -192);
        do Memory.poke(23577, 32767);
        do Memory.poke(23578, 64);
        do Memory.poke(23579, -3);
        do Memory.poke(23580, 127);
        do Memory.poke(23608, -64);
        do Memory.poke(23609, 32767);
        do Memory.poke(23611, -1);
        do Memory.poke(23612, 127);
        do Memory.poke(23640, -64);
        do Memory.poke(23641, 29952);
        do Memory.poke(23642, -4096);
        do Memory.poke(23643, -1);
        do Memory.poke(23644, 127);
        do Memory.poke(23672, 32640);
        do Memory.poke(23673, 24576);
        do Memory.poke(23674, -2048);
        do Memory.poke(23675, -1);
        do Memory.poke(23676, 127);
        do Memory.poke(23704, 16128);
        do Memory.poke(23706, -2048);
        do Memory.poke(23707, -1);
        do Memory.poke(23708, 255);
        do Memory.poke(23736, 3840);
        do Memory.poke(23738, -4096);
        do Memory.poke(23739, -1);
        do Memory.poke(23740, 255);
        do Memory.poke(23768, 3584);
        do Memory.poke(23770, -2048);
        do Memory.poke(23771, -1);
        do Memory.poke(23772, 511);
        do Memory.poke(23800, 3584);
        do Memory.poke(23802, -512);
        do Memory.poke(23803, -1);
        do Memory.poke(23804, 511);
        do Memory.poke(23832, 1536);
        do Memory.poke(23834, -192);
        do Memory.poke(23835, -1);
        do Memory.poke(23836, 511);
        do Memory.poke(23864, 1024);
        do Memory.poke(23866, -64);
        do Memory.poke(23867, -1);
        do Memory.poke(23868, 1023);
        do Memory.poke(23896, -10240);
        do Memory.poke(23897, 124);
        do Memory.poke(23898, -64);
        do Memory.poke(23899, -1);
        do Memory.poke(23900, 1023);
        do Memory.poke(23928, -4096);
        do Memory.poke(23929, 255);
        do Memory.poke(23930, -64);
        do Memory.poke(23931, -1);
        do Memory.poke(23932, 2047);
        do Memory.poke(23960, -4096);
        do Memory.poke(23961, 1023);
        do Memory.poke(23962, -15);
        do Memory.poke(23963, -1);
        do Memory.poke(23964, 2047);
        do Memory.poke(23992, -8192);
        do Memory.poke(23993, 4095);
        do Memory.poke(23994, -1);
        do Memory.poke(23995, -1);
        do Memory.poke(23996, -1);
        do Memory.poke(24024, -8192);
        do Memory.poke(24025, -1);
        do Memory.poke(24026, -1);
        do Memory.poke(24027, -1);
        do Memory.poke(24028, -1);
        do Memory.poke(24056, -16384);
        do Memory.poke(24057, -1);
        do Memory.poke(24058, -1);
        do Memory.poke(24059, -1);
        do Memory.poke(24060, -1);
        do Memory.poke(24089, -1);
        do Memory.poke(24090, -1);
        do Memory.poke(24091, -1);
        do Memory.poke(24092, -1);

        // The
        do Memory.poke(22151, 14336);
        do Memory.poke(22152, -72);
        do Memory.poke(22183, 15359);
        do Memory.poke(22184, -11336);
        do Memory.poke(22215, 14963);
        do Memory.poke(22216, -32336);
        do Memory.poke(22247, 14897);
        do Memory.poke(22248, 16824);
        do Memory.poke(22279, -2000);
        do Memory.poke(22280, 4031);
        do Memory.poke(22311, -1679);
        do Memory.poke(22312, 3007);
        do Memory.poke(22343, -1679);
        do Memory.poke(22344, 438);
        do Memory.poke(22375, 14900);
        do Memory.poke(22376, 2488);
        do Memory.poke(22407, 14388);
        do Memory.poke(22408, 440);
        do Memory.poke(22439, -10192);
        do Memory.poke(22440, -72);
        do Memory.poke(22471, 6192);
        do Memory.poke(22472, -14922);
        do Memory.poke(22503, 2080);
        do Memory.poke(22504, -28250);
        do Memory.poke(22535, 16384);
        do Memory.poke(22536, 4224);
        do Memory.poke(22567, 2064);
        do Memory.poke(22568, -32752);
        do Memory.poke(22599, 16);
        do Memory.poke(22600, 256);
        do Memory.poke(22631, 4096);
        do Memory.poke(22632, 32);

        // Kvadrat
        do Memory.poke(22786, -20473);
        do Memory.poke(22787, 30723);
        do Memory.poke(22789, -32641);
        do Memory.poke(22790, 8191);
        do Memory.poke(22818, -20473);
        do Memory.poke(22819, 30723);
        do Memory.poke(22821, -32641);
        do Memory.poke(22822, 8191);
        do Memory.poke(22850, -18425);
        do Memory.poke(22851, 30723);
        do Memory.poke(22852, -28676);
        do Memory.poke(22853, -31761);
        do Memory.poke(22854, 16111);
        do Memory.poke(22855, 8184);
        do Memory.poke(22856, -1);
        do Memory.poke(22882, -18425);
        do Memory.poke(22883, 30723);
        do Memory.poke(22884, -24580);
        do Memory.poke(22885, -31761);
        do Memory.poke(22886, 15591);
        do Memory.poke(22887, 8184);
        do Memory.poke(22888, -1);
        do Memory.poke(22914, -16889);
        do Memory.poke(22915, 30723);
        do Memory.poke(22916, -18169);
        do Memory.poke(22917, -29593);
        do Memory.poke(22918, 12483);
        do Memory.poke(22919, 29198);
        do Memory.poke(22920, -14385);
        do Memory.poke(22946, -16889);
        do Memory.poke(22947, 30723);
        do Memory.poke(22948, -18169);
        do Memory.poke(22949, -29625);
        do Memory.poke(22950, 12483);
        do Memory.poke(22951, 29198);
        do Memory.poke(22952, -14385);
        do Memory.poke(22978, -18681);
        do Memory.poke(22979, 30723);
        do Memory.poke(22980, -18425);
        do Memory.poke(22981, -25593);
        do Memory.poke(22982, 12291);
        do Memory.poke(22983, 28686);
        do Memory.poke(22984, -15421);
        do Memory.poke(23010, -18553);
        do Memory.poke(23011, 30723);
        do Memory.poke(23012, -18425);
        do Memory.poke(23013, -25593);
        do Memory.poke(23014, 12291);
        do Memory.poke(23015, 28686);
        do Memory.poke(23016, -15421);
        do Memory.poke(23042, -32313);
        do Memory.poke(23043, 30723);
        do Memory.poke(23044, -16385);
        do Memory.poke(23045, -25593);
        do Memory.poke(23046, 12291);
        do Memory.poke(23047, 32766);
        do Memory.poke(23048, 960);
        do Memory.poke(23074, -32313);
        do Memory.poke(23075, 30723);
        do Memory.poke(23076, -16385);
        do Memory.poke(23077, -25593);
        do Memory.poke(23078, 12291);
        do Memory.poke(23079, 32766);
        do Memory.poke(23080, 960);
        do Memory.poke(23106, -20225);
        do Memory.poke(23107, 30723);
        do Memory.poke(23108, -18425);
        do Memory.poke(23109, -25545);
        do Memory.poke(23110, 12291);
        do Memory.poke(23111, 28686);
        do Memory.poke(23112, 10179);
        do Memory.poke(23138, -20225);
        do Memory.poke(23139, 30727);
        do Memory.poke(23140, -18425);
        do Memory.poke(23141, -25545);
        do Memory.poke(23142, 8195);
        do Memory.poke(23143, 28686);
        do Memory.poke(23144, 10179);
        do Memory.poke(23170, 511);
        do Memory.poke(23171, 31758);
        do Memory.poke(23172, -18393);
        do Memory.poke(23173, -25545);
        do Memory.poke(23174, 8191);
        do Memory.poke(23175, 28750);
        do Memory.poke(23176, 10179);
        do Memory.poke(23202, 511);
        do Memory.poke(23203, 31758);
        do Memory.poke(23204, -18393);
        do Memory.poke(23205, -25545);
        do Memory.poke(23206, 8191);
        do Memory.poke(23207, 28750);
        do Memory.poke(23208, 10179);
        do Memory.poke(23234, 3895);
        do Memory.poke(23235, 28476);
        do Memory.poke(23236, -18393);
        do Memory.poke(23237, -29689);
        do Memory.poke(23238, 15135);
        do Memory.poke(23239, 28750);
        do Memory.poke(23240, -15400);
        do Memory.poke(23266, 7991);
        do Memory.poke(23267, 26428);
        do Memory.poke(23268, -18393);
        do Memory.poke(23269, -29689);
        do Memory.poke(23270, 15135);
        do Memory.poke(23271, 28750);
        do Memory.poke(23272, -15400);
        do Memory.poke(23298, -18377);
        do Memory.poke(23299, 1009);
        do Memory.poke(23300, -18169);
        do Memory.poke(23301, -31865);
        do Memory.poke(23302, -3301);
        do Memory.poke(23303, 29198);
        do Memory.poke(23304, 984);
        do Memory.poke(23330, -18377);
        do Memory.poke(23331, 1009);
        do Memory.poke(23332, -18169);
        do Memory.poke(23333, -31865);
        do Memory.poke(23334, -3301);
        do Memory.poke(23335, 29198);
        do Memory.poke(23336, 984);
        do Memory.poke(23362, -20425);
        do Memory.poke(23363, 481);
        do Memory.poke(23364, -26620);
        do Memory.poke(23365, -28161);
        do Memory.poke(23366, -3325);
        do Memory.poke(23367, 4104);
        do Memory.poke(23368, 960);
        do Memory.poke(23394, -20441);
        do Memory.poke(23395, 225);
        do Memory.poke(23396, -30716);
        do Memory.poke(23397, -28161);
        do Memory.poke(23398, -7933);
        do Memory.poke(23399, 4104);
        do Memory.poke(23400, 960);
        do Memory.poke(23426, 7);
        do Memory.poke(23427, 6240);
        do Memory.poke(23429, -28057);
        do Memory.poke(23430, -16381);
        do Memory.poke(23432, 960);
        do Memory.poke(23458, 2055);
        do Memory.poke(23459, 4192);
        do Memory.poke(23461, -28061);
        do Memory.poke(23462, -16381);
        do Memory.poke(23463, 4096);
        do Memory.poke(23464, 896);
        do Memory.poke(23490, 2102);
        do Memory.poke(23492, -26620);
        do Memory.poke(23493, 97);
        do Memory.poke(23494, -15589);
        do Memory.poke(23495, 4104);
        do Memory.poke(23496, 768);
        do Memory.poke(23522, 2100);
        do Memory.poke(23524, 2052);
        do Memory.poke(23525, 65);
        do Memory.poke(23526, 16667);
        do Memory.poke(23527, 4104);
        do Memory.poke(23528, 768);
        do Memory.poke(23554, -30672);
        do Memory.poke(23555, 24961);
        do Memory.poke(23556, 4);
        do Memory.poke(23558, 6168);
        do Memory.poke(23559, 8);
        do Memory.poke(23586, -30688);
        do Memory.poke(23587, 24961);
        do Memory.poke(23588, 4);
        do Memory.poke(23590, 6168);
        do Memory.poke(23591, 8);
        do Memory.poke(23619, 24972);
        do Memory.poke(23620, 2048);
        do Memory.poke(23621, -28660);
        do Memory.poke(23622, 6144);
        do Memory.poke(23623, 4096);
        do Memory.poke(23624, 192);
        do Memory.poke(23651, 24972);
        do Memory.poke(23652, 2048);
        do Memory.poke(23653, -28664);
        do Memory.poke(23654, 6144);
        do Memory.poke(23655, 4096);
        do Memory.poke(23656, 192);
        do Memory.poke(23682, 3);
        do Memory.poke(23683, 396);
        do Memory.poke(23684, -26620);
        do Memory.poke(23685, -32767);
        do Memory.poke(23687, 4104);
        do Memory.poke(23688, 192);
        do Memory.poke(23714, 3);
        do Memory.poke(23715, 140);
        do Memory.poke(23716, 2052);
        do Memory.poke(23717, -32767);
        do Memory.poke(23719, 4104);
        do Memory.poke(23720, 128);
        do Memory.poke(23746, 3);
        do Memory.poke(23778, 3);

        return;
    }
}
    