//https://www.youtube.com/watch?v=Ouza_4SsbLc
//https://codepen.io/rickyjw/pen/qrjmdz
//https://editor.p5js.org/Coulomb1/sketches/ajYsnHRW2
//https://www.coursera.org/lecture/nand2tetris2/unit-3-10-graphics-optimization-hHNmi
//https://classes.engineering.wustl.edu/cse365/demo_program.php
//https://arieljannai.gitlab.io/Nand2TetrisBitmapEditor/
//https://github.com/ErikUmble/nand2tetris/tree/main/DinoAdventure

//https://www.redblobgames.com/pathfinding/a-star/introduction.html
//https://www.youtube.com/watch?v=5DhCoqoPmzs

//https://github.com/IshankGulati/Image-Processing-Mini-projects/blob/master/Astar%20Search/pathPlanning.py



class Game
{
    field int Direction;
    field Character Character;
    field int MoveAreaWidth;
    field int ScreenMiddle;
    field int LeftBorder;
    field int RightBorder;

    field int PlatformsCount;
    field int ObstaclesCount;
    field int EnemiesCount;
    field int CollectablesCount;
    field int BulletsCount;

    field Array Platforms;
    field Array Obstacles;
    field Array Enemies;
    field Array Collectables;
    field Array Bullets;

    field Array div4lookup;

    field Level3 Level;

    field int GameDelay;

    field int redrawAllObstaclesTimer;
    field int redrawAllObstaclesDelay;

    field Array map;
    field int mapWidth;
    field int mapHeight;

    field int WorldOffset;


    
    


    constructor Game new()
    {
        var int i;
        var int j;
        var int value;

        let Direction = 0;

        let MoveAreaWidth = 5; // 5
        let ScreenMiddle = 16;
        let LeftBorder = ScreenMiddle - MoveAreaWidth;
        let RightBorder = ScreenMiddle + MoveAreaWidth;

        let Level = Level3.new();
        let map = Level.getMap();
        let mapWidth = Level.getMapWidth();
        let mapHeight = Level.getMapHeight();
        do Map.setWidth(mapWidth);
        do Map.setHeight(mapHeight);
        do Map.setMap(map);

        let Character = Level.getCharacter();

        let PlatformsCount = Level.getPlatformsCount();
        let ObstaclesCount = Level.getObstaclesCount();
        let EnemiesCount = Level.getEnemiesCount();
        let CollectablesCount = Level.getCollectablesCount();

        let Platforms = Level.getPlatforms();
        let Obstacles = Level.getObstacles();
        let Enemies = Level.getEnemies();
        let Collectables = Level.getCollectables();

        let div4lookup = Array.new(mapWidth);
        let i = 0;
        while (i < mapWidth)
        {
            let div4lookup[i] = i / 4;
            let i = i + 1;
        }

        //let last_section = sections[get_curr_section_index()];



        let GameDelay = 20; //20

        let redrawAllObstaclesDelay = 7;
        let redrawAllObstaclesTimer = redrawAllObstaclesDelay;

        let WorldOffset = 0;

        do GetBulletsCount();
        let Bullets = Array.new(BulletsCount);
        do GetBullets();

        do DrawAllPlatforms();
        do DrawAllCollectables();

        return this;
    }


    method void start()
    {
        var char key;
        var bool exit;
        var int i;
        var int j;
        var int temp;
        var Platform platform;
        var int value;


        let exit = false;

        //do Screen.drawLine(0, 255-80, 511, 255-80);

        while (~exit)
        {
            

            let key = Keyboard.keyPressed();

            if (key = 0)
            {
                let Direction = 0;
            }
            else { if (key = 131)
            {
                do Character.Jump();
            }
            else { if (key = 81) 
            {
                let exit = true;
            }
            else { if (key = 130) 
            {
                let Direction = 1;
            }
            else { if (key = 132) 
            {
                let Direction = 2;
            }
            else { if (key = 32)
            {
                do Character.Shoot(WorldOffset);
            }}}}}}
            


            
            do Move();
            do Sys.wait(GameDelay);
            


            do Character.RedrawPlatforms(map, mapWidth, mapHeight, WorldOffset);
            

            do DoAllEnemyActions();

            do CheckEnemyAndCharacterCollision();

            do CheckAllBullets();

            do CheckAllBulletCollisions();

            do CheckCollectableAndCharacterCollision();


            

            do CheckTimers();



            do DecrementTimers();

            
            


        }

        return;
    }


    // GAME TIMERS
    method void CheckTimers()
    {
        if (redrawAllObstaclesTimer < 1)
        {
            do RedrawAllObstacles();
            let redrawAllObstaclesTimer = redrawAllObstaclesDelay;
        }

        do Character.CheckTimers();
        do CheckAllEnemyTimers();

        return;
    }

    
    method void DecrementTimers()
    {
        let redrawAllObstaclesTimer = redrawAllObstaclesTimer - 1;

        do Character.DecrementTimers();
        do DecrementAllEnemyTimers();

        return;
    }

    // ENEMY TIMERS
    method void CheckAllEnemyTimers()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.CheckTimers();
            let i = i + 1;
        }

        return;
    }

    method void DecrementAllEnemyTimers()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.DecrementTimers();
            let i = i + 1;
        }

        return;
    }





    method void DrawAllPlatforms()
    {
        var Platform platform;
        var int i;

        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.Draw();
            let i = i + 1;
        }

        return;
    }

    method void DrawAllCollectables()
    {
        var int i;
        var Collectable collectable;

        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];
            do collectable.Draw(true);
            let i = i + 1;
        }

        return;
    }

    method void RedrawAllObstacles()
    {
        var Obstacle obstacle;
        var int i;

        if (Character.get_should_draw_last_obstacle())
        {
            while (i < ObstaclesCount)
            {
                let obstacle = Obstacles[i];
                do obstacle.Draw();

                let i = i + 1;
            }
            do Character.set_should_draw_last_obstacle(false);
        }

        return;
    }

    method void DoAllEnemyActions()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            //do enemy.DoActions(map, mapWidth, mapHeight, WorldOffset, Character.get_x(), Character.get_y());
            do Character.DoEnemyAction(enemy, map, mapWidth, mapHeight, WorldOffset);
            let i = i + 1;
        }

        return;
    }

    method void CheckEnemyAndCharacterCollision()
    {
        var int i;
        var Enemy enemy;
        var bool collided_sides;
        var bool collided_top;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];

            do Character.CheckCollisionWithEnemy(enemy);

            let i = i + 1;
        }

        return;
    }


    method void CheckAllBullets()
    {
        var int i;
        var Enemy enemy;

        do Character.CheckBullets(map, mapWidth, mapHeight, WorldOffset);

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.CheckBullets(map, mapWidth, mapHeight, WorldOffset);
            let i = i + 1;
        }

        return;
    }

    method void GetBulletsCount()
    {
        var int i;
        var int count;
        var Enemy enemy;

        let count = Character.getBulletsCount();

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            let count = count + enemy.getBulletsCount();
            let i = i + 1;
        }

        let BulletsCount = count;

        return;
    }

    method void GetBullets()
    {
        var int i;
        var int j;
        var Array bullets;
        var Enemy enemy;
        var int arrSize;

        let bullets = Character.getBullets();

        while (i < Character.getBulletsCount())
        {
            let Bullets[i] = bullets[i];
            let i = i + 1;
        }

        let arrSize = Character.getBulletsCount();

        let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            let bullets = enemy.getBullets();

            let j = 0;
            while (j < enemy.getBulletsCount())
            {
                let Bullets[arrSize + j] = bullets[j];

                let j = j + 1;
            }

            let arrSize = arrSize + enemy.getBulletsCount();

            let i = i + 1;
        }

        return;
    }

    method void CheckAllBulletCollisions()
    {
        var int i;
        var int j;
        var Enemy enemy;
        var Bullet bullet;

        while (i < BulletsCount)
        {
            let bullet = Bullets[i];

            do Character.CheckCollisionWithBullet(bullet);

            let j = 0;
            while (j < EnemiesCount)
            {
                let enemy = Enemies[j];

                do enemy.CheckCollisionWithBullet(bullet);

                let j = j + 1;
            }

            let i = i + 1;
        }       

        return;
    }

    method void CheckCollectableAndCharacterCollision()
    {
        var int i;
        var Collectable collectable;

        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];

            do Character.CheckCollisionWithCollectable(collectable);

            let i = i + 1;
        }

        return;
    }




    method void ScrollLeft()
    {
        var int i;
        var Platform platform;
        var Obstacle obstacle;
        var Enemy enemy;
        var Collectable collectable;

        

        let WorldOffset = WorldOffset + 1;
        do Character.increment_absolute_x(1);

        let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.ScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];
            do collectable.ScrollLeft();

            let i = i + 1;
        }

        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.ClearScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.ClearScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.DrawScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.DrawScrollLeft();

            let i = i + 1;
        }


        return;
    }

    method void ScrollRight()
    {
        var int i;
        var Platform platform;
        var Obstacle obstacle;
        var Enemy enemy;
        var Collectable collectable;

        let WorldOffset = WorldOffset - 1;
        do Character.increment_absolute_x(-1);

        let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.ScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];
            do collectable.ScrollRight();

            let i = i + 1;
        }

        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.ClearScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.ClearScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.DrawScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.DrawScrollRight();

            let i = i + 1;
        }

        return;
    }

    method void Move()
    {
        var int x;
        var int abs_x;
        
        let x = Character.get_x();
        let abs_x = Character.get_absolute_x();

        do Character.check_gravity2(map, mapWidth, mapHeight, WorldOffset);
        do Character.check_collision_obstacles2(map, mapWidth, mapHeight);

        if (Direction = 1) 
        {
            do Character.set_draw_character_left(true);

            if (~Character.check_left_collision_platforms2(map, mapWidth, mapHeight, WorldOffset))
            {
                if (abs_x - ScreenMiddle + MoveAreaWidth > 0)
                {
                    if (x > LeftBorder)
                    {
                        do Character.MoveLeft();
                    }
                    else
                    {
                        do ScrollRight();
                    }
                }
                else
                {
                    do Character.MoveLeft();
                }
            }
        }
        if (Direction = 2)
        {
            do Character.set_draw_character_left(false);

            if (~Character.check_right_collision_platforms2(map, mapWidth, mapHeight, WorldOffset))
            {
                if (abs_x + ScreenMiddle - MoveAreaWidth < mapWidth)
                {
                    if (x < RightBorder)
                    {   
                        do Character.MoveRight();
                    }
                    else
                    {
                        do ScrollLeft();
                    }
                }
                else
                {
                    do Character.MoveRight();
                }
            }
        }
        
        return;
    }
}
    