//https://www.youtube.com/watch?v=Ouza_4SsbLc
//https://codepen.io/rickyjw/pen/qrjmdz
//https://editor.p5js.org/Coulomb1/sketches/ajYsnHRW2
//https://www.coursera.org/lecture/nand2tetris2/unit-3-10-graphics-optimization-hHNmi
//https://classes.engineering.wustl.edu/cse365/demo_program.php
//https://arieljannai.gitlab.io/Nand2TetrisBitmapEditor/
//https://github.com/ErikUmble/nand2tetris/tree/main/DinoAdventure





// IDEJA: sortirat platforme po x koordinati
// IDEJA2: brojac koji broji kolko ih je izaslo iz ekrana. kolko ih je izaslo tolko mogu stvorit novih tako da starima promijenim koordinate.
//         ako nijedna nije izasla iz ekrana, a treba se pokazat novi, sam stvorim novu platformu




class Game
{
    field int Direction;
    field Character Character;
    field int ScreenWidth;
    field int MoveAreaWidth;
    field int ScreenMiddle;
    field int LeftBorder;
    field int RightBorder;

    field int PlatformsCount;
    field int ObstaclesCount;
    field int EnemiesCount;
    field int CollectablesCount;
    //field int sections_num;
    //field int section_width;

    field Array Platforms;
    field Array Obstacles;
    field Array Enemies;
    field Array Collectables;
    //field Array sections;

    //field Section curr_section;
    //field Section last_section;
    //field int curr_section_index;
    //field int last_section_index;
    //field Array curr_Platforms;
    //field int curr_PlatformsCount;

    field Array div4lookup;

    field Level3 Level;


    //field Array curr_Obstacles;
    //field int curr_ObstaclesCount;




    field int GameDelay;

    field int timer3;
    field int timer6;
    field int timer100;

    field Array Map;
    field int MapWidth;
    field int MapHeight;

    field int WorldOffset;




    
    


    constructor Game new()
    {
        var int i;

        let Direction = 0;

        let ScreenWidth = 32;
        let MoveAreaWidth = 5; // 5
        let ScreenMiddle = 16;
        let LeftBorder = ScreenMiddle - MoveAreaWidth;
        let RightBorder = ScreenMiddle + MoveAreaWidth;

        let Level = Level3.new();
        let Map = Level.getMap();
        let MapWidth = Level.getMapWidth();
        let MapHeight = Level.getMapHeight();

        let Character = Level.getCharacter();

        let PlatformsCount = Level.getPlatformsCount();
        let ObstaclesCount = Level.getObstaclesCount();
        let EnemiesCount = Level.getEnemiesCount();
        let CollectablesCount = Level.getCollectablesCount();

        let Platforms = Level.getPlatforms();
        let Obstacles = Level.getObstacles();
        let Enemies = Level.getEnemies();
        let Collectables = Level.getCollectables();

        let div4lookup = Array.new(MapWidth);
        let i = 0;
        while (i < MapWidth)
        {
            let div4lookup[i] = i / 4;
            let i = i + 1;
        }

        //let last_section = sections[get_curr_section_index()];



        let GameDelay = 20;

        let timer3 = 3;
        let timer6 = 6;
        let timer100 = 100;

        let WorldOffset = 0;


        do DrawAllPlatforms();


        //let enemy = Enemy.new(10, 224, 1);
        //do enemy.Draw(true, false);
        
        

        return this;
    }

    //method int get_curr_section_index()
    //{
    //    return div4lookup[Character.get_absolute_x()];
    //}

    method void start()
    {
        var char key;
        var bool exit;
        var int i;
        var Platform platform;


        let exit = false;

        //do Screen.drawLine(0, 255-80, 511, 255-80);

        while (~exit)
        {
            

            let key = Keyboard.keyPressed();

            if (key = 0)
            {
                let Direction = 0;
            }
            else { if (key = 131)
            {
                do Character.Jump();
            }
            else { if (key = 81) 
            {
                let exit = true;
            }
            else { if (key = 130) 
            {
                let Direction = 1;
            }
            else { if (key = 132) 
            {
                let Direction = 2;
            }}}}}
            


            //do UpdateCurrentSection();

            do Move();
            do Sys.wait(GameDelay);
            
            //do curr_section.Draw();
            do Character.RedrawPlatforms(Map, MapWidth, MapHeight, WorldOffset);

            do DoAllEnemyActions();
            

            //do enemy.Draw(true, false);
            //do enemy.MoveRight();
            //do enemy.MoveLeft();

            //do enemy.check_gravity2(Map, MapWidth, MapHeight);
            //do enemy.Jump();
            //do enemy.MoveRight();


            //do enemy.Roam(Map, MapWidth, MapHeight);
            

            do CheckTimers();





            //let last_section_index = get_curr_section_index();

            do DecrementTimers();
        }

        return;
    }

    method void CheckTimers()
    {
        if (timer6 < 1)
        {
            //do RedrawLastSection();
            do RedrawAllObstacles();

            let timer6 = 6;
        }

        if (timer100 < 1)
        {
            //do Screen.drawLine(0, 255-80, 511, 255-80);

            let timer100 = 100;
        }

        
        do CheckAllEnemyTimers();

        return;
    }

    // GAME TIMERS
    method void DecrementTimers()
    {
        let timer3 = timer3 - 1;
        let timer6 = timer6 - 1;
        let timer100 = timer100 - 1;

        do DecrementAllEnemyTimers();

        return;
    }

    // ENEMY TIMERS
    method void CheckAllEnemyTimers()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.CheckTimers();
            let i = i + 1;
        }

        return;
    }

    method void DecrementAllEnemyTimers()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.DecrementTimers();
            let i = i + 1;
        }

        return;
    }

    method void DrawAllPlatforms()
    {
        var Platform platform;
        var int i;

        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.Draw();
            let i = i + 1;
        }

        return;
    }

    method void RedrawAllObstacles()
    {
        var Obstacle obstacle;
        var int i;

        if (Character.get_should_draw_last_obstacle())
        {
            while (i < ObstaclesCount)
            {
                let obstacle = Obstacles[i];

                do obstacle.Draw();

                let i = i + 1;
            }
            do Character.set_should_draw_last_obstacle(false);
        }

        return;
    }




    method void DoAllEnemyActions()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.DoActions(Map, MapWidth, MapHeight, WorldOffset);
            let i = i + 1;
        }

        return;
    }




    method void ScrollLeft()
    {
        var int i;
        var Platform platform;
        var Obstacle obstacle;
        var Enemy enemy;

        let WorldOffset = WorldOffset + 1;
        do Character.increment_absolute_x(1);

        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.ClearScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.ClearScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.DrawScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.DrawScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.ScrollLeft();

            let i = i + 1;
        }

        return;
    }

    method void ScrollRight()
    {
        var int i;
        var Platform platform;
        var Obstacle obstacle;
        var Enemy enemy;

        let WorldOffset = WorldOffset - 1;
        do Character.increment_absolute_x(-1);

        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.ClearScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.ClearScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.DrawScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.DrawScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.ScrollRight();

            let i = i + 1;
        }

        return;
    }

    method void Move()
    {
        var int x;
        var int abs_x;
        
        let x = Character.get_x();
        let abs_x = Character.get_absolute_x();

        do Character.check_gravity2(Map, MapWidth, MapHeight);
        do Character.check_collision_obstacles2(Map, MapWidth, MapHeight);

        if (Direction = 1) 
        {
            do Character.set_draw_character_left(true);

            if (~Character.check_left_collision_platforms2(Map, MapWidth, MapHeight, WorldOffset))
            {
                // nesto s apsolutnom vrijednosti izmedju x i pocetka mape?
                if (abs_x - ScreenMiddle + MoveAreaWidth > 0)
                {
                    if (x > LeftBorder)
                    {
                        do Character.MoveLeft();
                    }
                    else
                    {
                        do ScrollRight();
                    }
                }
                else
                {
                    do Character.MoveLeft();
                }
            }
        }
        if (Direction = 2)
        {
            do Character.set_draw_character_left(false);

            if (~Character.check_right_collision_platforms2(Map, MapWidth, MapHeight, WorldOffset))
            {
                if (abs_x + ScreenMiddle - MoveAreaWidth < MapWidth)
                {
                    if (x < RightBorder)
                    {   
                        do Character.MoveRight();
                    }
                    else
                    {
                        do ScrollLeft();
                    }
                }
                else
                {
                    do Character.MoveRight();
                }
            }
        }
        
        return;
    }
}
    