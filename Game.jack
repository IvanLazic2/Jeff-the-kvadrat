//https://www.youtube.com/watch?v=Ouza_4SsbLc
//https://codepen.io/rickyjw/pen/qrjmdz
//https://editor.p5js.org/Coulomb1/sketches/ajYsnHRW2
//https://www.coursera.org/lecture/nand2tetris2/unit-3-10-graphics-optimization-hHNmi
//https://classes.engineering.wustl.edu/cse365/demo_program.php
//https://arieljannai.gitlab.io/Nand2TetrisBitmapEditor/
//https://github.com/ErikUmble/nand2tetris/tree/main/DinoAdventure

//https://www.redblobgames.com/pathfinding/a-star/introduction.html
//https://www.youtube.com/watch?v=5DhCoqoPmzs

//https://github.com/IshankGulati/Image-Processing-Mini-projects/blob/master/Astar%20Search/pathPlanning.py



class Game
{
    field int Direction;
    field Character Character;
    field Finish Finish;
    field int MoveAreaWidth;
    field int ScreenMiddle;
    field int LeftBorder;
    field int RightBorder;

    field int PlatformsCount;
    field int ObstaclesCount;
    field int EnemiesCount;
    field int CollectablesCount;

    field Array Platforms;
    field Array Obstacles;
    field Array Enemies;
    field Array Collectables;

    field Level1 Level;

    field int GameDelay;

    field int redrawAllObstaclesTimer;
    field int redrawAllObstaclesDelay;

    field Array map;
    field int mapWidth;
    field int mapHeight;

    field int WorldOffset;

    static int currLevel;
    static String text;

    field int Deaths;
    static int Kills;
    static int TotalKills;
    static int TotalCoins;
    static int TotalDeaths;

    static int LevelsCount;

    field bool quit;
    field bool showMainMenu;

    field Menu levelMenu;
    field Menu difficultyMenu;
    field Menu pauseMenu;
    field Menu nextMenu;
    field Menu deadMenu;

    //static AnimationLevel animationLevel;
    //static Character animationCharacter;
    //static int animationPlatformsCount;
    //static Array animationPlatforms;
    //static int animationWorldOffset;

    function void init()
    {
        let Kills = 0;
        let TotalCoins = 0;
        let TotalKills = 0;
        do Difficulty.setDifficulty(2);
        let currLevel = 1;
        let LevelsCount = 3;

        do Game.initAnimation();

        return;
    }

    function void initAnimation()
    {
        //var int i;
        //var Platform platform;
        //var int memAddress;
//
        //let animationLevel = AnimationLevel.new();
        //let animationCharacter = animationLevel.getCharacter();
        //let animationPlatformsCount = animationLevel.getPlatformsCount();
        //let animationPlatforms = animationLevel.getPlatforms();
        //do Map.setMap(animationLevel.getMap());
        //do Map.setWidth(animationLevel.getMapWidth());
        //do Map.setHeight(animationLevel.getMapHeight());
//
        //do animationCharacter.ForceDraw();
//
        //let i = 0;
        //while (i < animationPlatformsCount)
        //{
        //    let platform = animationPlatforms[i];
        //    do platform.Draw();
        //    let i = i + 1;
        //}
//
        //let i = 0;
        //while (i < 32)
        //{
        //    let memAddress = Constants.getMemAddress(i, (animationLevel.getMapHeight() - 1) * 16);
//
        //    do Memory.poke(memAddress + 0, -1);
	    //    do Memory.poke(memAddress + 32, -12744);
	    //    do Memory.poke(memAddress + 64, -6372);
	    //    do Memory.poke(memAddress + 96, 29582);
	    //    do Memory.poke(memAddress + 128, 14791);
	    //    do Memory.poke(memAddress + 160, -25373);
	    //    do Memory.poke(memAddress + 192, -12687);
	    //    do Memory.poke(memAddress + 224, -6344);
	    //    do Memory.poke(memAddress + 256, 29596);
	    //    do Memory.poke(memAddress + 288, 14798);
	    //    do Memory.poke(memAddress + 320, 7399);
	    //    do Memory.poke(memAddress + 352, -29069);
	    //    do Memory.poke(memAddress + 384, -14535);
	    //    do Memory.poke(memAddress + 416, -7268);
	    //    do Memory.poke(memAddress + 448, 29134);
	    //    do Memory.poke(memAddress + 480, -1);
//
        //    let i = i + 1;
        //}

        return;
    }

    function void disposeAnimiation()
    {
        //do animationLevel.dispose();

        return;
    }

    constructor Game new()
    {
        let MoveAreaWidth = 3; // 5
        let ScreenMiddle = 16;
        let LeftBorder = ScreenMiddle - MoveAreaWidth;
        let RightBorder = ScreenMiddle + MoveAreaWidth;

        let GameDelay = 20; //20

        let redrawAllObstaclesDelay = 7;
        let redrawAllObstaclesTimer = redrawAllObstaclesDelay;

        let Deaths = 0;

        let levelMenu = Menu.new(23, 12, 10, 5, 4, true);
        do levelMenu.AddItem("Level 1");
        do levelMenu.AddItem("Level 2");
        do levelMenu.AddItem("Level 3");
        do levelMenu.AddItem("Quit");

        let difficultyMenu = Menu.new(23, 10, 10, 5, 5, true); // sredina (23, 5)
        do difficultyMenu.AddItem("Easy");
        do difficultyMenu.AddItem("Medium");
        do difficultyMenu.AddItem("Hard");
        do difficultyMenu.AddItem("Insane");
        do difficultyMenu.AddItem("Return");

        let pauseMenu = Menu.new(23, 7, 10, 5, 4, false);
        do pauseMenu.AddItem("Resume");
        do pauseMenu.AddItem("Restart level");
        do pauseMenu.AddItem("Main menu");
        do pauseMenu.AddItem("Quit");

        let nextMenu = Menu.new(53, 19, 6, 5, 1, false);
        do nextMenu.AddItem("Next");

        let deadMenu = Menu.new(23, 11, 10, 5, 3, false);
        do deadMenu.AddItem("Restart level");
        do deadMenu.AddItem("Main menu");
        do deadMenu.AddItem("Quit");

        do ShowMainMenu();

        do setupGame();
        do start();

        return this;
    }

    method void getLevel()
    {
        if (currLevel = 1)
        {
            let Level = Level1.new();
        }
        else { if (currLevel = 2)
        {
            let Level = Level2.new();
        }
        else {if (currLevel = 3)
        {
            let Level = Level3.new();
        }}}

        return;
    }

    function void CheckMainMenuAnimation()
    {
        //var int i;
        //var Platform platform;
//
        //if (animationCharacter.getAbsoluteX() > (animationLevel.getMapWidth() - 4))
        //{
        //    do Game.disposeAnimiation();
        //    do Game.initAnimation();
        //}
//
        //do Sys.wait(10);
//
        //let i = 0;
        //while (i < animationPlatformsCount)
        //{
        //    let platform = animationPlatforms[i];
        //    do platform.ClearScrollLeft();
//
        //    let i = i + 1;
        //}
//
        //let i = 0;
        //while (i < animationPlatformsCount)
        //{
        //    let platform = animationPlatforms[i];
        //    do platform.DrawScrollLeft();
//
        //    let i = i + 1;
        //}

        return;
    }

    method void ShowMainMenu()
    {
        do Screen.clearScreen();

        do Output.moveCursor(0, 27);
        let text = "MAIN MENU";
        do Output.printString(text);

        do Game.initAnimation();

        do showLevelMenu();

        //if (quit)
        //{
        //    return;
        //}

        return;
    }

    method void showLevelMenu()
    {
        var int levelMenuResult;

        let quit = false;

        let levelMenuResult = levelMenu.Show();

        if (levelMenuResult = 0)
        {
            let currLevel = 1;
        }
        else { if (levelMenuResult = 1)
        {
            let currLevel = 2;
        }
        else { if (levelMenuResult = 2)
        {
            let currLevel = 3;
        }
        else {if (levelMenuResult = 3)
        {
            let quit = true;
            do Quit();
        }}}}

        do levelMenu.Clear();

        if (~quit)
        {
            do showDifficultyMenu();
        }

        return;
    }

    method void showDifficultyMenu()
    {
        var int difficultyMenuResult;

        let difficultyMenuResult = difficultyMenu.Show();

        if (difficultyMenuResult = 0)
        {
            do Difficulty.setDifficulty(1);
        }
        else { if (difficultyMenuResult = 1)
        {
            do Difficulty.setDifficulty(2);
        }
        else { if (difficultyMenuResult = 2)
        {
            do Difficulty.setDifficulty(3);
        }
        else {if (difficultyMenuResult = 3)
        {
            do Difficulty.setDifficulty(4);
        }
        else { if (difficultyMenuResult = 4)
        {
            do difficultyMenu.Clear();
            do showLevelMenu();
            return;
        }}}}}

        do difficultyMenu.Clear();

        return;
    }

    method void showPauseMenu()
    {
        var int pauseMenuResult;

        let pauseMenuResult = pauseMenu.Show();

        if (pauseMenuResult = 0)
        {
            do RedrawAll();
            return;
        }
        else { if (pauseMenuResult = 1)
        {
            do dispose();
            do setupGame();
        }
        else { if (pauseMenuResult = 2)
        {
            let showMainMenu = true;
        }
        else { if (pauseMenuResult = 3)
        {
            let quit = true;
            //do Quit();
        }}}}

        return;
    }

    method void RedrawAll()
    {
        do DrawAllPlatforms();
        do DrawAllObstacles();
        do DrawAllEnemies();
        do DrawAllCollectables();
        do DrawAllBullets();

        do Character.Draw();
        do Finish.Draw(true);

        return;
    }

    method void setupGame()
    {
        if (quit)
        {
            do Quit();
            return;
        }

        do Screen.clearScreen();
        
        do Game.disposeAnimiation();

        do getLevel();

        let map = Level.getMap();
        let mapWidth = Level.getMapWidth();
        let mapHeight = Level.getMapHeight();
        do Map.setWidth(mapWidth);
        do Map.setHeight(mapHeight);
        do Map.setMap(map);

        let Character = Level.getCharacter();

        do printLevel();
        do drawHeart();
        do drawCoin();
        do drawAmmo();
        do drawSkull();
        do Character.printHealth();
        do Character.printCoins();
        do Character.printAmmo();
        do Game.printKills();

        let Finish = Level.getFinish();

        let PlatformsCount = Level.getPlatformsCount();
        let ObstaclesCount = Level.getObstaclesCount();
        let EnemiesCount = Level.getEnemiesCount();
        let CollectablesCount = Level.getCollectablesCount();

        let Platforms = Level.getPlatforms();
        let Obstacles = Level.getObstacles();
        let Enemies = Level.getEnemies();
        let Collectables = Level.getCollectables();

        let WorldOffset = 0;

        do DrawAllPlatforms();
        do DrawAllCollectables();

        do Screen.drawLine(125, 0, 125, 15);

        return;
    }

    method void Quit()
    {
        do Screen.clearScreen();
        do Output.moveCursor(12, 29);
        let text = "bye";
        do Output.printString(text);
        return;
    }

    method void start()
    {
        var char key;
        var bool exit;
        var int i;
        var int j;
        var int temp;
        var Platform platform;
        var int value;

        

        let exit = false;

        while (~exit)
        {
            if (quit)
            {
                do Quit();
                return;
            }

            let key = Keyboard.keyPressed();

            if (key = 0)
            {
                let Direction = 0;
            }
            else { if (key = 131)
            {
                do Character.Jump();
            }
            else { if (key = 81) 
            {
                let exit = true;
            }
            else { if (key = 130) 
            {
                let Direction = 1;
            }
            else { if (key = 132) 
            {
                let Direction = 2;
            }
            else { if (key = 32)
            {
                do Character.Shoot(WorldOffset);
            }
            else { if (key = 140)
            {
                do showPauseMenu();
            }}}}}}}
            

            
            do Move();
            do Sys.wait(GameDelay);
            
            do Character.RedrawPlatforms(WorldOffset);

            do DoAllEnemyActions();

            do CheckEnemyAndCharacterCollision();

            do CheckAllBullets();
            do CheckAllBulletCollisions();
            
            do CheckCollectableAndCharacterCollision();

            do CheckTimers();

            do DecrementTimers();


            if (showMainMenu)
            {
                let exit = true;
            }

            if (Character.IsCollidedWithFinish(Finish))
            {
                let exit = true;
            }

            if (Character.getHealth() < 1)
            {
                let exit = true;
            }
        }

        do Screen.clearScreen();

        if (Character.getHealth() < 1)
        {
            do ShowDeadScreen();
        }
        else
        {
            if (showMainMenu)
            {
                do ShowMainMenu();
                let showMainMenu = false;
            }
            else
            {
                if (currLevel < LevelsCount)
                {
                    do ShowLevelComplete();
                    let currLevel = currLevel + 1;
                }
                else
                {
                    do ShowLevelComplete();
                    do ShowTheEnd();
                    do ShowMainMenu();
                }
            }
        }
        
        do dispose();
        do setupGame();
        do start();

        return;
    }

    method void ShowDeadScreen()
    {
        var int memAddress;
        var int result;

        do Output.moveCursor(5, 28);
        let text = "YOU DEAD";
        do Output.printString(text);

        let memAddress = Constants.getMemAddress(15, 96);

        do Memory.poke(memAddress + 0, 16288);
	    do Memory.poke(memAddress + 32, -24688);
	    do Memory.poke(memAddress + 64, -14576);
	    do Memory.poke(memAddress + 96, -10096);
	    do Memory.poke(memAddress + 128, -14576);
	    do Memory.poke(memAddress + 160, 17440);
	    do Memory.poke(memAddress + 192, 576);
	    do Memory.poke(memAddress + 224, 1920);
	    do Memory.poke(memAddress + 256, -27008);
	    do Memory.poke(memAddress + 288, -27008);
	    do Memory.poke(memAddress + 320, -384);
	    do Memory.poke(memAddress + 352, -27008);
	    do Memory.poke(memAddress + 384, -27392);
	    do Memory.poke(memAddress + 416, 512);
	    do Memory.poke(memAddress + 448, 3584);
	    do Memory.poke(memAddress + 480, -2048);

        let memAddress = memAddress + 1;

        do Memory.poke(memAddress + 0, 766);
	    do Memory.poke(memAddress + 32, 1276);
	    do Memory.poke(memAddress + 64, 1137);
	    do Memory.poke(memAddress + 96, 1165);
	    do Memory.poke(memAddress + 128, 1137);
	    do Memory.poke(memAddress + 160, 529);
	    do Memory.poke(memAddress + 192, 288);
	    do Memory.poke(memAddress + 224, 240);
	    do Memory.poke(memAddress + 256, 180);
	    do Memory.poke(memAddress + 288, 180);
	    do Memory.poke(memAddress + 320, 191);
	    do Memory.poke(memAddress + 352, 180);
	    do Memory.poke(memAddress + 384, 84);
	    do Memory.poke(memAddress + 416, 32);
	    do Memory.poke(memAddress + 448, 56);
	    do Memory.poke(memAddress + 480, 15);

        let memAddress = memAddress - 512;

        do Memory.poke(memAddress + 0, 31);
	    do Memory.poke(memAddress + 32, 96);
	    do Memory.poke(memAddress + 64, 384);
	    do Memory.poke(memAddress + 96, 512);
	    do Memory.poke(memAddress + 128, 1024);
	    do Memory.poke(memAddress + 160, 2048);
	    do Memory.poke(memAddress + 192, 2048);
	    do Memory.poke(memAddress + 224, 4096);
	    do Memory.poke(memAddress + 256, 4096);
	    do Memory.poke(memAddress + 288, 4608);
	    do Memory.poke(memAddress + 320, 4636);
	    do Memory.poke(memAddress + 352, 4354);
	    do Memory.poke(memAddress + 384, 4352);
	    do Memory.poke(memAddress + 416, 2425);
	    do Memory.poke(memAddress + 448, 2814);
	    do Memory.poke(memAddress + 480, 1532);

        let memAddress = memAddress - 1;

        do Memory.poke(memAddress + 0, -2048);
	    do Memory.poke(memAddress + 32, 1536);
	    do Memory.poke(memAddress + 64, 384);
	    do Memory.poke(memAddress + 96, 64);
	    do Memory.poke(memAddress + 128, 32);
	    do Memory.poke(memAddress + 160, 16);
	    do Memory.poke(memAddress + 192, 16);
	    do Memory.poke(memAddress + 224, 8);
	    do Memory.poke(memAddress + 256, 8);
	    do Memory.poke(memAddress + 288, 72);
	    do Memory.poke(memAddress + 320, 14408);
	    do Memory.poke(memAddress + 352, 16520);
	    do Memory.poke(memAddress + 384, 136);
	    do Memory.poke(memAddress + 416, -24944);
	    do Memory.poke(memAddress + 448, 32592);
	    do Memory.poke(memAddress + 480, 16288);

        let result = deadMenu.Show();

        if (result = 0)
        {
            let Kills = 0;
            do Character.setCoins(0);
            let Deaths = Deaths + 1;
        }
        else { if (result = 1)
        {
            do ShowMainMenu();
        }
        else { if (result = 2)
        {
            let quit = true;
        }}}

        return;
    }

    method void ShowLevelComplete()
    {
        var int curY;
        var int curX;

        do Screen.clearScreen();

        let curY = 8;
        let curX = 24;

        do Output.moveCursor(curY, curX);
        let text = "LEVEL ";
        do Output.printString(text);
        do Output.printInt(currLevel);
        let text = " COMPLETE";
        do Output.printString(text);

        do Sys.wait(500);
        let curY = curY + 2;

        do Output.moveCursor(curY, curX);
        let text = "Difficulty: ";
        do Output.printString(text);

        if (Difficulty.getDifficulty() = 1)
        {
            let text = "Easy";
        }
        else { if (Difficulty.getDifficulty() = 2)
        {
            let text = "Medium";
        }
        else { if (Difficulty.getDifficulty() = 3)
        {
            let text = "Hard";
        }
        else { if (Difficulty.getDifficulty() = 4)
        {
            let text = "Insane";
        }}}}

        do Output.printString(text);

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Deaths: ";
        do Output.printString(text);
        do Output.printInt(Deaths);

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Coins: ";
        do Output.printString(text);
        do Output.printInt(Character.getCoins());

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Kills: ";
        do Output.printString(text);
        do Output.printInt(Kills);

        do Sys.wait(500);

        do nextMenu.Show();
        
        return;
    }

    method void ShowTheEnd()
    {
        var int curY;
        var int curX;

        do Screen.clearScreen();

        let curY = 8;
        let curX = 29;

        do Output.moveCursor(curY, curX);
        let text = "THE END";
        do Output.printString(text);

        do Sys.wait(500);
        let curY = curY + 2;
        let curX = 24;

        do Output.moveCursor(curY, curX);
        let text = "Difficulty: ";
        do Output.printString(text);

        if (Difficulty.getDifficulty() = 1)
        {
            let text = "Easy";
        }
        else { if (Difficulty.getDifficulty() = 2)
        {
            let text = "Medium";
        }
        else { if (Difficulty.getDifficulty() = 3)
        {
            let text = "Hard";
        }
        else { if (Difficulty.getDifficulty() = 4)
        {
            let text = "Insane";
        }}}}

        do Output.printString(text);

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Total Deaths: ";
        do Output.printString(text);
        do Output.printInt(TotalDeaths + Deaths);

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Total Coins: ";
        do Output.printString(text);
        do Output.printInt(TotalCoins + Character.getCoins());

        do Sys.wait(500);
        let curY = curY + 1;

        do Output.moveCursor(curY, curX);
        let text = "Total Kills: ";
        do Output.printString(text);
        do Output.printInt(TotalKills + Kills);

        do Sys.wait(500);

        let TotalCoins = 0;
        let TotalDeaths = 0;
        let TotalKills = 0;

        do nextMenu.Show();



        return;
    }

    // GAME TIMERS
    method void CheckTimers()
    {
        if (redrawAllObstaclesTimer < 1)
        {
            do DrawAllObstacles();
            let redrawAllObstaclesTimer = redrawAllObstaclesDelay;
        }

        do Character.CheckTimers();
        do CheckAllEnemyTimers();
        do CheckAllCollectableTimers();
        
        return;
    }

    
    method void DecrementTimers()
    {
        let redrawAllObstaclesTimer = redrawAllObstaclesTimer - 1;

        do Character.DecrementTimers();
        do DecrementAllEnemyTimers();
        do DecrementAllCollectableTimers();

        return;
    }

    //// ENEMY TIMERS
    method void CheckAllEnemyTimers()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.CheckTimers();
            let i = i + 1;
        }

        return;
    }

    method void DecrementAllEnemyTimers()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.DecrementTimers();
            let i = i + 1;
        }

        return;
    }

    //// COLLECRTABLE TIMERS
    method void CheckAllCollectableTimers()
    {
        var Collectable collectable;
        var int i;

        do Heart.CheckTimers();
        do Coin.CheckTimers();

        do DrawAllCollectables();

        return;
    }

    method void DecrementAllCollectableTimers()
    {
        var Collectable collectable;
        var int i;

        do Heart.DecrementTimers();
        do Coin.DecrementTimers();

        return;
    }

    method void DrawAllPlatforms()
    {
        var Platform platform;
        var int i;

        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.Draw();
            let i = i + 1;
        }

        return;
    }

    method void DrawAllObstacles()
    {
        var Obstacle obstacle;
        var int i;

        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.Draw();
            let i = i + 1;
        }

        return;
    }

    method void DrawAllEnemies()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.Draw();
            let i = i + 1;
        }

        return;
    }

    method void DrawAllCollectables()
    {
        var int i;
        var Collectable collectable;

        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];
            do collectable.Draw(true);
            let i = i + 1;
        }

        return;
    }

    method void DrawAllBullets()
    {
        var Enemy enemy;
        var int i;

        do Character.DrawAllBullets();

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.DrawAllBullets();
            let i = i + 1;
        }

        return;

    }

    //ethod void RedrawAllObstacles()
    //
    //   var Obstacle obstacle;
    //   var int i;

    //   if (Character.getShouldRedrawObstacles())
    //   {
    //       while (i < ObstaclesCount)
    //       {
    //           let obstacle = Obstacles[i];
    //           do obstacle.Draw();

    //           let i = i + 1;
    //       }
    //       do Character.setShouldRedrawObstacles(false);
    //   }

    //   return;
    //

    method void DoAllEnemyActions()
    {
        var Enemy enemy;
        var int i;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do Character.DoEnemyAction(enemy, map, mapWidth, mapHeight, WorldOffset);
            let i = i + 1;
        }

        return;
    }

    method void CheckEnemyAndCharacterCollision()
    {
        var int i;
        var Enemy enemy;
        var bool collided_sides;
        var bool collided_top;

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];

            do Character.CheckCollisionWithEnemy(enemy);

            let i = i + 1;
        }

        return;
    }


    method void CheckAllBullets()
    {
        var int i;
        var Enemy enemy;

        do Character.CheckBullets(WorldOffset);

        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.CheckBullets(WorldOffset);
            let i = i + 1;
        }

        return;
    }

    method void CheckAllBulletCollisions()
    {
        var int i;
        var int j;
        var int characterBulletsCount;
        var int enemyBulletsCount;
        var Array characterBullets;
        var Array enemyBullets;
        var Enemy enemy;
        var Bullet bullet;

        let characterBulletsCount = Character.getBulletsCount();
        let characterBullets = Character.getBullets();

        while (i < characterBulletsCount)
        {
            let bullet = characterBullets[i];
            do Character.CheckCollisionWithBullet(bullet);

            let j = 0;
            while (j < EnemiesCount)
            {
                let enemy = Enemies[j];
                do enemy.CheckCollisionWithBullet(bullet);
                let j = j + 1;
            }

            let i = i + 1;
        }

        let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];

            let enemyBulletsCount = enemy.getBulletsCount();
            let enemyBullets = enemy.getBullets();

            let j = 0;
            while (j < enemyBulletsCount)
            {
                let bullet = enemyBullets[j];
                do Character.CheckCollisionWithBullet(bullet);
                let j = j + 1;
            }

            let i = i + 1;
        }     

        return;
    }

    method void CheckCollectableAndCharacterCollision()
    {
        var int i;
        var Collectable collectable;

        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];

            do Character.CheckCollisionWithCollectable(collectable);

            let i = i + 1;
        }

        return;
    }

    method void ScrollLeft()
    {
        var int i;
        var Platform platform;
        var Obstacle obstacle;
        var Enemy enemy;
        var Collectable collectable;

        let WorldOffset = WorldOffset + 1;
        do Character.incrementAbsoluteX(1);

        do Character.ScrollBulletsLeft();

        //let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.ScrollBulletsLeft();
            do enemy.ScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];
            do collectable.ScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.ClearScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.ClearScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.DrawScrollLeft();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.DrawScrollLeft();

            let i = i + 1;
        }

        do Finish.ScrollLeft();


        return;
    }

    method void ScrollRight()
    {
        var int i;
        var Platform platform;
        var Obstacle obstacle;
        var Enemy enemy;
        var Collectable collectable;

        let WorldOffset = WorldOffset - 1;
        do Character.incrementAbsoluteX(-1);

        do Character.ScrollBulletsRight();

        //let i = 0;
        while (i < EnemiesCount)
        {
            let enemy = Enemies[i];
            do enemy.ScrollBulletsRight();
            do enemy.ScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < CollectablesCount)
        {
            let collectable = Collectables[i];
            do collectable.ScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.ClearScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.ClearScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < ObstaclesCount)
        {
            let obstacle = Obstacles[i];
            do obstacle.DrawScrollRight();

            let i = i + 1;
        }

        let i = 0;
        while (i < PlatformsCount)
        {
            let platform = Platforms[i];
            do platform.DrawScrollRight();

            let i = i + 1;
        }

        do Finish.ScrollRight();

        return;
    }

    method void Move()
    {
        var int x;
        var int absX;
        var int cWidth;
        
        let x = Character.getX();
        let absX = Character.getAbsoluteX();
        let cWidth = Character.getWidth();

        do Character.CheckGravity(WorldOffset);
        do Character.CheckCollisionWithObstacles();

        if (Direction = 1) 
        {
            do Character.setMovingLeft(true);

            if (~Character.CheckCollisionWithPlatformLeft(WorldOffset))
            {
                if (absX < LeftBorder)
                {
                    do Character.MoveLeft();
                }
                else { if (x < LeftBorder)
                {
                    do ScrollRight();
                }
                else 
                {
                    do Character.MoveLeft();
                }}
            }
        }
        if (Direction = 2)
        {
            do Character.setMovingLeft(false);

            if (~Character.CheckCollisionWithPlatformRight(WorldOffset))
            {
                if (absX > (mapWidth - RightBorder))
                {
                    do Character.MoveRight();
                }
                else { if (x > (RightBorder - cWidth))
                {
                    do ScrollLeft();
                }
                else 
                {
                    do Character.MoveRight();
                }}
            }
        }
        
        return;
    }

    // DRAWING AND PRINTING
    method void drawHeart()
    {
        var int memAddress;
        let memAddress = Constants.getScreenStart() + 8;

	    do Memory.poke(memAddress + 96, 3696);
	    do Memory.poke(memAddress + 128, 8184);
	    do Memory.poke(memAddress + 160, 8184);
	    do Memory.poke(memAddress + 192, 4080);
	    do Memory.poke(memAddress + 224, 2016);
	    do Memory.poke(memAddress + 256, 960);
	    do Memory.poke(memAddress + 288, 384);

        return;
    }

    method void drawCoin()
    {
        var int memAddress;
        let memAddress = Constants.getScreenStart() + 12;

        do Memory.poke(memAddress + 32, 2016);
	    do Memory.poke(memAddress + 64, 2064);
	    do Memory.poke(memAddress + 96, 5064);
	    do Memory.poke(memAddress + 128, 5160);
	    do Memory.poke(memAddress + 160, 5160);
	    do Memory.poke(memAddress + 192, 5160);
	    do Memory.poke(memAddress + 224, 5160);
	    do Memory.poke(memAddress + 256, 5064);
	    do Memory.poke(memAddress + 288, 2064);
	    do Memory.poke(memAddress + 320, 2016);

        return;
    }

    method void drawAmmo()
    {
        var int memAddress;
        let memAddress = Constants.getScreenStart() + 16;

        do Memory.poke(memAddress + 32, 12684);
	    do Memory.poke(memAddress + 64, 12684);
	    do Memory.poke(memAddress + 96, 31710);
	    do Memory.poke(memAddress + 128, 31710);
	    do Memory.poke(memAddress + 160, 19026);
	    do Memory.poke(memAddress + 192, 19026);
	    do Memory.poke(memAddress + 224, 19026);
	    do Memory.poke(memAddress + 256, 19026);
	    do Memory.poke(memAddress + 288, 19026);
	    do Memory.poke(memAddress + 320, 12684);
        return;
    }

    method void drawSkull()
    {
        var int memAddress;
        let memAddress = Constants.getScreenStart() + 28;

        //do Memory.poke(memAddress + 32, 1016);
	    //do Memory.poke(memAddress + 64, 1548);
	    //do Memory.poke(memAddress + 96, 3078);
	    //do Memory.poke(memAddress + 128, 2050);
	    //do Memory.poke(memAddress + 160, 2446);
	    //do Memory.poke(memAddress + 192, 2478);
	    //do Memory.poke(memAddress + 224, 3074);
	    //do Memory.poke(memAddress + 256, 3590);
	    //do Memory.poke(memAddress + 288, 1620);
	    //do Memory.poke(memAddress + 320, 1020);

        do Memory.poke(memAddress + 32, 4064);
	    do Memory.poke(memAddress + 64, 8176);
	    do Memory.poke(memAddress + 96, 8176);
	    do Memory.poke(memAddress + 128, 7088);
	    do Memory.poke(memAddress + 160, 12568);
	    do Memory.poke(memAddress + 192, 13208);
	    do Memory.poke(memAddress + 224, 16376);
	    do Memory.poke(memAddress + 256, 7920);
	    do Memory.poke(memAddress + 288, 8176);
	    do Memory.poke(memAddress + 320, 1984);
	    do Memory.poke(memAddress + 352, 1344);

        return;
    }


    method void printLevel()
    {
        do Output.moveCursor(0, 1);
        let text = "Level ";
        do Output.printString(text);
        do Output.printInt(currLevel);
        
        if (Difficulty.getDifficulty() = 1)
        {
            let text = " Easy";
        }
        else { if (Difficulty.getDifficulty() = 2)
        {
            let text = " Medium";
        }
        else { if (Difficulty.getDifficulty() = 3)
        {
            let text = " Hard";
        }
        else { if (Difficulty.getDifficulty() = 4)
        {
            let text = " Insane";
        }}}}

        do Output.printString(text);

        return;
    }


    function void addKill() 
    { 
        let Kills = Kills + 1; 
        do Game.printKills();
        return;
    }
    function void printKills()
    {   
        do Output.moveCursor(0, 58);
        let text = ": ";
        do Output.printString(text);
        do Output.printInt(Kills);

        return;
    }

    method void dispose()
    {
        do Level.dispose();

        let TotalCoins = TotalCoins + Character.getCoins();
        let TotalKills = TotalKills + Kills;
        let Kills = 0;
        if (Character.getHealth() > 0)
        {
            let TotalDeaths = TotalDeaths + Deaths;
            let Deaths = 0;
        }

        //do Game.disposeAnimiation();

        let PlatformsCount = 0;
        let ObstaclesCount = 0;
        let EnemiesCount = 0;
        let CollectablesCount = 0;

        let Platforms = 0;
        let Obstacles = 0;
        let Collectables = 0;
        let Enemies = 0;

        //do Memory.deAlloc(this);

        return;
    }
}
    