//https://www.youtube.com/watch?v=Ouza_4SsbLc
//https://codepen.io/rickyjw/pen/qrjmdz
//https://editor.p5js.org/Coulomb1/sketches/ajYsnHRW2
//https://www.coursera.org/lecture/nand2tetris2/unit-3-10-graphics-optimization-hHNmi
//https://classes.engineering.wustl.edu/cse365/demo_program.php
//https://arieljannai.gitlab.io/Nand2TetrisBitmapEditor/
//https://github.com/ErikUmble/nand2tetris/tree/main/DinoAdventure





// IDEJA: sortirat platforme po x koordinati
// IDEJA2: brojac koji broji kolko ih je izaslo iz ekrana. kolko ih je izaslo tolko mogu stvorit novih tako da starima promijenim koordinate.
//         ako nijedna nije izasla iz ekrana, a treba se pokazat novi, sam stvorim novu platformu




class Game
{
    field int direction;
    field Character character;
    field int screen_width;
    field int move_area_width;
    field int screen_middle;
    field int left_border;
    field int right_border;

    field int platforms_num;
    field int sections_num;
    field int section_width;

    field Array platforms;
    field Array sections;

    field Section curr_section;
    field inr curr_section_index;
    field Array curr_platforms;
    field int curr_platforms_num;

    field Array div4lookup;

    field Level3 level;
    field int level_width;

    field Enemy enemy;

    field Obstacle obstacle1;
    field Obstacle obstacle2;
    field Obstacle obstacle3;
    field Obstacle obstacle4;



    constructor Game new()
    {
        var int i;

        let direction = 0;

        let screen_width = 32;
        let move_area_width = 5;
        let screen_middle = 16;
        let left_border = screen_middle - move_area_width;
        let right_border = screen_middle + move_area_width;

        let level = Level3.new();

        let level_width = level.get_level_width();
        let character = level.get_character();

        let platforms_num = level.get_platforms_num();
        let platforms = level.get_platforms();

        let sections_num = level.get_sections_num();
        let section_width = level.get_section_width();
        let sections = level.get_sections();

        let div4lookup = Array.new(level_width);
        let i = 0;
        while (i < level_width)
        {
            let div4lookup[i] = i / 4;
            let i = i + 1;
        }



        let enemy = Enemy.new();
        let obstacle1 = Obstacle.new(0);
        let obstacle2 = Obstacle.new(1);
        let obstacle3 = Obstacle.new(2);
        let obstacle4 = Obstacle.new(3);

        do enemy.Draw(0);
        do obstacle1.Draw(5, 50);
        do obstacle2.Draw(5, 100);
        do obstacle3.Draw(10, 100);
        do obstacle4.Draw(15, 100);

        return this;
    }

    method int get_curr_section_index()
    {
        return div4lookup[character.get_absolute_x()];
    }

    method void start()
    {
        var char key;
        var bool exit;
        var int i;
        var Platform plat_temp;


        let exit = false;

        //do Screen.drawLine(0, 255-80, 511, 255-80);

        while (~exit)
        {
            let key = Keyboard.keyPressed();

            if (key = 0)
            {
                let direction = 0;
            }
            else { if (key = 131)
            {
                do character.Jump();
            }
            else { if (key = 81) 
            {
                let exit = true;
            }
            else { if (key = 130) 
            {
                let direction = 1;
            }
            else { if (key = 132) 
            {
                let direction = 2;
            }}}}}
            


            let curr_section = sections[get_curr_section_index()];
            let curr_section_index = get_curr_section_index();
            let curr_platforms = curr_section.get_platforms();
            let curr_platforms_num = curr_section.get_platforms_num();


            do move();
            do Sys.wait(40); // 50
            

            do curr_section.Draw();


        }

        return;
    }


    // scroll test
    method void move2()
    {
        var int x;

        let x = character.get_x();

        do character.check_gravity(platforms, platforms_num);

        if (direction = 1) 
        {
            // move left -> scroll right

            do ScrollRight();
        }
        if (direction = 2) 
        {
            // move right -> scroll left

            do ScrollLeft();
        }

        return;
    }

    method void ScrollLeft()
    {
        var int i;
        var Platform platform;
        var int absolute_x;

        let absolute_x = character.get_absolute_x();
        do character.set_absolute_x(absolute_x + 1);

        while (i < platforms_num)
        {
            let platform = platforms[i];
            do platform.ScrollLeft();

            let i = i + 1;
        }

        return;
    }

    method void ScrollRight()
    {
        var int i;
        var Platform platform;
        var int absolute_x;

        let absolute_x = character.get_absolute_x();
        do character.set_absolute_x(absolute_x - 1);

        while (i < platforms_num)
        {
            let platform = platforms[i];
            do platform.ScrollRight();

            let i = i + 1;
        }

        return;
    }

    method void move()
    {
        var int x;
        var int abs_x;

        let x = character.get_x();
        let abs_x = character.get_absolute_x();

        do character.check_gravity(platforms, platforms_num);

        if (direction = 1) 
        {
            //if (character.check_left_collision(sections, get_curr_section_index()))
            //{
            //    do Output.printString("left collision");
            //    do Output.println();
            //}

            if (abs_x - screen_middle + move_area_width > 0)
            {
                if (x > left_border)
                {
                    do character.MoveLeft();
                }
                else
                {
                    do ScrollRight();
                }
            }
            else
            {
                do character.MoveLeft();
            }
        }
        if (direction = 2)
        {
            if (~character.check_right_collision(platforms, platforms_num))
            {
                if (abs_x + screen_middle - move_area_width < level_width)
                {
                    if (x < right_border)
                    {   
                        do character.MoveRight();
                    }
                    else
                    {
                        do ScrollLeft();
                    }
                }
                else
                {
                    do character.MoveRight();
                }
            }
        }

        return;
    }

}