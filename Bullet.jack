class Bullet
{
    field int X;
    field int Y;

    field int memAddress;
    field int resetMemAddress;

    field int movementTimer;
    field int movementDelay;
    field bool canMove;

    field bool drawLeft;

    field bool isCollided;


    constructor Bullet new()
    {
        do resetObject();

        let resetMemAddress = Constants.getMemAddress(X, Y);
        let X = -10;
        let Y = -10;
        let memAddress = resetMemAddress;

        let movementDelay = 1;
        let movementTimer = movementDelay;

        let canMove = true;

        return this;
    }

    method int getX() { return X; }
    method int getY() { return Y; }

    method void setCollided(bool c) { let isCollided = c; return; }

    method void CheckTimers()
	{
		if (movementTimer < 1)
		{
			let canMove = true;
			let movementTimer = movementDelay;
		}

		return;
	}

	method void DecrementTimers()
	{
		let movementTimer = movementTimer - 1;

		return;
	}



    method bool CheckCollisionWithEntity(int ex, int ey, int ew, int eh)
    {
        if (~IsAvailable())
        {
            if (Collision.IsBulletCollidedWithEntity(ex, ey, ew, eh, X, Y))
            {
                let isCollided = true;
                do Reset();

                return true;
            }
        }
        

        return false;
    }

    method bool IsAvailable()
    {
        return (memAddress = resetMemAddress);
    }

    method void Shoot(int x, int y, bool drawLeft2, int worldOffset)
    {
        var int i;
        var int temp;

        if (drawLeft)
        {
            let temp = -1;
        }
        else
        {
            let temp = 1;
        }

        if (Map.getValue(x + worldOffset + temp, y/16) = 0)
        {
            let isCollided = false;

            let drawLeft = drawLeft2;

            let X = x;
            let Y = y;

            let memAddress = Constants.getMemAddress(x, y);

            //do SimpleBullet.DrawFrame(memAddress, true, drawLeft, X, Y);
            do Draw();
        }

        return;
    }

    method void CheckBullet(int worldOffset)
    {
        do CheckTimers();

        if (~(memAddress = resetMemAddress)) // podsjetnik svaki enemy dobije jedan bullet i svaki bullet daje damage svakome
        {
            let isCollided = Collision.IsBulletCollidedWithMap(X, Y, drawLeft, worldOffset);
            if (isCollided)
            {
                do Reset();
            }
            else
            {
                if (drawLeft)
                {
                    do MoveLeft();
                }
                else
                {
                    do MoveRight();
                }
            }
        }

        do DecrementTimers();
        
        return;
    }

    method void Reset()
    {
        do SimpleBullet.DrawFrame(memAddress, false, false, X, Y);
        let X = -10;
        let Y = -10;
        let memAddress = resetMemAddress;
        return;
    }

    //// MOVEMENT
    method void ScrollRight()
    {
        if (~IsAvailable())
        {
            do Clear();
            let memAddress = memAddress + 1;
            let X = X + 1;
            //do SimpleBullet.DrawFrame(memAddress, true, drawLeft, X, Y);
            do Draw();
        }

        return;
    }

    method void ScrollLeft()
    {
        if (~IsAvailable())
        {
            do Clear();
            let memAddress = memAddress - 1;
            let X = X - 1;
            //do SimpleBullet.DrawFrame(memAddress, true, drawLeft, X, Y);
            do Draw();
        }

		return;
    }

    method void MoveLeft()
    {
		if (canMove)
		{
            do SimpleBullet.DrawFrame(memAddress, false, false, X, Y);
			
            let memAddress = memAddress - 1;
        	let X = X - 1;
			
            //do SimpleBullet.DrawFrame(memAddress, true, drawLeft, X, Y);
            do Draw();

			let canMove = false;
		}

        return;
    }

    method void MoveRight()
    {

		if (canMove)
		{
            do SimpleBullet.DrawFrame(memAddress, false, false, X, Y);

            let memAddress = memAddress + 1;
        	let X = X + 1;

            //do SimpleBullet.DrawFrame(memAddress, true, drawLeft, X, Y);
            do Draw();

			let canMove = false;
		}


        return;

    }

    method void Clear()
    {
        do SimpleBullet.DrawFrame(memAddress, false, false, X, Y);
        return;
    }

    method void Draw()
    {
        if (~IsAvailable())
        {
            do SimpleBullet.DrawFrame(memAddress, true, drawLeft, X, Y);
        }

        return;
    }

    method void resetObject()
    {
        let X = 0;
        let Y = 0;
        let memAddress = 0;
        let resetMemAddress = 0;
        let movementTimer = 0;
        let movementDelay = 0;
        let canMove = 0;
        let drawLeft = 0;
        let isCollided = 0;
        return;
    }

    method void dispose()
    {
        do resetObject();

        do Memory.deAlloc(this);

        return;
    }
}