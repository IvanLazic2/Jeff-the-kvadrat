class Finish
{
    field int X;
    field int Y;
    field int Width;
    field int Height;

    field int memAddress;
    field int lastMemAddress;

    field int frameSize;

    constructor Finish new(int x, int y)
    {
        do resetObject();

        let X = x;
        let Y = y;
        let Width = FinishFlag.getWidth();
        let Height = FinishFlag.getHeight();
        let frameSize = Width * Height * 16;

        let memAddress = Constants.getMemAddress(X, Y);

        do Draw();

        let lastMemAddress = memAddress;

        return this;
    }

    method int IsCollidedWithCharacter(int x, int y, int w, int h)
    {
        if (Constants.IsInScreen(x, y))
        {   
            return Collision.IsEntityCollidedWithEntitySides(x, y, w, h, X, Y, Width, Height);
        }
        else
        {
            return false;
        }
    }

    method void ScrollRight()
    {
        let lastMemAddress = memAddress;
        let memAddress = memAddress + 1;
        do Clear();
        let X = X + 1;
        do Draw();

        return;
    }

    method void ScrollLeft()
    {
        let lastMemAddress = memAddress;
        let memAddress = memAddress - 1;
        do Clear();
        let X = X - 1;
        do Draw();

        return;
    }

    method void Clear()
    {
        var int i;
		var int row;
		var int col;
		var int tempMemAddress;
		var int memAddressIterator;

        if (~(memAddress = lastMemAddress))
        {
            let tempMemAddress = lastMemAddress + 480; // + 512 - 32

			while (i < frameSize)
			{
				if (col > (Width - 1))
				{
					let col = 0;
					let row = row - 32;
				}

				let memAddressIterator = tempMemAddress + col + row;

				if (((-1 < (X + col)) & ((X + col) < 32)) & (memAddressIterator > 16896))
				{
					do Memory.poke(memAddressIterator, 0);
				}

				let col = col + 1;
				let i = i + 1;
			}
        }

        return;
    }

    method void Draw()
    {
        if (~(memAddress = lastMemAddress))
        {
            do FinishFlag.DrawFrame(memAddress, X, Y);
        }

        return;
    }

    method void ForceDraw()
    {
        do FinishFlag.DrawFrame(memAddress, X, Y);

        return;
    }

    method void resetObject()
    {
        let X = 0;
        let Y = 0;
        let Width = 0;
        let Height = 0;
        let memAddress = 0;
        let lastMemAddress = 0;
        let frameSize = 0;

        return;
    }

    method void dispose()
    {   
        do resetObject();

        do Memory.deAlloc(this);

        return;
    }
}