// 0 - small spikes
// 1 - medium spikes
// 2 - weird spikes
// 3 - large spikes
// 4 - spiked area - kao platforma samo spikeovi

class Obstacle
{
	field int x;
	field int y;
	field int type;
	field int height;
	field int height_in_blocks;
	field int size;

    constructor Obstacle new(int x2, int y2, int type2, int height2, int size2)
    {
		let x = x2;
		let y = y2;
		let type = type2;
		let height = height2;
		let height_in_blocks = height / 16;
		let size = size2;

		do Draw();

        return this;
    }

	method int get_x() { return x; }
	method int get_y() { return y; }
	method int get_type() { return type; }
	method int get_height() { return height; }
	method int get_size() { return size; }

	

	method void ClearScrollLeft()
	{
		var int i;
		var int location;
		var int memAddress;

		let x = x - 1;
		let location = (y * 32) + x;
		let memAddress = 16384 + location + size;

		if ((x + size < 32) & (x + size > -1))
        {
			while (i < height_in_blocks)
			{
        	    do ClearBlock(memAddress);

				let memAddress = memAddress - 512;

				let i = i + 1;
        	}

			do ClearBlock(memAddress);
		}

		return;
	}

	method void DrawScrollLeft()
	{
		var int location;
		var int memAddress;

		let location = (y * 32) + x;
        let memAddress = 16384 + location;

		if ((x < 32) & (x > -1))
		{
			do Obstacle.DrawBlock(type, memAddress);
		}

		return;
	}


	method void ClearScrollRight()
	{
		var int location;
		var int memAddress;
		var int i;

		let location = (y * 32) + x;
		let memAddress = 16384 + location;

		if ((x < 32) & (x > -1))
        {
			while (i < height_in_blocks)
			{
        	    do ClearBlock(memAddress);

				let memAddress = memAddress - 512;

				let i = i + 1;
        	}

			do ClearBlock(memAddress);
		}

		let x = x + 1;

		return;
	}

	method void DrawScrollRight()
	{
		var int location;
		var int memAddress;

		if ((x + size < 33) & (x + size > 0)) // (x + size - 1 < 32) & (x + size - 1 > -1)
        {
            let location = (y * 32) + x;
            let memAddress = 16383 + location + size; // 16384 + location + size - 1

            do Obstacle.DrawBlock(type, memAddress);
        }

		return;
	}


	method void ClearBlock(int memAddress)
	{
		do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 0);
	    do Memory.poke(memAddress + 64, 0);
	    do Memory.poke(memAddress + 96, 0);
	    do Memory.poke(memAddress + 128, 0);
	    do Memory.poke(memAddress + 160, 0);
	    do Memory.poke(memAddress + 192, 0);
	    do Memory.poke(memAddress + 224, 0);
	    do Memory.poke(memAddress + 256, 0);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
    	do Memory.poke(memAddress + 480, 0);
		return;
	}

	////////////////

	method void Clear()
	{
		var int location;

		if ((x < 32) & (x > -1))
        {
			let location = (y * 32) + x;

			if (type = 0)
			{
				do ClearSmallSpikes(location);
			}
			else { if (type = 1)
			{
				do ClearMediumSpikes(location);
			} 
			else { if (type = 2)
			{
				do ClearWeirdSpikes(location);
			} 
			else { if (type = 3)
			{
				do ClearLargeSpikes(location);
			}}}}
		}

		return;
	}

	method void ClearSmallSpikes(int location)
	{
		var int i;
        var Array curr_memaddr;
		var bool color;
		var int memAddress;

		let color = false;

		let memAddress = 16384 + location;

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		return;
	}

	method void ClearMediumSpikes(int location)
	{
		var int i;
        var Array curr_memaddr;
		var bool color;
		var int memAddress;

		let color = false;

		let memAddress = 16384 + location;

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		let memAddress = 15872 + location; //16384 - (16 * 32)

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		return;
	}

	method void ClearWeirdSpikes(int location)
	{
		var int i;
        var Array curr_memaddr;
		var bool color;
		var int memAddress;

		let color = false;

		let memAddress = 16384 + location;

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		let memAddress = 15872 + location; // 16384 - (16 * 32)

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		let memAddress = 15360 + location; // 16384 - (2 * 16 * 32)

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		let memAddress = 14848 + location; // 16384 - (3 * 16 * 32)

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		return;
	}

	method void ClearLargeSpikes(int location)
	{
		var int i;
        var Array curr_memaddr;
		var bool color;
		var int memAddress;

		let color = false;

		let memAddress = 16384 + location;

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		let memAddress = 15872 + location; // 16384 - (16 * 32)

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		let memAddress = 15360 + location; // 16384 - (2 * 16 * 32)

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		let memAddress = 14848 + location; // 16384 - (3 * 16 * 32)

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		let memAddress = 14336 + location; // 16384 - (4 * 16 * 32)

        let i = 0;
        while (i < 481)
        {
            let curr_memaddr = memAddress + i;
            let curr_memaddr[0] = color;
            let i = i + 32;                
        }

		return;
	}

	method void Draw()
	{
		var int i;
		var int location;
		var int memAddress;

		let location = (y * 32) + x;
		let memAddress = 16384 + location;

        while (i < size)
        {
            if (((x + i) < 32) & ((x + i) > -1))
            {
				do Obstacle.DrawBlock(type, memAddress);
            }

            let i = i + 1;
			let memAddress = memAddress + 1;
        }

        return;
	}

	function void DrawBlock(int type, int memAddress)
	{
		if (type = 0)
		{
			do Obstacle.DrawSmallSpikesBlock(memAddress);
		}
		else { if (type = 1)
		{
			do Obstacle.DrawMediumSpikesBlock(memAddress);
		} 
		else { if (type = 2)
		{
			do Obstacle.DrawWeirdSpikesBlock(memAddress);
		} 
		else { if (type = 3)
		{
			do Obstacle.DrawLargeSpikesBlock(memAddress);
		}
		else { if (type = 4)
		{
			do Obstacle.DrawSpikedAreaBlockAlt(memAddress);
		}}}}}

		return;
	}

    function void DrawSmallSpikesBlock(int memAddress)
    {
	    do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 0);
	    do Memory.poke(memAddress + 64, 0);
	    do Memory.poke(memAddress + 96, 0);
	    do Memory.poke(memAddress + 128, 384);
	    do Memory.poke(memAddress + 160, 384);
	    do Memory.poke(memAddress + 192, 960);
	    do Memory.poke(memAddress + 224, 960);
	    do Memory.poke(memAddress + 256, 2016);
	    do Memory.poke(memAddress + 288, 1504);
	    do Memory.poke(memAddress + 320, 3568);
	    do Memory.poke(memAddress + 352, 2544);
	    do Memory.poke(memAddress + 384, 4600);
	    do Memory.poke(memAddress + 416, 5112);
	    do Memory.poke(memAddress + 448, 10236);
	    do Memory.poke(memAddress + 480, 16380);
	    return;
    }

	function void DrawMediumSpikesBlock(int memAddress)
    {
	    do Memory.poke(memAddress + 0, 15356);
		do Memory.poke(memAddress + 32, 15356);
		do Memory.poke(memAddress + 64, 13308);
		do Memory.poke(memAddress + 96, 14332);
		do Memory.poke(memAddress + 128, 14332);
		do Memory.poke(memAddress + 160, 30718);
		do Memory.poke(memAddress + 192, 26622);
		do Memory.poke(memAddress + 224, 26622);
		do Memory.poke(memAddress + 256, 28670);
		do Memory.poke(memAddress + 288, 28670);
		do Memory.poke(memAddress + 320, 20478);
		do Memory.poke(memAddress + 352, 20478);
		do Memory.poke(memAddress + 384, 24574);
		do Memory.poke(memAddress + 416, -8193);
		do Memory.poke(memAddress + 448, -1);
		do Memory.poke(memAddress + 480, -1);

		let memAddress = memAddress - 512;

		do Memory.poke(memAddress + 0, 384);
		do Memory.poke(memAddress + 32, 384);
		do Memory.poke(memAddress + 64, 384);
		do Memory.poke(memAddress + 96, 960);
		do Memory.poke(memAddress + 128, 960);
		do Memory.poke(memAddress + 160, 960);
		do Memory.poke(memAddress + 192, 2016);
		do Memory.poke(memAddress + 224, 2016);
		do Memory.poke(memAddress + 256, 2016);
		do Memory.poke(memAddress + 288, 3568);
		do Memory.poke(memAddress + 320, 3568);
		do Memory.poke(memAddress + 352, 3568);
		do Memory.poke(memAddress + 384, 7672);
		do Memory.poke(memAddress + 416, 7160);
		do Memory.poke(memAddress + 448, 7160);
		do Memory.poke(memAddress + 480, 15356);

	    return;
    }

	function void DrawWeirdSpikesBlock(int memAddress)
	{
		do Memory.poke(memAddress + 0, -8225);
		do Memory.poke(memAddress + 32, -8241);
		do Memory.poke(memAddress + 64, -8241);
		do Memory.poke(memAddress + 96, -12313);
		do Memory.poke(memAddress + 128, -4121);
		do Memory.poke(memAddress + 160, -4121);
		do Memory.poke(memAddress + 192, -4105);
		do Memory.poke(memAddress + 224, -2057);
		do Memory.poke(memAddress + 256, -2057);
		do Memory.poke(memAddress + 288, -3077);
		do Memory.poke(memAddress + 320, -1029);
		do Memory.poke(memAddress + 352, -1029);
		do Memory.poke(memAddress + 384, -517);
		do Memory.poke(memAddress + 416, -517);
		do Memory.poke(memAddress + 448, -517);
		do Memory.poke(memAddress + 480, -519);

		let memAddress = memAddress - 512;

		do Memory.poke(memAddress + 0, -8464);
		do Memory.poke(memAddress + 32, -8464);
		do Memory.poke(memAddress + 64, -8336);
		do Memory.poke(memAddress + 96, -8352);
		do Memory.poke(memAddress + 128, -8384);
		do Memory.poke(memAddress + 160, -128);
		do Memory.poke(memAddress + 192, -4224);
		do Memory.poke(memAddress + 224, -6208);
		do Memory.poke(memAddress + 256, -5184);
		do Memory.poke(memAddress + 288, -4640);
		do Memory.poke(memAddress + 320, -4368);
		do Memory.poke(memAddress + 352, -4232);
		do Memory.poke(memAddress + 384, -4228);
		do Memory.poke(memAddress + 416, -4292);
		do Memory.poke(memAddress + 448, -8418);
		do Memory.poke(memAddress + 480, -8289);

		let memAddress = memAddress - 512;

		do Memory.poke(memAddress + 0, 8688);
		do Memory.poke(memAddress + 32, 25072);
		do Memory.poke(memAddress + 64, 29664);
		do Memory.poke(memAddress + 96, 29632);
		do Memory.poke(memAddress + 128, 26560);
		do Memory.poke(memAddress + 160, 28546);
		do Memory.poke(memAddress + 192, 28418);
		do Memory.poke(memAddress + 224, 12034);
		do Memory.poke(memAddress + 256, -18942);
		do Memory.poke(memAddress + 288, -19450);
		do Memory.poke(memAddress + 320, -18418);
		do Memory.poke(memAddress + 352, -18402);
		do Memory.poke(memAddress + 384, -18372);
		do Memory.poke(memAddress + 416, -18308);
		do Memory.poke(memAddress + 448, -18312);
		do Memory.poke(memAddress + 480, -18184);

		let memAddress = memAddress - 512;

		do Memory.poke(memAddress + 0, 0);
		do Memory.poke(memAddress + 32, 0);
		do Memory.poke(memAddress + 64, 0);
		do Memory.poke(memAddress + 96, 16);
		do Memory.poke(memAddress + 128, 16);
		do Memory.poke(memAddress + 160, 16);
		do Memory.poke(memAddress + 192, 16);
		do Memory.poke(memAddress + 224, 56);
		do Memory.poke(memAddress + 256, 56);
		do Memory.poke(memAddress + 288, 56);
		do Memory.poke(memAddress + 320, 124);
		do Memory.poke(memAddress + 352, 124);
		do Memory.poke(memAddress + 384, 124);
		do Memory.poke(memAddress + 416, 120);
		do Memory.poke(memAddress + 448, 8440);
		do Memory.poke(memAddress + 480, 8440);

		return;
	}

	function void DrawLargeSpikesBlock(int memAddress)
	{
		do Memory.poke(memAddress + 0, 7160);
		do Memory.poke(memAddress + 32, 6136);
		do Memory.poke(memAddress + 64, 6136);
		do Memory.poke(memAddress + 96, 6136);
		do Memory.poke(memAddress + 128, 6136);
		do Memory.poke(memAddress + 160, 6136);
		do Memory.poke(memAddress + 192, 6136);
		do Memory.poke(memAddress + 224, 6136);
		do Memory.poke(memAddress + 256, 6136);
		do Memory.poke(memAddress + 288, 6136);
		do Memory.poke(memAddress + 320, 6136);
		do Memory.poke(memAddress + 352, 6136);
		do Memory.poke(memAddress + 384, 6136);
		do Memory.poke(memAddress + 416, 6136);
		do Memory.poke(memAddress + 448, 6136);
		do Memory.poke(memAddress + 480, 8184);

		let memAddress = memAddress - 512;

		do Memory.poke(memAddress + 0, 3568);
		do Memory.poke(memAddress + 32, 3056);
		do Memory.poke(memAddress + 64, 3056);
		do Memory.poke(memAddress + 96, 3056);
		do Memory.poke(memAddress + 128, 3056);
		do Memory.poke(memAddress + 160, 3056);
		do Memory.poke(memAddress + 192, 3056);
		do Memory.poke(memAddress + 224, 3056);
		do Memory.poke(memAddress + 256, 3056);
		do Memory.poke(memAddress + 288, 3056);
		do Memory.poke(memAddress + 320, 3056);
		do Memory.poke(memAddress + 352, 3056);
		do Memory.poke(memAddress + 384, 3056);
		do Memory.poke(memAddress + 416, 3056);
		do Memory.poke(memAddress + 448, 3056);
		do Memory.poke(memAddress + 480, 3056);

		let memAddress = memAddress - 512;
		
		do Memory.poke(memAddress + 0, 1760);
		do Memory.poke(memAddress + 32, 1504);
		do Memory.poke(memAddress + 64, 1504);
		do Memory.poke(memAddress + 96, 1504);
		do Memory.poke(memAddress + 128, 1504);
		do Memory.poke(memAddress + 160, 1504);
		do Memory.poke(memAddress + 192, 1504);
		do Memory.poke(memAddress + 224, 1504);
		do Memory.poke(memAddress + 256, 1504);
		do Memory.poke(memAddress + 288, 1504);
		do Memory.poke(memAddress + 320, 1504);
		do Memory.poke(memAddress + 352, 1504);
		do Memory.poke(memAddress + 384, 1504);
		do Memory.poke(memAddress + 416, 1504);
		do Memory.poke(memAddress + 448, 1504);
		do Memory.poke(memAddress + 480, 1504);

		let memAddress = memAddress - 512;

		do Memory.poke(memAddress + 0, 960);
		do Memory.poke(memAddress + 32, 704);
		do Memory.poke(memAddress + 64, 704);
		do Memory.poke(memAddress + 96, 704);
		do Memory.poke(memAddress + 128, 704);
		do Memory.poke(memAddress + 160, 704);
		do Memory.poke(memAddress + 192, 704);
		do Memory.poke(memAddress + 224, 704);
		do Memory.poke(memAddress + 256, 704);
		do Memory.poke(memAddress + 288, 704);
		do Memory.poke(memAddress + 320, 704);
		do Memory.poke(memAddress + 352, 704);
		do Memory.poke(memAddress + 384, 704);
		do Memory.poke(memAddress + 416, 704);
		do Memory.poke(memAddress + 448, 704);
		do Memory.poke(memAddress + 480, 704);

		let memAddress = memAddress - 512;

		do Memory.poke(memAddress + 0, 384);
		do Memory.poke(memAddress + 32, 384);
		do Memory.poke(memAddress + 64, 384);
		do Memory.poke(memAddress + 96, 384);
		do Memory.poke(memAddress + 128, 384);
		do Memory.poke(memAddress + 160, 384);
		do Memory.poke(memAddress + 192, 384);
		do Memory.poke(memAddress + 224, 384);
		do Memory.poke(memAddress + 256, 384);
		do Memory.poke(memAddress + 288, 384);
		do Memory.poke(memAddress + 320, 384);
		do Memory.poke(memAddress + 352, 384);
		do Memory.poke(memAddress + 384, 384);
		do Memory.poke(memAddress + 416, 384);
		do Memory.poke(memAddress + 448, 384);
		do Memory.poke(memAddress + 480, 384);

		return;
	}

	

	function void DrawSpikedAreaBlock(int memAddress)
	{
		do Memory.poke(memAddress + 0, 2320);
		do Memory.poke(memAddress + 32, 2320);
		do Memory.poke(memAddress + 64, 2728);
		do Memory.poke(memAddress + 96, 5288);
		do Memory.poke(memAddress + 128, 5288);
		do Memory.poke(memAddress + 160, 8772);
		do Memory.poke(memAddress + 192, 9540);
		do Memory.poke(memAddress + 224, 9540);
		do Memory.poke(memAddress + 256, 21828);
		do Memory.poke(memAddress + 288, 18562);
		do Memory.poke(memAddress + 320, 18570);
		do Memory.poke(memAddress + 352, 18581);
		do Memory.poke(memAddress + 384, -28587);
		do Memory.poke(memAddress + 416, -28126);
		do Memory.poke(memAddress + 448, -28126);
		do Memory.poke(memAddress + 480, -27327);

		return;
	}

	function void DrawSpikedAreaBlockAlt(int memAddress)
	{
		do Memory.poke(memAddress + 0, 2320);
		do Memory.poke(memAddress + 32, 2320);
		do Memory.poke(memAddress + 64, 2320);
		do Memory.poke(memAddress + 96, 2728);
		do Memory.poke(memAddress + 128, 5800);
		do Memory.poke(memAddress + 160, 15212);
		do Memory.poke(memAddress + 192, 14172);
		do Memory.poke(memAddress + 224, 14172);
		do Memory.poke(memAddress + 256, 30580);
		do Memory.poke(memAddress + 288, 32746);
		do Memory.poke(memAddress + 320, 24042);
		do Memory.poke(memAddress + 352, 24029);
		do Memory.poke(memAddress + 384, -9515);
		do Memory.poke(memAddress + 416, -17674);
		do Memory.poke(memAddress + 448, -18578);
		do Memory.poke(memAddress + 480, -2193);

		return;
	}

	
}