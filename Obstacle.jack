// 0 - small spikes
// 1 - medium spikes
// 2 - weird spikes
// 3 - large spikes
// 4 - spiked area

class Obstacle
{
	field int X;
	field int Y;
	field int Type;
	field int Height;
	field int heightInBlocks;
	field int Size;

	field int memAddress;

	static Array smallSpikes;
	static Array mediumSpikes;
	static Array weirdSpikes;
	static Array largeSpikes;
	static Array spikedArea;

    constructor Obstacle new(int x2, int y2, int type2, int height2, int size2)
    {
		do resetObject();

		let X = x2;
		let Y = y2;
		let Type = type2;
		let Height = height2;
		let heightInBlocks = Height / 16;
		let Size = size2;

		let memAddress = Constants.getMemAddress(X, Y);

		do Draw();

        return this;
    }

	method int getX() { return X; }
	method int getY() { return Y; }
	method int getType() { return Type; }
	method int getHeight() { return Height; }
	method int getSize() { return Size; }

	

	method void ClearScrollLeft()
	{
		let X = X - 1;
		let memAddress = memAddress - 1;
		do Clear(memAddress + Size, X + Size);

		return;
	}

	method void DrawScrollLeft()
	{
		do Obstacle.DrawBlock(Type, memAddress, X, Y);
		return;
	}


	method void ClearScrollRight()
	{
		do Clear(memAddress, X);

		return;
	}

	method void DrawScrollRight()
	{
		do Obstacle.DrawBlock(Type, memAddress + Size, X + Size, Y);
		let X = X + 1;
		let memAddress = memAddress + 1;

		return;
	}


	method void Clear(int memAddress, int X)
	{
		do Sprite.Draw(memAddress, smallSpikes, Height + 16, 1, heightInBlocks + 1, false, X, Y);
		return;
	}

	method void Draw()
	{
		var int i;
		var int tempMemAddress;

		let tempMemAddress = memAddress;

        while (i < Size)
        {
			do Obstacle.DrawBlock(Type, tempMemAddress, X + i, Y);
            let i = i + 1;
			let tempMemAddress = tempMemAddress + 1;
        }

        return;
	}

	function void DrawBlock(int Type, int memAddress, int X, int Y)
	{
		if (Type = 0)
		{
			do Sprite.Draw(memAddress, smallSpikes, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 1)
		{
			do Sprite.Draw(memAddress, mediumSpikes, 32, 1, 2, true, X, Y);
		} 
		else { if (Type = 2)
		{
			do Sprite.Draw(memAddress, weirdSpikes, 64, 1, 4, true, X, Y);
		} 
		else { if (Type = 3)
		{
			do Sprite.Draw(memAddress, largeSpikes, 80, 1, 5, true, X, Y);
		}
		else { if (Type = 4)
		{
			do Sprite.Draw(memAddress, spikedArea, 16, 1, 1, true, X, Y);
		}}}}}

		return;
	}

	function void init()
	{
		let smallSpikes = Array.new(16);
		let mediumSpikes = Array.new(32);
		let weirdSpikes = Array.new(64);
		let largeSpikes = Array.new(80);
		let spikedArea = Array.new(16);

		// SMALL SPIKES
		do MemoryExt.poke(smallSpikes, 11, 384);
		do MemoryExt.poke(smallSpikes, 10, 384);
		do MemoryExt.poke(smallSpikes, 9, 960);
		do MemoryExt.poke(smallSpikes, 8, 960);
		do MemoryExt.poke(smallSpikes, 7, 2016);
		do MemoryExt.poke(smallSpikes, 6, 1504);
		do MemoryExt.poke(smallSpikes, 5, 3568);
		do MemoryExt.poke(smallSpikes, 4, 2544);
		do MemoryExt.poke(smallSpikes, 3, 4600);
		do MemoryExt.poke(smallSpikes, 2, 5112);
		do MemoryExt.poke(smallSpikes, 1, 10236);
		do MemoryExt.poke(smallSpikes, 0, 16380);

		// MEDIUM SPIKES
		do MemoryExt.poke(mediumSpikes, 15, 15356);
		do MemoryExt.poke(mediumSpikes, 14, 15356);
		do MemoryExt.poke(mediumSpikes, 13, 13308);
		do MemoryExt.poke(mediumSpikes, 12, 14332);
		do MemoryExt.poke(mediumSpikes, 11, 14332);
		do MemoryExt.poke(mediumSpikes, 10, 30718);
		do MemoryExt.poke(mediumSpikes, 9, 26622);
		do MemoryExt.poke(mediumSpikes, 8, 26622);
		do MemoryExt.poke(mediumSpikes, 7, 28670);
		do MemoryExt.poke(mediumSpikes, 6, 28670);
		do MemoryExt.poke(mediumSpikes, 5, 20478);
		do MemoryExt.poke(mediumSpikes, 4, 20478);
		do MemoryExt.poke(mediumSpikes, 3, 24574);
		do MemoryExt.poke(mediumSpikes, 2, -8193);
		do MemoryExt.poke(mediumSpikes, 1, -1);
		do MemoryExt.poke(mediumSpikes, 0, -1);

		do MemoryExt.poke(mediumSpikes, 31, 384);
		do MemoryExt.poke(mediumSpikes, 30, 384);
		do MemoryExt.poke(mediumSpikes, 29, 384);
		do MemoryExt.poke(mediumSpikes, 28, 960);
		do MemoryExt.poke(mediumSpikes, 27, 960);
		do MemoryExt.poke(mediumSpikes, 26, 960);
		do MemoryExt.poke(mediumSpikes, 25, 2016);
		do MemoryExt.poke(mediumSpikes, 24, 2016);
		do MemoryExt.poke(mediumSpikes, 23, 2016);
		do MemoryExt.poke(mediumSpikes, 22, 3568);
		do MemoryExt.poke(mediumSpikes, 21, 3568);
		do MemoryExt.poke(mediumSpikes, 20, 3568);
		do MemoryExt.poke(mediumSpikes, 19, 7672);
		do MemoryExt.poke(mediumSpikes, 18, 7160);
		do MemoryExt.poke(mediumSpikes, 17, 7160);
		do MemoryExt.poke(mediumSpikes, 16, 15356);

		// WEIRD SPIKES
		do MemoryExt.poke(weirdSpikes, 15, -8225);
		do MemoryExt.poke(weirdSpikes, 14, -8241);
		do MemoryExt.poke(weirdSpikes, 13, -8241);
		do MemoryExt.poke(weirdSpikes, 12, -12313);
		do MemoryExt.poke(weirdSpikes, 11, -4121);
		do MemoryExt.poke(weirdSpikes, 10, -4121);
		do MemoryExt.poke(weirdSpikes, 9, -4105);
		do MemoryExt.poke(weirdSpikes, 8, -2057);
		do MemoryExt.poke(weirdSpikes, 7, -2057);
		do MemoryExt.poke(weirdSpikes, 6, -3077);
		do MemoryExt.poke(weirdSpikes, 5, -1029);
		do MemoryExt.poke(weirdSpikes, 4, -1029);
		do MemoryExt.poke(weirdSpikes, 3, -517);
		do MemoryExt.poke(weirdSpikes, 2, -517);
		do MemoryExt.poke(weirdSpikes, 1, -517);
		do MemoryExt.poke(weirdSpikes, 0, -519);

		do MemoryExt.poke(weirdSpikes, 31, -8464);
		do MemoryExt.poke(weirdSpikes, 30, -8464);
		do MemoryExt.poke(weirdSpikes, 29, -8336);
		do MemoryExt.poke(weirdSpikes, 28, -8352);
		do MemoryExt.poke(weirdSpikes, 27, -8384);
		do MemoryExt.poke(weirdSpikes, 26, -128);
		do MemoryExt.poke(weirdSpikes, 25, -4224);
		do MemoryExt.poke(weirdSpikes, 24, -6208);
		do MemoryExt.poke(weirdSpikes, 23, -5184);
		do MemoryExt.poke(weirdSpikes, 22, -4640);
		do MemoryExt.poke(weirdSpikes, 21, -4368);
		do MemoryExt.poke(weirdSpikes, 20, -4232);
		do MemoryExt.poke(weirdSpikes, 19, -4228);
		do MemoryExt.poke(weirdSpikes, 18, -4292);
		do MemoryExt.poke(weirdSpikes, 17, -8418);
		do MemoryExt.poke(weirdSpikes, 16, -8289);

		do MemoryExt.poke(weirdSpikes, 47, 8688);
		do MemoryExt.poke(weirdSpikes, 46, 25072);
		do MemoryExt.poke(weirdSpikes, 45, 29664);
		do MemoryExt.poke(weirdSpikes, 44, 29632);
		do MemoryExt.poke(weirdSpikes, 43, 26560);
		do MemoryExt.poke(weirdSpikes, 42, 28546);
		do MemoryExt.poke(weirdSpikes, 41, 28418);
		do MemoryExt.poke(weirdSpikes, 40, 12034);
		do MemoryExt.poke(weirdSpikes, 39, -18942);
		do MemoryExt.poke(weirdSpikes, 38, -19450);
		do MemoryExt.poke(weirdSpikes, 37, -18418);
		do MemoryExt.poke(weirdSpikes, 36, -18402);
		do MemoryExt.poke(weirdSpikes, 35, -18372);
		do MemoryExt.poke(weirdSpikes, 34, -18308);
		do MemoryExt.poke(weirdSpikes, 33, -18312);
		do MemoryExt.poke(weirdSpikes, 32, -18184);

		do MemoryExt.poke(weirdSpikes, 60, 16);
		do MemoryExt.poke(weirdSpikes, 59, 16);
		do MemoryExt.poke(weirdSpikes, 58, 16);
		do MemoryExt.poke(weirdSpikes, 57, 16);
		do MemoryExt.poke(weirdSpikes, 56, 56);
		do MemoryExt.poke(weirdSpikes, 55, 56);
		do MemoryExt.poke(weirdSpikes, 54, 56);
		do MemoryExt.poke(weirdSpikes, 53, 124);
		do MemoryExt.poke(weirdSpikes, 52, 124);
		do MemoryExt.poke(weirdSpikes, 51, 124);
		do MemoryExt.poke(weirdSpikes, 50, 120);
		do MemoryExt.poke(weirdSpikes, 49, 8440);
		do MemoryExt.poke(weirdSpikes, 48, 8440);

		// LARGE SPIKES
		do MemoryExt.poke(largeSpikes, 15, 7160);
		do MemoryExt.poke(largeSpikes, 14, 6136);
		do MemoryExt.poke(largeSpikes, 13, 6136);
		do MemoryExt.poke(largeSpikes, 12, 6136);
		do MemoryExt.poke(largeSpikes, 11, 6136);
		do MemoryExt.poke(largeSpikes, 10, 6136);
		do MemoryExt.poke(largeSpikes, 9, 6136);
		do MemoryExt.poke(largeSpikes, 8, 6136);
		do MemoryExt.poke(largeSpikes, 7, 6136);
		do MemoryExt.poke(largeSpikes, 6, 6136);
		do MemoryExt.poke(largeSpikes, 5, 6136);
		do MemoryExt.poke(largeSpikes, 4, 6136);
		do MemoryExt.poke(largeSpikes, 3, 6136);
		do MemoryExt.poke(largeSpikes, 2, 6136);
		do MemoryExt.poke(largeSpikes, 1, 6136);
		do MemoryExt.poke(largeSpikes, 0, 8184);

		do MemoryExt.poke(largeSpikes, 31, 3568);
		do MemoryExt.poke(largeSpikes, 30, 3056);
		do MemoryExt.poke(largeSpikes, 29, 3056);
		do MemoryExt.poke(largeSpikes, 28, 3056);
		do MemoryExt.poke(largeSpikes, 27, 3056);
		do MemoryExt.poke(largeSpikes, 26, 3056);
		do MemoryExt.poke(largeSpikes, 25, 3056);
		do MemoryExt.poke(largeSpikes, 24, 3056);
		do MemoryExt.poke(largeSpikes, 23, 3056);
		do MemoryExt.poke(largeSpikes, 22, 3056);
		do MemoryExt.poke(largeSpikes, 21, 3056);
		do MemoryExt.poke(largeSpikes, 20, 3056);
		do MemoryExt.poke(largeSpikes, 19, 3056);
		do MemoryExt.poke(largeSpikes, 18, 3056);
		do MemoryExt.poke(largeSpikes, 17, 3056);
		do MemoryExt.poke(largeSpikes, 16, 3056);

		do MemoryExt.poke(largeSpikes, 47, 1760);
		do MemoryExt.poke(largeSpikes, 46, 1504);
		do MemoryExt.poke(largeSpikes, 45, 1504);
		do MemoryExt.poke(largeSpikes, 44, 1504);
		do MemoryExt.poke(largeSpikes, 43, 1504);
		do MemoryExt.poke(largeSpikes, 42, 1504);
		do MemoryExt.poke(largeSpikes, 41, 1504);
		do MemoryExt.poke(largeSpikes, 40, 1504);
		do MemoryExt.poke(largeSpikes, 39, 1504);
		do MemoryExt.poke(largeSpikes, 38, 1504);
		do MemoryExt.poke(largeSpikes, 37, 1504);
		do MemoryExt.poke(largeSpikes, 36, 1504);
		do MemoryExt.poke(largeSpikes, 35, 1504);
		do MemoryExt.poke(largeSpikes, 34, 1504);
		do MemoryExt.poke(largeSpikes, 33, 1504);
		do MemoryExt.poke(largeSpikes, 32, 1504);

		do MemoryExt.poke(largeSpikes, 63, 960);
		do MemoryExt.poke(largeSpikes, 62, 704);
		do MemoryExt.poke(largeSpikes, 61, 704);
		do MemoryExt.poke(largeSpikes, 60, 704);
		do MemoryExt.poke(largeSpikes, 59, 704);
		do MemoryExt.poke(largeSpikes, 58, 704);
		do MemoryExt.poke(largeSpikes, 57, 704);
		do MemoryExt.poke(largeSpikes, 56, 704);
		do MemoryExt.poke(largeSpikes, 55, 704);
		do MemoryExt.poke(largeSpikes, 54, 704);
		do MemoryExt.poke(largeSpikes, 53, 704);
		do MemoryExt.poke(largeSpikes, 52, 704);
		do MemoryExt.poke(largeSpikes, 51, 704);
		do MemoryExt.poke(largeSpikes, 50, 704);
		do MemoryExt.poke(largeSpikes, 49, 704);
		do MemoryExt.poke(largeSpikes, 48, 704);

		do MemoryExt.poke(largeSpikes, 79, 384);
		do MemoryExt.poke(largeSpikes, 78, 384);
		do MemoryExt.poke(largeSpikes, 77, 384);
		do MemoryExt.poke(largeSpikes, 76, 384);
		do MemoryExt.poke(largeSpikes, 75, 384);
		do MemoryExt.poke(largeSpikes, 74, 384);
		do MemoryExt.poke(largeSpikes, 73, 384);
		do MemoryExt.poke(largeSpikes, 72, 384);
		do MemoryExt.poke(largeSpikes, 71, 384);
		do MemoryExt.poke(largeSpikes, 70, 384);
		do MemoryExt.poke(largeSpikes, 69, 384);
		do MemoryExt.poke(largeSpikes, 68, 384);
		do MemoryExt.poke(largeSpikes, 67, 384);
		do MemoryExt.poke(largeSpikes, 66, 384);
		do MemoryExt.poke(largeSpikes, 65, 384);
		do MemoryExt.poke(largeSpikes, 64, 384);

		// SPIKED AREA
		do MemoryExt.poke(spikedArea, 15, 2320);
		do MemoryExt.poke(spikedArea, 14, 2320);
		do MemoryExt.poke(spikedArea, 13, 2320);
		do MemoryExt.poke(spikedArea, 12, 2728);
		do MemoryExt.poke(spikedArea, 11, 5800);
		do MemoryExt.poke(spikedArea, 10, 15212);
		do MemoryExt.poke(spikedArea, 9, 14172);
		do MemoryExt.poke(spikedArea, 8, 14172);
		do MemoryExt.poke(spikedArea, 7, 30580);
		do MemoryExt.poke(spikedArea, 6, 32746);
		do MemoryExt.poke(spikedArea, 5, 24042);
		do MemoryExt.poke(spikedArea, 4, 24042);
		do MemoryExt.poke(spikedArea, 3, -9515);
		do MemoryExt.poke(spikedArea, 2, -17674);
		do MemoryExt.poke(spikedArea, 1, -18578);
		do MemoryExt.poke(spikedArea, 0, -2193);

		return;
	}

	method void resetObject()
	{
		let X = 0;
		let Y = 0;
		let Type = 0;
		let Height = 0;
		let heightInBlocks = 0;
		let Size = 0;
		let memAddress = 0;
		return;
	}

	method void dispose()
    {
		do resetObject();

        do Memory.deAlloc(this);
        return;
    }
	
}