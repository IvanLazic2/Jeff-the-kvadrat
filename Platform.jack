// 0 - simple ground platform
// 1 - simple platform
// 2 - stone platform
// 3 - brick1 platform
// 4 - brick2 platform
// 5 - robotic platform
// 6 - small stone platform
// 7 - small brick1 platform
// 8 - small brick2 platform
// 9 - small robotic platform


class Platform
{
    field int X;
    field int Y;
    field int Size;
	field int Type;
    
    field int memAddress;

	static Array simpleGround;
	static Array stone;
	static Array brick1;
	static Array brick2;
	static Array robotic;
	static Array simple;
	static Array stoneSmall;
	static Array brick1Small;
	static Array brick2Small;
	static Array roboticSmall;
	
    constructor Platform new(int x, int y, int type, int size)
    {
        let X = x;
        let Y = y;

		let Type = type;
        let Size = size;

		let memAddress = Constants.getMemAddress(X, Y);

        return this;
    }

    method int getX() { return X; }
    method int getY() { return Y; }
    method int getSize() { return Size; }
	method int getType() { return Type; }

    // TO DO
    method void set_moving()
    {

        return;
    }

	method void ClearScrollLeft()
	{
		let X = X - 1;
		let memAddress = memAddress - 1;
		do Clear(memAddress + Size, X + Size);

		return;
	}

	method void DrawScrollLeft()
	{
        do Platform.DrawBlock(Type, memAddress, X, Y);
		return;
	}


	method void ClearScrollRight()
	{
        do Clear(memAddress, X);

		return;
	}

	method void DrawScrollRight()
	{		
		do Platform.DrawBlock(Type, memAddress + Size, X + Size, Y);
		let X = X + 1;
		let memAddress = memAddress + 1;

		return;
	}

	method void Clear(int memAddress, int X)
	{
		do Sprite.Draw(memAddress, simpleGround, 16, 1, 1, false, X, Y);
		return;
	}

	method void Draw()
    {
        var int i;
		var int tempMemAddress;

		let tempMemAddress = memAddress;

        while (i < Size)
        {
            do Platform.DrawBlock(Type, tempMemAddress, X + i, Y);

            let i = i + 1;
			let tempMemAddress = tempMemAddress + 1;
        }

        return;
    }

	function void DrawBlock(int Type, int memAddress, int X, int Y)
	{
		if (Type = 0)
		{
			do Sprite.Draw(memAddress, simpleGround, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 1) 
		{
			do Sprite.Draw(memAddress, simple, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 2)
		{
			do Sprite.Draw(memAddress, stone, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 3)
		{
			do Sprite.Draw(memAddress, brick1, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 4)
		{
			do Sprite.Draw(memAddress, brick2, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 5)
		{
			do Sprite.Draw(memAddress, robotic, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 6)
		{
			do Sprite.Draw(memAddress, stoneSmall, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 7)
		{
			do Sprite.Draw(memAddress, brick1Small, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 8)
		{
			do Sprite.Draw(memAddress, brick2Small, 16, 1, 1, true, X, Y);
		}
		else { if (Type = 9)
		{
			do Sprite.Draw(memAddress, roboticSmall, 16, 1, 1, true, X, Y);
		}}}}}}}}}}

		return;
	}

	function void init()
	{
		let simpleGround = Array.new(16);
		let stone = Array.new(16);
		let brick1 = Array.new(16);
		let brick2 = Array.new(16);
		let robotic = Array.new(16);
		let simple = Array.new(16);
		let stoneSmall = Array.new(16);
		let brick1Small = Array.new(16);
		let brick2Small = Array.new(16);
		let roboticSmall = Array.new(16);

		let simpleGround[0] = -1;
		let simpleGround[1] = -32767;
		let simpleGround[2] = -32767;
		let simpleGround[3] = -32767;
		let simpleGround[4] = -32767;
		let simpleGround[5] = -32767;
		let simpleGround[6] = -32767;
		let simpleGround[7] = -32767;
		let simpleGround[8] = -32767;
		let simpleGround[9] = -32767;
		let simpleGround[10] = -32767;
		let simpleGround[11] = -32767;
		let simpleGround[12] = -32767;
		let simpleGround[13] = -32767;
		let simpleGround[14] = -32767;
		let simpleGround[15] = -1;

		let stone[15] = -1;
		let stone[14] = -16189;
		let stone[13] = -3227;
		let stone[12] = -25043;
		let stone[11] = -31703;
		let stone[10] = -1063;
		let stone[9] = -28411;
		let stone[8] = -30523;
		let stone[7] = -30917;
		let stone[6] = -30655;
		let stone[5] = -28511;
		let stone[4] = -4327;
		let stone[3] = -28633;
		let stone[2] = -29631;
		let stone[1] = -32191;
		let stone[0] = -1;

		let brick1[15] = -1;
		let brick1[14] = -32751;
		let brick1[13] = -32751;
		let brick1[12] = -32751;
		let brick1[11] = -32751;
		let brick1[10] = -1;
		let brick1[9] = -30719;
		let brick1[8] = -30719;
		let brick1[7] = -30719;
		let brick1[6] = -30719;
		let brick1[5] = -1;
		let brick1[4] = -32703;
		let brick1[3] = -32703;
		let brick1[2] = -32703;
		let brick1[1] = -32703;
		let brick1[0] = -1;

		let brick2[15] = -1;
		let brick2[14] = -32767;
		let brick2[13] = -32767;
		let brick2[12] = -32767;
		let brick2[11] = -28687;
		let brick2[10] = -30703;
		let brick2[9] = -30703;
		let brick2[8] = -30703;
		let brick2[7] = -30703;
		let brick2[6] = -30703;
		let brick2[5] = -30703;
		let brick2[4] = -28687;
		let brick2[3] = -32767;
		let brick2[2] = -32767;
		let brick2[1] = -32767;
		let brick2[0] = -1;

		let robotic[15] = -1;
		let robotic[14] = -16375;
		let robotic[13] = -24559;
		let robotic[12] = -26845;
		let robotic[11] = -30651;
		let robotic[10] = -27703;
		let robotic[9] = -27215;
		let robotic[8] = -27039;
		let robotic[7] = -31127;
		let robotic[6] = -29271;
		let robotic[5] = -27703;
		let robotic[4] = -24047;
		let robotic[3] = -15127;
		let robotic[2] = -30715;
		let robotic[1] = -28669;
		let robotic[0] = -1;

		let simple[15] = -1;
		let simple[14] = -32767;
		let simple[13] = -32767;
		let simple[12] = -32767;
		let simple[11] = -32767;
		let simple[10] = -1;

		let stoneSmall[15] = -1;
		let stoneSmall[14] = -28655;
		let stoneSmall[13] = -28655;
		let stoneSmall[12] = -30611;
		let stoneSmall[11] = -26937;
		let stoneSmall[10] = -5855;
		let stoneSmall[9] = -31711;
		let stoneSmall[8] = -30703;
		let stoneSmall[7] = -1;

		let brick1Small[15] = -1;
		let brick1Small[14] = -32751;
		let brick1Small[13] = -32751;
		let brick1Small[12] = -32751;
		let brick1Small[11] = -1;
		let brick1Small[10] = -32255;
		let brick1Small[9] = -32255;
		let brick1Small[8] = -32255;
		let brick1Small[7] = -1;

		let brick2Small[15] = -1;
		let brick2Small[14] = -32767;
		let brick2Small[13] = -32767;
		let brick2Small[12] = -16387;
		let brick2Small[11] = -24571;
		let brick2Small[10] = -16387;
		let brick2Small[9] = -32767;
		let brick2Small[8] = -32767;
		let brick2Small[7] = -1;

		let roboticSmall[15] = -1;
		let roboticSmall[14] = -4081;
		let roboticSmall[13] = -29071;
		let roboticSmall[12] = -3697;
		let roboticSmall[11] = -32191;
		let roboticSmall[10] = -3697;
		let roboticSmall[9] = -29071;
		let roboticSmall[8] = -4081;
		let roboticSmall[7] = -1;

		return;
	}

	method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }
}