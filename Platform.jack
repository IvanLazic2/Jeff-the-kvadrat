// 0 - simple ground platform
// 1 - simple platform - TO DO

class Platform
{
    field int x;
    field int y;
    field int size;
	field int type;
    field int location;
    
    field int memAddress;


    constructor Platform new(int x2, int y2, int type2, int size2)
    {
        let x = x2;
        let y = y2;
        let location = (y * 32) + x;

		let type = type2;
        let size = size2;
		
        do Draw();

        return this;

    }

    method int get_x() { return x; }
    method int get_y() { return y; }
    method int get_size() { return size; }
	method int get_type() { return type; }

    // TO DO
    method void set_moving()
    {

        return;
    }

	method void ClearScrollLeft()
	{
		let x = x - 1;

		if ((x + size < 32) & (x + size > -1))
        {
            let location = (y * 32) + x;
            let memAddress = 16384 + location + size;

            do Memory.poke(memAddress + 0, 0);
	        do Memory.poke(memAddress + 32, 0);
	        do Memory.poke(memAddress + 64, 0);
	        do Memory.poke(memAddress + 96, 0);
	        do Memory.poke(memAddress + 128, 0);
	        do Memory.poke(memAddress + 160, 0);
	        do Memory.poke(memAddress + 192, 0);
	        do Memory.poke(memAddress + 224, 0);
	        do Memory.poke(memAddress + 256, 0);
	        do Memory.poke(memAddress + 288, 0);
	        do Memory.poke(memAddress + 320, 0);
	        do Memory.poke(memAddress + 352, 0);
	        do Memory.poke(memAddress + 384, 0);
	        do Memory.poke(memAddress + 416, 0);
	        do Memory.poke(memAddress + 448, 0);
    	    do Memory.poke(memAddress + 480, 0);
        }
		return;
	}

	method void DrawScrollLeft()
	{
		if ((x < 32) & (x > -1))
        {
            let location = (y * 32) + x;
            let memAddress = 16384 + location;

            do Memory.poke(memAddress + 0, -1);
	        do Memory.poke(memAddress + 32, -32767);
	        do Memory.poke(memAddress + 64, -32767);
	        do Memory.poke(memAddress + 96, -32767);
	        do Memory.poke(memAddress + 128, -32767);
	        do Memory.poke(memAddress + 160, -32767);
	        do Memory.poke(memAddress + 192, -32767);
	        do Memory.poke(memAddress + 224, -32767);
	        do Memory.poke(memAddress + 256, -32767);
	        do Memory.poke(memAddress + 288, -32767);
	        do Memory.poke(memAddress + 320, -32767);
	        do Memory.poke(memAddress + 352, -32767);
	        do Memory.poke(memAddress + 384, -32767);
	        do Memory.poke(memAddress + 416, -32767);
	        do Memory.poke(memAddress + 448, -32767);
    	    do Memory.poke(memAddress + 480, -1);
        }

		return;
	}

    method void ScrollLeft()
    {
        let x = x - 1;

        if ((x + size < 32) & (x + size > -1))
        {
            let location = (y * 32) + x;
            let memAddress = 16384 + location + size;

            do Memory.poke(memAddress + 0, 0);
	        do Memory.poke(memAddress + 32, 0);
	        do Memory.poke(memAddress + 64, 0);
	        do Memory.poke(memAddress + 96, 0);
	        do Memory.poke(memAddress + 128, 0);
	        do Memory.poke(memAddress + 160, 0);
	        do Memory.poke(memAddress + 192, 0);
	        do Memory.poke(memAddress + 224, 0);
	        do Memory.poke(memAddress + 256, 0);
	        do Memory.poke(memAddress + 288, 0);
	        do Memory.poke(memAddress + 320, 0);
	        do Memory.poke(memAddress + 352, 0);
	        do Memory.poke(memAddress + 384, 0);
	        do Memory.poke(memAddress + 416, 0);
	        do Memory.poke(memAddress + 448, 0);
    	    do Memory.poke(memAddress + 480, 0);
        }

        if ((x < 32) & (x > -1))
        {
            let location = (y * 32) + x;
            let memAddress = 16384 + location;

            do Memory.poke(memAddress + 0, -1);
	        do Memory.poke(memAddress + 32, -32767);
	        do Memory.poke(memAddress + 64, -32767);
	        do Memory.poke(memAddress + 96, -32767);
	        do Memory.poke(memAddress + 128, -32767);
	        do Memory.poke(memAddress + 160, -32767);
	        do Memory.poke(memAddress + 192, -32767);
	        do Memory.poke(memAddress + 224, -32767);
	        do Memory.poke(memAddress + 256, -32767);
	        do Memory.poke(memAddress + 288, -32767);
	        do Memory.poke(memAddress + 320, -32767);
	        do Memory.poke(memAddress + 352, -32767);
	        do Memory.poke(memAddress + 384, -32767);
	        do Memory.poke(memAddress + 416, -32767);
	        do Memory.poke(memAddress + 448, -32767);
    	    do Memory.poke(memAddress + 480, -1);
        }

        return;
    }

	method void ClearScrollRight()
	{
		if ((x < 32) & (x > -1))
        {
            let location = (y * 32) + x;
            let memAddress = 16384 + location;

            do Memory.poke(memAddress + 0, 0);
	        do Memory.poke(memAddress + 32, 0);
	        do Memory.poke(memAddress + 64, 0);
	        do Memory.poke(memAddress + 96, 0);
	        do Memory.poke(memAddress + 128, 0);
	        do Memory.poke(memAddress + 160, 0);
	        do Memory.poke(memAddress + 192, 0);
	        do Memory.poke(memAddress + 224, 0);
	        do Memory.poke(memAddress + 256, 0);
	        do Memory.poke(memAddress + 288, 0);
	        do Memory.poke(memAddress + 320, 0);
	        do Memory.poke(memAddress + 352, 0);
	        do Memory.poke(memAddress + 384, 0);
	        do Memory.poke(memAddress + 416, 0);
	        do Memory.poke(memAddress + 448, 0);
    	    do Memory.poke(memAddress + 480, 0);
        }

		let x = x + 1;

		return;
	}

	method void DrawScrollRight()
	{
		if ((x + size < 33) & (x + size > 0)) // (x + size - 1 < 32) & (x + size - 1 > -1)
        {
            let location = (y * 32) + x;
            let memAddress = 16383 + location + size; // 16384 + location + size - 1

            do Memory.poke(memAddress + 0, -1);
	        do Memory.poke(memAddress + 32, -32767);
	        do Memory.poke(memAddress + 64, -32767);
	        do Memory.poke(memAddress + 96, -32767);
	        do Memory.poke(memAddress + 128, -32767);
	        do Memory.poke(memAddress + 160, -32767);
	        do Memory.poke(memAddress + 192, -32767);
	        do Memory.poke(memAddress + 224, -32767);
	        do Memory.poke(memAddress + 256, -32767);
	        do Memory.poke(memAddress + 288, -32767);
	        do Memory.poke(memAddress + 320, -32767);
	        do Memory.poke(memAddress + 352, -32767);
	        do Memory.poke(memAddress + 384, -32767);
	        do Memory.poke(memAddress + 416, -32767);
	        do Memory.poke(memAddress + 448, -32767);
    	    do Memory.poke(memAddress + 480, -1);
        }

		return;
	}

    method void ScrollRight()
    {
        if ((x < 32) & (x > -1))
        {
            let location = (y * 32) + x;
            let memAddress = 16384 + location;

            do Memory.poke(memAddress + 0, 0);
	        do Memory.poke(memAddress + 32, 0);
	        do Memory.poke(memAddress + 64, 0);
	        do Memory.poke(memAddress + 96, 0);
	        do Memory.poke(memAddress + 128, 0);
	        do Memory.poke(memAddress + 160, 0);
	        do Memory.poke(memAddress + 192, 0);
	        do Memory.poke(memAddress + 224, 0);
	        do Memory.poke(memAddress + 256, 0);
	        do Memory.poke(memAddress + 288, 0);
	        do Memory.poke(memAddress + 320, 0);
	        do Memory.poke(memAddress + 352, 0);
	        do Memory.poke(memAddress + 384, 0);
	        do Memory.poke(memAddress + 416, 0);
	        do Memory.poke(memAddress + 448, 0);
    	    do Memory.poke(memAddress + 480, 0);
        }

        let x = x + 1;

        if ((x + size < 33) & (x + size > 0)) // (x + size - 1 < 32) & (x + size - 1 > -1)
        {
            let location = (y * 32) + x;
            let memAddress = 16383 + location + size; // 16384 + location + size - 1

            do Memory.poke(memAddress + 0, -1);
	        do Memory.poke(memAddress + 32, -32767);
	        do Memory.poke(memAddress + 64, -32767);
	        do Memory.poke(memAddress + 96, -32767);
	        do Memory.poke(memAddress + 128, -32767);
	        do Memory.poke(memAddress + 160, -32767);
	        do Memory.poke(memAddress + 192, -32767);
	        do Memory.poke(memAddress + 224, -32767);
	        do Memory.poke(memAddress + 256, -32767);
	        do Memory.poke(memAddress + 288, -32767);
	        do Memory.poke(memAddress + 320, -32767);
	        do Memory.poke(memAddress + 352, -32767);
	        do Memory.poke(memAddress + 384, -32767);
	        do Memory.poke(memAddress + 416, -32767);
	        do Memory.poke(memAddress + 448, -32767);
    	    do Memory.poke(memAddress + 480, -1);
        }

        return;
    }

    method void Draw()
    {
        var int i;

		let location = (y * 32) + x;

        while (i < size)
        {
            if (((x + i) < 32) & ((x + i) > -1))
            {
                //let location = (y * 32) + x;
                let memAddress = 16384 + location + i;

                do Memory.poke(memAddress + 0, -1);
	            do Memory.poke(memAddress + 32, -32767);
	            do Memory.poke(memAddress + 64, -32767);
	            do Memory.poke(memAddress + 96, -32767);
	            do Memory.poke(memAddress + 128, -32767);
	            do Memory.poke(memAddress + 160, -32767);
	            do Memory.poke(memAddress + 192, -32767);
	            do Memory.poke(memAddress + 224, -32767);
	            do Memory.poke(memAddress + 256, -32767);
	            do Memory.poke(memAddress + 288, -32767);
	            do Memory.poke(memAddress + 320, -32767);
	            do Memory.poke(memAddress + 352, -32767);
	            do Memory.poke(memAddress + 384, -32767);
	            do Memory.poke(memAddress + 416, -32767);
	            do Memory.poke(memAddress + 448, -32767);
    	        do Memory.poke(memAddress + 480, -1);
            }

            let i = i + 1;
        }

        return;
    }
}