// 0 - simple ground platform

// 2 - stone platform
// 3 - brick1 platform
// 4 - brick2 platform
// 5 - robotic platform

// 1 - simple platform

// 6 - small stone platform
// 7 - small brick1 platform
// 8 - small brick2 platform
// 9 - small robotic platform


class Platform
{
    field int X;
    field int Y;
    field int Size;
	field int Type;
    
    field int memAddress;

	static Array simpleGround;
	static Array stone;
	static Array brick1;
	static Array brick2;
	static Array robotic;
	static Array simple;
	static Array stoneSmall;
	static Array brick1Small;
	static Array brick2Small;
	static Array roboticSmall;
	
    constructor Platform new(int x, int y, int type, int size)
    {
		do resetObject();

        let X = x;
        let Y = y;

		let Type = type;
        let Size = size;

		let memAddress = Constants.getMemAddress(X, Y);

        return this;
    }

    method int getX() { return X; }
    method int getY() { return Y; }
    method int getSize() { return Size; }
	method int getType() { return Type; }

    // TO DO
    method void set_moving()
    {

        return;
    }

	method void ClearScrollLeft()
	{
		let X = X - 1;
		let memAddress = memAddress - 1;
		do Clear(memAddress + Size, X + Size);

		return;
	}

	method void DrawScrollLeft()
	{
        do Platform.DrawBlock(Type, memAddress, X, Y);
		return;
	}


	method void ClearScrollRight()
	{
        do Clear(memAddress, X);

		return;
	}

	method void DrawScrollRight()
	{		
		do Platform.DrawBlock(Type, memAddress + Size, X + Size, Y);
		let X = X + 1;
		let memAddress = memAddress + 1;

		return;
	}

	method void Clear(int memAddress, int x)
	{
		//do Sprite.Draw(memAddress, simpleGround, 16, 1, 1, false, X, Y);

		if (((-1 < x) & (x < 32)))
		{
			do Memory.poke(memAddress, 0);
			do Memory.poke(memAddress + 32, 0);
			do Memory.poke(memAddress + 64, 0);
			do Memory.poke(memAddress + 96, 0);
			do Memory.poke(memAddress + 128, 0);
			do Memory.poke(memAddress + 160, 0);
			do Memory.poke(memAddress + 192, 0);
			do Memory.poke(memAddress + 224, 0);
			do Memory.poke(memAddress + 256, 0);
			do Memory.poke(memAddress + 288, 0);
			do Memory.poke(memAddress + 320, 0);
			do Memory.poke(memAddress + 352, 0);
			do Memory.poke(memAddress + 384, 0);
			do Memory.poke(memAddress + 416, 0);
			do Memory.poke(memAddress + 448, 0);
			do Memory.poke(memAddress + 480, 0);
		}
		
		return;
	}

	method void Draw()
    {
        var int i;
		var int tempMemAddress;

		let tempMemAddress = memAddress;

        while (i < Size)
        {
            do Platform.DrawBlock(Type, tempMemAddress, X + i, Y);

            let i = i + 1;
			let tempMemAddress = tempMemAddress + 1;
        }

        return;
    }

	function void DrawBlock(int Type, int memAddress, int X, int Y)
	{
		if (Type = 0)
		{
			do Sprite.Draw(memAddress, simpleGround, 16, 1, 1, X, Y);
		}
		else { if (Type = 1) 
		{
			do Sprite.Draw(memAddress, simple, 16, 1, 1, X, Y);
		}
		else { if (Type = 2)
		{
			do Sprite.Draw(memAddress, stone, 16, 1, 1, X, Y);
		}
		else { if (Type = 3)
		{
			do Sprite.Draw(memAddress, brick1, 16, 1, 1, X, Y);
		}
		else { if (Type = 4)
		{
			do Sprite.Draw(memAddress, brick2, 16, 1, 1, X, Y);
		}
		else { if (Type = 5)
		{
			do Sprite.Draw(memAddress, robotic, 16, 1, 1, X, Y);
		}
		else { if (Type = 6)
		{
			do Sprite.Draw(memAddress, stoneSmall, 16, 1, 1, X, Y);
		}
		else { if (Type = 7)
		{
			do Sprite.Draw(memAddress, brick1Small, 16, 1, 1, X, Y);
		}
		else { if (Type = 8)
		{
			do Sprite.Draw(memAddress, brick2Small, 16, 1, 1, X, Y);
		}
		else { if (Type = 9)
		{
			do Sprite.Draw(memAddress, roboticSmall, 16, 1, 1, X, Y);
		}}}}}}}}}}

		return;
	}

	function void init()
	{
		let simpleGround = Array.new(16);
		let stone = Array.new(16);
		let brick1 = Array.new(16);
		let brick2 = Array.new(16);
		let robotic = Array.new(16);
		let simple = Array.new(16);
		let stoneSmall = Array.new(16);
		let brick1Small = Array.new(16);
		let brick2Small = Array.new(16);
		let roboticSmall = Array.new(16);

		do MemoryExt.poke(simpleGround, 0, -1);
		do MemoryExt.poke(simpleGround, 1, -32767);
		do MemoryExt.poke(simpleGround, 2, -32767);
		do MemoryExt.poke(simpleGround, 3, -32767);
		do MemoryExt.poke(simpleGround, 4, -32767);
		do MemoryExt.poke(simpleGround, 5, -32767);
		do MemoryExt.poke(simpleGround, 6, -32767);
		do MemoryExt.poke(simpleGround, 7, -32767);
		do MemoryExt.poke(simpleGround, 8, -32767);
		do MemoryExt.poke(simpleGround, 9, -32767);
		do MemoryExt.poke(simpleGround, 10, -32767);
		do MemoryExt.poke(simpleGround, 11, -32767);
		do MemoryExt.poke(simpleGround, 12, -32767);
		do MemoryExt.poke(simpleGround, 13, -32767);
		do MemoryExt.poke(simpleGround, 14, -32767);
		do MemoryExt.poke(simpleGround, 15, -1);

		do MemoryExt.poke(stone, 15, -1);
		do MemoryExt.poke(stone, 14, -16189);
		do MemoryExt.poke(stone, 13, -3227);
		do MemoryExt.poke(stone, 12, -25043);
		do MemoryExt.poke(stone, 11, -31703);
		do MemoryExt.poke(stone, 10, -1063);
		do MemoryExt.poke(stone, 9, -28411);
		do MemoryExt.poke(stone, 8, -30523);
		do MemoryExt.poke(stone, 7, -30917);
		do MemoryExt.poke(stone, 6, -30655);
		do MemoryExt.poke(stone, 5, -28511);
		do MemoryExt.poke(stone, 4, -4327);
		do MemoryExt.poke(stone, 3, -28633);
		do MemoryExt.poke(stone, 2, -29631);
		do MemoryExt.poke(stone, 1, -32191);
		do MemoryExt.poke(stone, 0, -1);

		do MemoryExt.poke(brick1, 15, -1);
		do MemoryExt.poke(brick1, 14, -32751);
		do MemoryExt.poke(brick1, 13, -32751);
		do MemoryExt.poke(brick1, 12, -32751);
		do MemoryExt.poke(brick1, 11, -32751);
		do MemoryExt.poke(brick1, 10, -1);
		do MemoryExt.poke(brick1, 9, -30719);
		do MemoryExt.poke(brick1, 8, -30719);
		do MemoryExt.poke(brick1, 7, -30719);
		do MemoryExt.poke(brick1, 6, -30719);
		do MemoryExt.poke(brick1, 5, -1);
		do MemoryExt.poke(brick1, 4, -32703);
		do MemoryExt.poke(brick1, 3, -32703);
		do MemoryExt.poke(brick1, 2, -32703);
		do MemoryExt.poke(brick1, 1, -32703);
		do MemoryExt.poke(brick1, 0, -1);

		do MemoryExt.poke(brick2, 15, -1);
		do MemoryExt.poke(brick2, 14, -32767);
		do MemoryExt.poke(brick2, 13, -32767);
		do MemoryExt.poke(brick2, 12, -32767);
		do MemoryExt.poke(brick2, 11, -28687);
		do MemoryExt.poke(brick2, 10, -30703);
		do MemoryExt.poke(brick2, 9, -30703);
		do MemoryExt.poke(brick2, 8, -30703);
		do MemoryExt.poke(brick2, 7, -30703);
		do MemoryExt.poke(brick2, 6, -30703);
		do MemoryExt.poke(brick2, 5, -30703);
		do MemoryExt.poke(brick2, 4, -28687);
		do MemoryExt.poke(brick2, 3, -32767);
		do MemoryExt.poke(brick2, 2, -32767);
		do MemoryExt.poke(brick2, 1, -32767);
		do MemoryExt.poke(brick2, 0, -1);

		do MemoryExt.poke(robotic, 15, -1);
		do MemoryExt.poke(robotic, 14, -16375);
		do MemoryExt.poke(robotic, 13, -24559);
		do MemoryExt.poke(robotic, 12, -26845);
		do MemoryExt.poke(robotic, 11, -30651);
		do MemoryExt.poke(robotic, 10, -27703);
		do MemoryExt.poke(robotic, 9 , -27215);
		do MemoryExt.poke(robotic, 8 , -27039);
		do MemoryExt.poke(robotic, 7 , -31127);
		do MemoryExt.poke(robotic, 6 , -29271);
		do MemoryExt.poke(robotic, 5 , -27703);
		do MemoryExt.poke(robotic, 4 , -24047);
		do MemoryExt.poke(robotic, 3 , -15127);
		do MemoryExt.poke(robotic, 2 , -30715);
		do MemoryExt.poke(robotic, 1 , -28669);
		do MemoryExt.poke(robotic, 0 , -1);

		do MemoryExt.poke(simple, 15, -1);
		do MemoryExt.poke(simple, 14, -32767);
		do MemoryExt.poke(simple, 13, -32767);
		do MemoryExt.poke(simple, 12, -32767);
		do MemoryExt.poke(simple, 11, -32767);
		do MemoryExt.poke(simple, 10, -1);

		do MemoryExt.poke(stoneSmall, 15, -1);
		do MemoryExt.poke(stoneSmall, 14, -28655);
		do MemoryExt.poke(stoneSmall, 13, -28655);
		do MemoryExt.poke(stoneSmall, 12, -30611);
		do MemoryExt.poke(stoneSmall, 11, -26937);
		do MemoryExt.poke(stoneSmall, 10, -5855);
		do MemoryExt.poke(stoneSmall, 9, -31711);
		do MemoryExt.poke(stoneSmall, 8, -30703);
		do MemoryExt.poke(stoneSmall, 7, -1);

		do MemoryExt.poke(brick1Small, 15, -1);
		do MemoryExt.poke(brick1Small, 14, -32751);
		do MemoryExt.poke(brick1Small, 13, -32751);
		do MemoryExt.poke(brick1Small, 12, -32751);
		do MemoryExt.poke(brick1Small, 11, -1);
		do MemoryExt.poke(brick1Small, 10, -32255);
		do MemoryExt.poke(brick1Small, 9, -32255);
		do MemoryExt.poke(brick1Small, 8, -32255);
		do MemoryExt.poke(brick1Small, 7, -1);

		do MemoryExt.poke(brick2Small, 15, -1);
		do MemoryExt.poke(brick2Small, 14, -32767);
		do MemoryExt.poke(brick2Small, 13, -32767);
		do MemoryExt.poke(brick2Small, 12, -16387);
		do MemoryExt.poke(brick2Small, 11, -24571);
		do MemoryExt.poke(brick2Small, 10, -16387);
		do MemoryExt.poke(brick2Small, 9, -32767);
		do MemoryExt.poke(brick2Small, 8, -32767);
		do MemoryExt.poke(brick2Small, 7, -1);

		do MemoryExt.poke(roboticSmall, 15, -1);
		do MemoryExt.poke(roboticSmall, 14, -4081);
		do MemoryExt.poke(roboticSmall, 13, -29071);
		do MemoryExt.poke(roboticSmall, 12, -3697);
		do MemoryExt.poke(roboticSmall, 11, -32191);
		do MemoryExt.poke(roboticSmall, 10, -3697);
		do MemoryExt.poke(roboticSmall, 9, -29071);
		do MemoryExt.poke(roboticSmall, 8, -4081);
		do MemoryExt.poke(roboticSmall, 7, -1);

		return;
	}

	method void resetObject()
	{
		let X = 0;
    	let Y = 0;
    	let Size = 0;
		let Type = 0;
    	let memAddress = 0;
		return;
	}

	method void dispose()
    {
		do resetObject();

        do Memory.deAlloc(this);
        return;
    }
}