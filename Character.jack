// 16384 + 8192 = 24576

class Character
{
    field int x;
    field int y;
    field int absolute_x;
    field int location;
    field int width;
    field int height;
    field int direction;
    field int forceY;
    field int gravity;
    field int jump_height;
    field int jump_height_const;
    field int jump_compensation_const;
    field bool can_jump;

    field int lastlocation;
    field int memAddress;

    field int widthdiv16;

    field int health;

    field Obstacle last_obstacle;
    field bool should_draw_last_obstacle;

    field int damage_timer;
    field int damage_cooldown;

    field int last_abs_x;

    field bool draw_character_left;





    field int animationFrameCount;
	field int currFrame;

    field bool playSpecificFrame;
    field int idleFrame; // = 2

    field int animationDelay;
	field int animationTimer;



    field int HeightInPixels;





    field Array Bullets;
    field int BulletsCount;
    field int AvailableBulletsCount;
    field int currBulletIndex;
    field Bullet currBullet;

    field int bulletTimer;
    field int bulletDelay;

    field bool canShoot;

    

    constructor Character new(int x2, int y2)
    {
        var int i;

        let x = x2;
        let y = y2;
        let location = (y * 32) + x;
        let absolute_x = x2;

        let width = 3; // 3
        let height = 2; // 32

        //let widthdiv16 = width / 16;

        //let forceY = 0;
        let gravity = 6; // 6
        let can_jump = false;
        let jump_height = 35; // 30, 35
        let jump_height_const = 5; //20
        let jump_compensation_const = 4;

        let health = 3;
        let damage_cooldown = 20; // 20 game ticks


        let animationTimer = animationDelay;

        let HeightInPixels = height * 16;


        let BulletsCount = 5;
        let AvailableBulletsCount = BulletsCount;
        let Bullets = Array.new(BulletsCount);
        while (i < BulletsCount)
        {
            let Bullets[i] = Bullet.new(-10, -10);
            let i = i + 1;
        }
        let currBullet = Bullets[currBulletIndex];

        let bulletDelay = 10;
        let bulletTimer = bulletDelay;

        let canShoot = true;

        let lastlocation = location;

        do Draw();

        return this;
    }

    method int get_x() { return x; }

    method int get_y() { return y; }

    method int getWidth() { return width; }
    method int getHeight() { return HeightInPixels; }

    method int get_absolute_x() { return absolute_x; }

    method Obstacle get_last_obstacle() { return last_obstacle; }

    method bool get_should_draw_last_obstacle(){ return should_draw_last_obstacle; }

    method int get_last_abs_x() { return last_abs_x; }

    method void set_x(int x2)
    {
        let x = x2;
        return;
    }

    method void set_y(int y2)
    {
        let y = y2;
        return;
    }

    method void set_absolute_x(int abs_x)
    {
        let absolute_x = abs_x;
        return;
    }

    method void set_should_draw_last_obstacle(bool s)
    {
        let should_draw_last_obstacle = s;
        return;
    }

    method void increment_absolute_x(int inc)
    {
        let absolute_x = absolute_x + inc;
        return;
    }

    method void set_draw_character_left(bool b)
    {
        let draw_character_left = b;
        return;
    }



    
    method void CheckTimers()
	{
		//if (animationTimer < 1)
		//{
		//	do ChangeFrame();
		//	let animationTimer = animationDelay;
		//}

        

        if (bulletTimer < 1)
        {
            let canShoot = true;
            let bulletTimer = bulletDelay;
        }

        do currBullet.CheckTimers();

		return;
	}

	method void DecrementTimers()
	{
		//let animationTimer = animationTimer - 1;
        let bulletTimer = bulletTimer - 1;

        do currBullet.DecrementTimers();

		return;
	}


	//method void ChangeFrame()
	//{
	//	if (currFrame < (animationFrameCount - 1))
	//	{
	//		let currFrame = currFrame + 1;
	//	}
	//	else
	//	{
	//		let currFrame = 0;
	//	}
//
	//	return;
	//}




    method void RedrawPlatforms(Array map, int mapWidth, int mapHeight, int worldOffset)
    {
        do Collision.RedrawPlatforms(map, mapWidth, mapHeight, x, y, width, height, worldOffset);

        return;
    }

    method void RedrawObstacles(Array map, int mapWidth, int mapHeight, int worldOffset)
    {
        var int i;
        var int j;
        var int px;
        var int py;
        var int location;
        var int memAddress;
        var Array x_map;

        let i = absolute_x - 1;
        while (i < (absolute_x + width + 1))
        {
            let x_map = map[i];

            let j = (y / 16) - 2;
            while (j < (((y + height) / 16) + 1))
            //let j = 0; // TEMP
            //while (j < 16) // TEMP
            {
                if ((0 < x_map[j]) & (x_map[j] < 11))
                {
                    let location = (j * 16 * 32) + i - worldOffset;
		            let memAddress = 16384 + location;

                    do Platform.DrawBlock(0, x_map[j] - 1, memAddress);
                }

                let j = j + 1;
            }

            let i = i + 1;
        }

        return;
    }



    //method void RedrawPlatform2(Array platforms, int platforms_num, Array map, int mapWidth, int mapHeight)
    //{
    //    var int i;
    //    var int j;
    //    var int px;
    //    var int py;
    //    var int location;
    //    var int memAddress;
    //    var Array x_map;
//
    //    let i = absolute_x - 1;
    //    while (i < (absolute_x + width + 1))
    //    {
    //        let x_map = map[i];
//
    //        let j = y - 16;
    //        while (j < (y + height + 16))
    //        {
    //            if ((1 < x_map[j / 16]) & (x_map[j / 16] < 10))
    //            {
    //                //do Output.printString("a");
    //            }
//
    //            let j = j + 16;
    //        }
//
    //        let i = i + 1;
    //    }
//
    //    let i = absolute_x - 1;
    //    while (i < (absolute_x + width + 1))
    //    {
    //        let x_map = map[i];
//
    //        let j = 0;
    //        while (j < 16)
    //        {
    //            if ((1 < x_map[j]) & (x_map[j] < 10))
    //            {
    //                if((i < 32) & (i > -1))
    //                {
    //                    let location = (j * 16 * 32) + i;
	//	                let memAddress = 16384 + location;
    //                    do Memory.poke(memAddress + 0, -1);
	//                    do Memory.poke(memAddress + 32, -32767);
	//                    do Memory.poke(memAddress + 64, -32767);
	//                    do Memory.poke(memAddress + 96, -32767);
	//                    do Memory.poke(memAddress + 128, -32767);
	//                    do Memory.poke(memAddress + 160, -32767);
	//                    do Memory.poke(memAddress + 192, -32767);
	//                    do Memory.poke(memAddress + 224, -32767);
	//                    do Memory.poke(memAddress + 256, -32767);
	//                    do Memory.poke(memAddress + 288, -32767);
	//                    do Memory.poke(memAddress + 320, -32767);
	//                    do Memory.poke(memAddress + 352, -32767);
	//                    do Memory.poke(memAddress + 384, -32767);
	//                    do Memory.poke(memAddress + 416, -32767);
	//                    do Memory.poke(memAddress + 448, -32767);
    //	                do Memory.poke(memAddress + 480, -1);
    //                }
    //                
    //            }
//
    //            let j = j + 1;
    //        }
//
    //        let i = i + 1;
    //    }




        //let location = (py * 32) + px;
		//let memAddress = 16384 + location;
        //do Memory.poke(memAddress + 0, -1);
	    //do Memory.poke(memAddress + 32, -32767);
	    //do Memory.poke(memAddress + 64, -32767);
	    //do Memory.poke(memAddress + 96, -32767);
	    //do Memory.poke(memAddress + 128, -32767);
	    //do Memory.poke(memAddress + 160, -32767);
	    //do Memory.poke(memAddress + 192, -32767);
	    //do Memory.poke(memAddress + 224, -32767);
	    //do Memory.poke(memAddress + 256, -32767);
	    //do Memory.poke(memAddress + 288, -32767);
	    //do Memory.poke(memAddress + 320, -32767);
	    //do Memory.poke(memAddress + 352, -32767);
	    //do Memory.poke(memAddress + 384, -32767);
	    //do Memory.poke(memAddress + 416, -32767);
	    //do Memory.poke(memAddress + 448, -32767);
    	//do Memory.poke(memAddress + 480, -1);
        

       // return;
    //}


    //// PLATFORM COLLISION
    method bool check_right_collision_platforms(Array platforms, int platforms_num)
    {
        return Collision.CheckPlatformCollisionRight(platforms, platforms_num, x, y, width, height);
    }

    method bool check_right_collision_platforms2(Array map, int mapWidth, int mapHeight, int worldOffset)
    {
        //do Output.printInt(x);
        //do Output.printString(", ");
        //do Output.printInt(absolute_x);
        //do Output.println();

        return Collision.CheckAnyPlatformCollisionRight(x, y, width, height, map, mapWidth, mapHeight, worldOffset, forceY);
    }

    method bool check_left_collision_platforms(Array platforms, int platforms_num)
    {
        return Collision.CheckPlatformCollisionLeft(platforms, platforms_num, x, y, width, height);
    }

    method bool check_left_collision_platforms2(Array map, int mapWidth, int mapHeight, int worldOffset)
    {
        return Collision.CheckAnyPlatformCollisionLeft(x, y, width, height, map, mapWidth, mapHeight, worldOffset, forceY);
    }

    //// OBSTACLE COLLISION

    method void check_collision_obstacles2(Array map, int mapWidth, int mapHeight)
    {
        var int i;
        //var Obstacle obstacle;
        var bool result;


        let result = Collision.IsCollidedAnyObstacle(absolute_x, y, width, height, map, mapWidth, mapHeight);

        if (result)
        {
            //let last_obstacle = obstacle;
            let should_draw_last_obstacle = true;
            let last_abs_x = absolute_x;

            do TakeDamage();
            do Respawn();
        }

        if (damage_timer > 0)
        {
            let damage_timer = damage_timer - 1;
        }

        return;
    }

    method void check_collision_obstacles(Array obstacles, int obstacles_num)
    {
        var int i;
        var Obstacle obstacle;
        var bool result;

        while (i < obstacles_num)
        {
            let obstacle = obstacles[i];

            let result = Collision.IsCollidedObstacle(obstacle, x, y, width, height);

            if (result)
            {
                let i = obstacles_num - 1;
            }

            let i = i + 1;
        }

        if (result)
        {
            let last_obstacle = obstacle;
            let should_draw_last_obstacle = true;
            let last_abs_x = absolute_x;

            do TakeDamage();
            do Respawn();
        }

        if (damage_timer > 0)
        {
            let damage_timer = damage_timer - 1;
        }

        return;
    }
    
    //// MOVEMENT
    method void MoveLeft()
    {
        if (x > 0)
        {
            let lastlocation = location;

            let x = x - 1;
            let absolute_x = absolute_x - 1;
            let location = location - 1;

            do Clear();
            do Draw(); 
        }

        return;
    }

    method void MoveRight()
    {
        if((x + width) < 32)
        {
            let lastlocation = location;

            let x = x + 1;
            let absolute_x = absolute_x + 1;
            let location = location + 1;

            do Clear();
            do Draw(); 
        }


        return;

    }

    method void Jump()
    {
        let lastlocation = location;

        if (can_jump)
        {
            let forceY = forceY - jump_height;
        }

        return;
    }

    //method bool at_canvas_boundary()
    //{
    //    return ((y + height + forceY) > 254); //254
    //}

    //// GRAVITY




    method void check_gravity2(Array map, int mapWidth, int mapHeight, int worldOffset)
    {
        var int i;
        var Platform platform;
        var Section section;
        var bool is_on_platform;

        

        let lastlocation = location;

        let can_jump = Collision.IsOnAnyPlatform(x, y, width, height, forceY, map, mapWidth, mapHeight, worldOffset);

        //do Output.printInt(y);
        //do Output.println();

        if (can_jump)
        {
            
            
            let y = Collision.getPlatformY() - 16; // -> blockHeight
            //do Output.printInt(y);
            //do Output.println();
            
            

            let forceY = 0;
            let location = (y * 32) + x;

            //do Output.printInt(y);
            //do Output.println();
            do Clear();
            //do Output.printInt(y);
            //do Output.println();
            do Draw();
            //do Output.printInt(y);
            //do Output.println();
        }
        // padanje
        else
        {
            if (y > 219)
            {
                //do Respawn();

                // take damage
            }

            let forceY = forceY + gravity;      

               
        }


        let y = y + forceY;
        let location = (y * 32) + x;

        


        
        do Clear();
        
        do Draw();
        

        return;
    }






    method void check_gravity(Array platforms, int platforms_num)
    {
        var int i;
        var Platform platform;
        var Section section;
        var bool is_on_platform;

        let lastlocation = location;

        while (i < platforms_num)
        {
            let platform = platforms[i];

            //if (Math.abs(y - platform.get_y()) < 50)
            //{
                let is_on_platform = Collision.IsOnPlatform(platform, x, y, width, height, forceY);
                //let lastlocation = location;
                let can_jump = is_on_platform;

                if (is_on_platform)
                {
                    let i = platforms_num - 1;
                }
            //}

            let i = i + 1;
        }

        if (can_jump)
        {
            let y = platform.get_y() - height;
           
            let forceY = 0;
            let location = (y * 32) + x;

            do Clear();
            do Draw();
        }
        // padanje
        else
        {
            if (y > 219)
            {
                do Respawn();

                // take damage
            }

            let forceY = forceY + gravity;            
        }


        let y = y + forceY;
        let location = (y * 32) + x;
        
        do Clear();
        do Draw();

        return;
    }


    method void Respawn()
    {
        let y = 100;

        if (x - 10 < 1)
        {
            //let x = 2;
            //let absolute_x = 2;
            //temp
            let x = x + 5;
            let absolute_x = absolute_x + 5;
        }
        else
        {
            let x = x - 10;
            let absolute_x = absolute_x - 10;
        }
        
        return;
    }

    method void TakeDamage()
    {
        // dont take damage if already taken
        if (damage_timer < 1)
        {
            let health = health - 1;
            let damage_timer = damage_cooldown;
        }

        return;
    }

    method void Shoot()
    {
        if (canShoot)
        {
            if (currBullet.IsAvailable())
            {
                do currBullet.Shoot(5, 100, draw_character_left);

                let currBulletIndex = currBulletIndex + 1;

                if (currBulletIndex > (BulletsCount - 1))
                {
                    let currBulletIndex = 0;
                }
                
                let currBullet = Bullets[currBulletIndex];
            }

            let canShoot = false;
        }

        return;
    }

    //// DRAW/CLEAR
    method void Clear()
    {
        var bool color;
        var int i;
        var Array curr_memaddr;

        let color = false;

        if (~(lastlocation = location) & (lastlocation < 7199))
        // (~(lastlocation = location) & (lastlocation < 7650)  & (16384+513+480+lastlocation < 24576))
        // 16384+513+480 = 17377
        // 24576 - 17377 = 7199
        {
            //let memAddress = 16897 + lastlocation; // 513
            let memAddress = 16384 + lastlocation + 1;

            let i = 0;
            while (i < 481)
            {
                let curr_memaddr = memAddress + i;
                let curr_memaddr[0] = color;
                let i = i + 32;                
            }

            //let memAddress = 16898 + lastlocation; // 514
            let memAddress = 16384 + lastlocation + 2;

            let i = 0;
            while (i < 481)
            {
                let curr_memaddr = memAddress + i;
                let curr_memaddr[0] = color;
                let i = i + 32;
            }

            //let memAddress = 16896 + lastlocation; // 512
            let memAddress = 16384 + lastlocation;

            let i = 0;

            while (i < 481)
            {
                let curr_memaddr = memAddress + i;
                let curr_memaddr[0] = color;
                let i = i + 32;
            }

            //let memAddress = 16386 + lastlocation; // 2
            let memAddress = 16384 + lastlocation - 510;

            let i = 0;
            while (i < 481)
            {
                let curr_memaddr = memAddress + i;
                let curr_memaddr[0] = color;
                let i = i + 32;
            }

            //let memAddress = 16384 + lastlocation; // 0
            let memAddress = 16384 + lastlocation - 512;

            let i = 0;
            while (i < 481)
            {
                let curr_memaddr = memAddress + i;
                let curr_memaddr[0] = color;
                let i = i + 32;
            }
        }


        return;
    }

    method void Draw()
    {
        if (draw_character_left)
        {
            do DrawLeft();
        }
        else
        {
            do DrawRight();
        }

        return;
    }

    method void DrawRight()
    {
        if (~(lastlocation = location) & (location < 7199))
        // (~(lastlocation = location) & (16384+513+480+location < 24575))
        {
            let memAddress = 16384 + location;

            // faca
            //let memAddress = 16384 + location + 512;
            //let memAddress = memAddress + 512;
            //let memAddress = 16384 + location + 513;
            let memAddress = 16384 + location + 1;

	        do Memory.poke(memAddress + 0, -1);
	        do Memory.poke(memAddress + 32, -32767);
	        do Memory.poke(memAddress + 64, -32767);
	        do Memory.poke(memAddress + 96, -30703);
	        do Memory.poke(memAddress + 128, -31711);
	        do Memory.poke(memAddress + 160, -32191);
	        do Memory.poke(memAddress + 192, -30687);
	        do Memory.poke(memAddress + 224, -32767);
	        do Memory.poke(memAddress + 256, -32767);
	        do Memory.poke(memAddress + 288, -32767);
	        do Memory.poke(memAddress + 320, -31807);
	        do Memory.poke(memAddress + 352, -31711);
	        do Memory.poke(memAddress + 384, -31711);
	        do Memory.poke(memAddress + 416, -32767);
	        do Memory.poke(memAddress + 448, -32767);
	        do Memory.poke(memAddress + 480, -1);


            // desna ruka donji dio
            //let memAddress = 16384 + location + 513;
            //let memAddress = memAddress + 1; // memAddres - 512 + 513
            //let memAddress = 16384 + location + 514;
            let memAddress = 16384 + location + 2;

	        do Memory.poke(memAddress + 0, 4128);
	        do Memory.poke(memAddress + 32, 8256);
            do Memory.poke(memAddress + 64, 8320);
	        do Memory.poke(memAddress + 96, 16647);
	        do Memory.poke(memAddress + 128, 18136);
	        do Memory.poke(memAddress + 160, -30688);
	        do Memory.poke(memAddress + 192, ~32767); // -32766
	        do Memory.poke(memAddress + 224, ~32767); //
	        do Memory.poke(memAddress + 256, 16384);
	        do Memory.poke(memAddress + 288, 16384);
	        do Memory.poke(memAddress + 320, 8192);
	        do Memory.poke(memAddress + 352, 7168);
	        do Memory.poke(memAddress + 384, 992);
	        do Memory.poke(memAddress + 416, 31);
	        do Memory.poke(memAddress + 448, 0);
	        do Memory.poke(memAddress + 480, 0);

            // lijeva ruka donji dio
            //let memAddress = 16384 + location + 511;
            //let memAddress = memAddress - 2; // memAddress - 1 + 511
            //let memAddress = 16384 + location + 512;
            let memAddress = 16384 + location;

	        do Memory.poke(memAddress + 0, 520);
	        do Memory.poke(memAddress + 32, 516);
	        do Memory.poke(memAddress + 64, 260);
	        do Memory.poke(memAddress + 96, -8062);
	        do Memory.poke(memAddress + 128, 7010);
	        do Memory.poke(memAddress + 160, 1041);
	        do Memory.poke(memAddress + 192, 1);
	        do Memory.poke(memAddress + 224, 1);
	        do Memory.poke(memAddress + 256, 2);
	        do Memory.poke(memAddress + 288, 2);
	        do Memory.poke(memAddress + 320, 4);
	        do Memory.poke(memAddress + 352, 56);
	        do Memory.poke(memAddress + 384, 1984);
	        do Memory.poke(memAddress + 416, -2048);
	        do Memory.poke(memAddress + 448, 0);
	        do Memory.poke(memAddress + 480, 0);

            // desna ruka gornji dio
            //let memAddress = 16384 + location + 1;
            //let memAddress = memAddress - 510; // memAddres - 511 + 1
            //let memAddress = 16384 + location + 2;
            let memAddress = 16384 + location - 510;

	        do Memory.poke(memAddress + 0, 0);
	        do Memory.poke(memAddress + 32, 0);
	        do Memory.poke(memAddress + 64, 0);
	        do Memory.poke(memAddress + 96, 8184);
	        do Memory.poke(memAddress + 128, 8184);
	        do Memory.poke(memAddress + 160, 8184);
	        do Memory.poke(memAddress + 192, 252);
	        do Memory.poke(memAddress + 224, 306);
	        do Memory.poke(memAddress + 256, 250);
	        do Memory.poke(memAddress + 288, 154);
	        do Memory.poke(memAddress + 320, 68);
	        do Memory.poke(memAddress + 352, 136);
	        do Memory.poke(memAddress + 384, 272);
	        do Memory.poke(memAddress + 416, 528);
	        do Memory.poke(memAddress + 448, 1040);
	        do Memory.poke(memAddress + 480, 2080);


            // lijeva ruka gornji dio
            //let memAddress = 16384 + location - 1;
            //let memAddress = memAddress - 2; // memAddress + 1 - 2
            //let memAddress = 16384 + location;
            let memAddress = 16384 + location - 512;

	        do Memory.poke(memAddress + 0, 0);
	        do Memory.poke(memAddress + 32, 0);
	        do Memory.poke(memAddress + 64, 0);
	        do Memory.poke(memAddress + 96, -64);
	        do Memory.poke(memAddress + 128, -64);
	        do Memory.poke(memAddress + 160, -32);
	        do Memory.poke(memAddress + 192, 4064);
	        do Memory.poke(memAddress + 224, 4128);
	        do Memory.poke(memAddress + 256, 2080);
	        do Memory.poke(memAddress + 288, 1088);
	        do Memory.poke(memAddress + 320, 1088);
	        do Memory.poke(memAddress + 352, 544);
	        do Memory.poke(memAddress + 384, 544);
	        do Memory.poke(memAddress + 416, 528);
	        do Memory.poke(memAddress + 448, 528);
	        do Memory.poke(memAddress + 480, 520);
        }
        return;
    }

    method void DrawLeft()
    {
        if (~(lastlocation = location) & (location < 7199))
        // (~(lastlocation = location) & (16384+513+480+location < 24575))
        {
            let memAddress = 16384 + location;

            // faca
            //let memAddress = 16384 + location + 512;
            //let memAddress = memAddress + 512;
            let memAddress = 16384 + location + 1;

            do Memory.poke(memAddress + 0, -1);
	        do Memory.poke(memAddress + 32, -32767);
	        do Memory.poke(memAddress + 64, -32767);
	        do Memory.poke(memAddress + 96, -30703);
	        do Memory.poke(memAddress + 128, -31711);
	        do Memory.poke(memAddress + 160, -32191);
	        do Memory.poke(memAddress + 192, -31727);
	        do Memory.poke(memAddress + 224, -32767);
	        do Memory.poke(memAddress + 256, -32767);
	        do Memory.poke(memAddress + 288, -32767);
	        do Memory.poke(memAddress + 320, -31807);
	        do Memory.poke(memAddress + 352, -31711);
	        do Memory.poke(memAddress + 384, -31711);
	        do Memory.poke(memAddress + 416, -32767);
	        do Memory.poke(memAddress + 448, -32767);
	        do Memory.poke(memAddress + 480, -1);

            // desna ruka donji dio
            //let memAddress = 16384 + location + 511;
            //let memAddress = memAddress - 1; // memAdress - 512 + 511
            let memAddress = 16384 + location;

            do Memory.poke(memAddress + 0, 1032);
	        do Memory.poke(memAddress + 32, 516);
	        do Memory.poke(memAddress + 64, 260);
	        do Memory.poke(memAddress + 96, -8062);
	        do Memory.poke(memAddress + 128, 7010);
	        do Memory.poke(memAddress + 160, 1041);
	        do Memory.poke(memAddress + 192, 1);
	        do Memory.poke(memAddress + 224, 1);
	        do Memory.poke(memAddress + 256, 2);
	        do Memory.poke(memAddress + 288, 2);
	        do Memory.poke(memAddress + 320, 4);
	        do Memory.poke(memAddress + 352, 56);
	        do Memory.poke(memAddress + 384, 1984);
	        do Memory.poke(memAddress + 416, -2048);
	        do Memory.poke(memAddress + 448, 0);
	        do Memory.poke(memAddress + 480, 0);

            // lijeva ruka donji dio
            //let memAddress = 16384 + location + 513;
            //let memAddress = memAddress + 2; // memAddress - 511 + 513
            let memAddress = 16384 + location + 2;

            do Memory.poke(memAddress + 0, 4160);
	        do Memory.poke(memAddress + 32, 8256);
	        do Memory.poke(memAddress + 64, 8320);
	        do Memory.poke(memAddress + 96, 16647);
	        do Memory.poke(memAddress + 128, 18136);
	        do Memory.poke(memAddress + 160, -30688);
	        do Memory.poke(memAddress + 192, ~32767);
	        do Memory.poke(memAddress + 224, ~32767);
	        do Memory.poke(memAddress + 256, 16384);
	        do Memory.poke(memAddress + 288, 16384);
	        do Memory.poke(memAddress + 320, 8192);
	        do Memory.poke(memAddress + 352, 7168);
	        do Memory.poke(memAddress + 384, 992);
	        do Memory.poke(memAddress + 416, 31);
	        do Memory.poke(memAddress + 448, 0);
	        do Memory.poke(memAddress + 480, 0);

            // desna ruka gornji dio
            //let memAddress = 16384 + location - 1;
            //let memAddress = memAddress - 514; //memAddress - 513 - 1
            let memAddress = 16384 + location - 512;

            do Memory.poke(memAddress + 0, 0);
	        do Memory.poke(memAddress + 32, 0);
	        do Memory.poke(memAddress + 64, 0);
	        do Memory.poke(memAddress + 96, 8184);
	        do Memory.poke(memAddress + 128, 8184);
	        do Memory.poke(memAddress + 160, 8184);
	        do Memory.poke(memAddress + 192, 16128);
	        do Memory.poke(memAddress + 224, 19584);
	        do Memory.poke(memAddress + 256, 24320);
	        do Memory.poke(memAddress + 288, 22784);
	        do Memory.poke(memAddress + 320, 8704);
	        do Memory.poke(memAddress + 352, 4352);
	        do Memory.poke(memAddress + 384, 2176);
	        do Memory.poke(memAddress + 416, 2112);
	        do Memory.poke(memAddress + 448, 2080);
	        do Memory.poke(memAddress + 480, 1040);

            // lijeva ruka gornji dio
            //let memAddress = 16384 + location + 1;
            //let memAddress = memAddress + 2; // + 1 + 1
            let memAddress = 16384 + location - 510;

            do Memory.poke(memAddress + 0, 0);
	        do Memory.poke(memAddress + 32, 0);
	        do Memory.poke(memAddress + 64, 0);
	        do Memory.poke(memAddress + 96, 1023);
	        do Memory.poke(memAddress + 128, 1023);
	        do Memory.poke(memAddress + 160, 2047);
	        do Memory.poke(memAddress + 192, 2032);
	        do Memory.poke(memAddress + 224, 1032);
	        do Memory.poke(memAddress + 256, 1040);
	        do Memory.poke(memAddress + 288, 544);
	        do Memory.poke(memAddress + 320, 544);
	        do Memory.poke(memAddress + 352, 1088);
	        do Memory.poke(memAddress + 384, 1088);
	        do Memory.poke(memAddress + 416, 2112);
	        do Memory.poke(memAddress + 448, 2112);
	        do Memory.poke(memAddress + 480, 4160);
        }

        return;
    }    








    method void DrawLeft1(int location)
    {
        let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, -4096);
	    do Memory.poke(memAddress + 32, 4096);
	    do Memory.poke(memAddress + 64, 4096);
	    do Memory.poke(memAddress + 96, 4096);
	    do Memory.poke(memAddress + 128, 4096);
	    do Memory.poke(memAddress + 160, 4096);
	    do Memory.poke(memAddress + 192, 4096);
	    do Memory.poke(memAddress + 224, 4096);
	    do Memory.poke(memAddress + 256, 4096);
	    do Memory.poke(memAddress + 288, 4096);
	    do Memory.poke(memAddress + 320, 4096);
	    do Memory.poke(memAddress + 352, 4096);
	    do Memory.poke(memAddress + 384, 4096);
	    do Memory.poke(memAddress + 416, 4096);
	    do Memory.poke(memAddress + 448, 4096);
	    do Memory.poke(memAddress + 480, -4096);

        return;
    }

    method void DrawLeft2(int location)
    {
        let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, -256);
	    do Memory.poke(memAddress + 32, 256);
	    do Memory.poke(memAddress + 64, 256);
	    do Memory.poke(memAddress + 96, 4352);
	    do Memory.poke(memAddress + 128, 8448);
	    do Memory.poke(memAddress + 160, 16640);
	    do Memory.poke(memAddress + 192, 8448);
	    do Memory.poke(memAddress + 224, 256);
	    do Memory.poke(memAddress + 256, 256);
	    do Memory.poke(memAddress + 288, 256);
	    do Memory.poke(memAddress + 320, -16128);
	    do Memory.poke(memAddress + 352, 8448);
	    do Memory.poke(memAddress + 384, 8448);
	    do Memory.poke(memAddress + 416, 256);
	    do Memory.poke(memAddress + 448, 256);
	    do Memory.poke(memAddress + 480, -256);

        return;
    }

    method void DrawLeft3(int location)
    {
        let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, -256);
	    do Memory.poke(memAddress + 32, 256);
	    do Memory.poke(memAddress + 64, 256);
	    do Memory.poke(memAddress + 96, 4352);
	    do Memory.poke(memAddress + 128, 8448);
	    do Memory.poke(memAddress + 160, 16640);
	    do Memory.poke(memAddress + 192, 8448);
	    do Memory.poke(memAddress + 224, 256);
	    do Memory.poke(memAddress + 256, 256);
	    do Memory.poke(memAddress + 288, 256);
	    do Memory.poke(memAddress + 320, -16128);
	    do Memory.poke(memAddress + 352, 8448);
	    do Memory.poke(memAddress + 384, 8448);
	    do Memory.poke(memAddress + 416, 256);
	    do Memory.poke(memAddress + 448, 256);
	    do Memory.poke(memAddress + 480, -256);

        return;
    }

}