// 0 - spider
// 1 - evil jeff melee
// 2 - evil jeff ranged
// 3 - bat

class Enemy
{
	field int x;
	field int y;
	field int type;

	field int width; // spider - 1
	field int height; // spider - 16

	field int location;
	field int lastLocation;
	field int memAddress;
	field int lastMemAddress;

	field int gravity;
	field bool canJump;
	field int forceY;
	field int jumpHeight;



	field int frameCount;
	field int currFrame;

	field int animationDelay;
	field int animationTimer;

	field int movementDelay;
	field int movementTimer;

	field bool canMove;

	field bool roamRight;




	field bool Roaming;
    field bool Flying;
    field bool GravityAffected;
    field bool Melee;
    field bool Shooting;
    field bool DamageOnSquish;
	field bool Following;

    constructor Enemy new(int x2, int y2, int type2)
    {	
		let x = x2;
		let y = y2;
		let type = type2;

		let location = (32 * y) + x;
		let memAddress = 16384 + location;

		// SPIDER
		if (type = 0)
		{
			let width = 2;
			let height = 16;
			let frameCount = Spider.GetFrameCount();
			let animationDelay = 3;
			let movementDelay = 2;

			let Roaming = true;
		}
		// EVIL JEFF MELEE
		else { if (type = 1)
		{
			let width = 1;
			let height = 16;
			let frameCount = EvilJeffMelee.GetFrameCount();
			
			let movementDelay = 2;
		}}

		let currFrame = 0;

		let animationTimer = animationDelay;
		let movementTimer = movementDelay;

		let canMove = true;

		let forceY = 0;
		let gravity = 6; // 6
		let jumpHeight = 30; // 30

		let lastLocation = location;

		let roamRight = true;


        return this;
    }

	method int get_x() { return x; }
	method int get_y() { return y; }
	method int get_type() { return type; }

	method void set_x(int x2)
    {
        let x = x2;
        return;
    }

    method void set_y(int y2)
    {
        let y = y2;
        return;
    }

	method void CheckTimers()
	{
		if (animationTimer < 1)
		{
			do ChangeFrame();
			let animationTimer = animationDelay;
		}

		if (movementTimer < 1)
		{
			let canMove = true;
			let movementTimer = movementDelay;
		}

		return;
	}

	method void DecrementTimers()
	{
		let animationTimer = animationTimer - 1;
		let movementTimer = movementTimer - 1;
		return;
	}


	method void ChangeFrame()
	{
		if (currFrame < (frameCount - 1))
		{
			let currFrame = currFrame + 1;
		}
		else
		{
			let currFrame = 0;
		}

		return;
	}





	method void DoActions(Array map, int mapWidth, int mapHeight)
	{
		
		if (Roaming)
		{
			do Roam(map, mapWidth, mapHeight);
		}

		return;
	}

	//// MOVEMENT
	method void Roam(Array map, int mapWidth, int mapHeight)
	{
		if (roamRight)
		{
			do MoveRight();
		}
		else 
		{
			do MoveLeft();
		}

		if (Collision.CheckAnyPlatformCollisionLeft(x, y, width, height, map, mapWidth, mapHeight) | 
		    Collision.IsAtPlatformBoundaryLeft(x, y, width, height, map, mapWidth, mapHeight))
		{
			let roamRight = true;
		}
		else { if (Collision.CheckAnyPlatformCollisionRight(x, y, width, height, map, mapWidth, mapHeight) | 
		           Collision.IsAtPlatformBoundaryRight(x, y, width, height, map, mapWidth, mapHeight))
		{
			let roamRight = false;
		}}

		return;
	}





    method void MoveLeft()
    {
        if (x > 0)
        {
			if (canMove)
			{
				let lastLocation = location;
			
				

				let location = location - 1;
            	let x = x - 1;
				do Clear();
				do Draw(16384 + location, true, true);

				let canMove = false;
			}
            
        }

        return;
    }

    method void MoveRight()
    {
        if((x + width + 2) < 32)
        {
			if (canMove)
			{
            	let lastLocation = location;


				let location = location + 1;
            	let x = x + 1;
				do Clear();
				//do Draw(true, false);
				do Draw(16384 + location, true, false);

				let canMove = false;
			}
        }


        return;

    }

    method void Jump()
    {
        let lastLocation = location;

        if (canJump)
        {
            let forceY = forceY - jumpHeight;
        }

        return;
    }

	//// GRAVITY

	method void check_gravity2(Array map, int mapWidth, int mapHeight)
    {
        var int i;
        var Platform platform;
        var Section section;
        var bool is_on_platform;

        let lastLocation = location;

        let canJump = Collision.IsOnAnyPlatform(x, y, width, height, forceY, map, mapWidth, mapHeight);


        if (canJump)
        {
			

            let y = Collision.getPlatformY() - height;
            let forceY = 0;
            let location = (y * 32) + x;
			//let memAddress = 16384 + location;

            //do Clear();
            //do Draw();
			do Clear();
			do Draw(16384 + location, true, false);
        }
        // padanje
        else
        {
            if (y > 219)
            {
                //do Respawn();

                // take damage
            }

            let forceY = forceY + gravity;            
        }

		

        let y = y + forceY;
        let location = (y * 32) + x;
        
        //do Clear();
        //do Draw();
		do Clear();
		do Draw(16384 + location, true, false);

        return;
    }

    method void check_gravity(Array platforms, int platforms_num)
    {
        var int i;
        var Platform platform;
        var Section section;
        var bool isOnPlatform;

        let lastLocation = location;

        while (i < platforms_num)
        {
            let platform = platforms[i];

            //if (Math.abs(y - platform.get_y()) < 50)
            //{
                let isOnPlatform = Collision.IsOnPlatform(platform, x, y, width, height, forceY);

                let canJump = isOnPlatform;

                if (isOnPlatform)
                {
                    let i = platforms_num - 1;
                }
            //}

            let i = i + 1;
        }

        if (canJump)
        {
			

            let y = platform.get_y() - height;
            let forceY = 0;
            let location = (y * 32) + x;
			//let memAddress = 16384 + location;

            //do Clear();
            //do Draw();
			do Clear();
			do Draw(16384 + location, true, false);
        }
        // padanje
        else
        {
            if (y > 219)
            {
                //do Respawn();

                // take damage
            }

            let forceY = forceY + gravity;            
        }

		

        let y = y + forceY;
        let location = (y * 32) + x;
        
        //do Clear();
        //do Draw();
		do Clear();
		do Draw(16384 + location, true, false);

        return;
    }


    method void Respawn()
    {
        let y = 100;

        if (x - 10 < 1)
        {
            //let x = 2;
            //let absolute_x = 2;
            //temp
            let x = x + 5;
            //let absolute_x = absolute_x + 5;
        }
        else
        {
            let x = x - 10;
            //let absolute_x = absolute_x - 10;
        }
        
        return;
    }



	method void Clear()
	{
		if (~(lastLocation = location))
		{
			do Draw(16384 + lastLocation, false, false);
		}

		return;
	}

    method void Draw(int memAddress, bool display, bool mirrored)
    {
		//var int location;
        //var int memAddress;
//
		//let location = (y * 32) + x;
	    //let memAddress = 16384 + location;

		if (type = 0)
		{
			do Spider.DrawFrame(memAddress, currFrame, display, mirrored);
		}
		else { if (type = 1)
		{
			do EvilJeffMelee.DrawFrame(memAddress, currFrame, display, mirrored);
		}
		else { if (type = 2)
		{
			
		}}}

		return;
    }

























	method void DrawPrcmoljak(int memAddress)
	{
		do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 0);
	    do Memory.poke(memAddress + 64, 0);
	    do Memory.poke(memAddress + 96, 0);
	    do Memory.poke(memAddress + 128, 576);
	    do Memory.poke(memAddress + 160, 12876);
	    do Memory.poke(memAddress + 192, 8184);
	    do Memory.poke(memAddress + 224, 4080);
	    do Memory.poke(memAddress + 256, 3504);
	    do Memory.poke(memAddress + 288, 3504);
	    do Memory.poke(memAddress + 320, 4080);
	    do Memory.poke(memAddress + 352, 8184);
	    do Memory.poke(memAddress + 384, 2016);
	    do Memory.poke(memAddress + 416, 2016);
	    do Memory.poke(memAddress + 448, 2016);
	    do Memory.poke(memAddress + 480, 576);
		return;
	}

	//method void DrawSpider(int memAddress, bool display)
	//{
	//	//if (curr_frame = 0)
	//	//{
	//	//	do DrawSpiderFrame1(memAddress, display);
	//	//}
	//	//else { if (curr_frame = 1)
	//	//{
	//	//	do DrawSpiderFrame2(memAddress, display);
	//	//}}
//
	//	do Sprites.DrawSpiderFrame(memAddress, curr_frame, display);
//
	//	return;
	//}

	//method void DrawSpiderFrame1(int memAddress, bool display)
	//{
	//	var int i;
	//	var int j;
	//	var Array sprite;
//
	//	let sprite = Sprites.GetSpiderBodyFrame1();
	//	do Sprites.DrawSprite(memAddress, sprite, display);
//
	//	let memAddress = memAddress + 1;
//
	//	let sprite = Sprites.GetSpiderHeadFrame1();
	//	do Sprites.DrawSprite(memAddress, sprite, display);
//
	//	return;
	//}

	//method void DrawSpiderFrame2(int memAddress, bool display)
	//{
	//	var Array sprite;
//
	//	//do Memory.poke(memAddress + 0, 0);
	//	//do Memory.poke(memAddress + 32, 32704);
	//	//do Memory.poke(memAddress + 64, -16);
	//	//do Memory.poke(memAddress + 96, -8);
	//	//do Memory.poke(memAddress + 128, -8);
	//	//do Memory.poke(memAddress + 160, -4);
	//	//do Memory.poke(memAddress + 192, -2);
	//	//do Memory.poke(memAddress + 224, -2);
	//	//do Memory.poke(memAddress + 256, -2);
	//	//do Memory.poke(memAddress + 288, -4);
	//	//do Memory.poke(memAddress + 320, -8);
	//	//do Memory.poke(memAddress + 352, -16);
	//	//do Memory.poke(memAddress + 384, -1008);
	//	//do Memory.poke(memAddress + 416, 31760);
	//	//do Memory.poke(memAddress + 448, 17440);
	//	//do Memory.poke(memAddress + 480, -30656);
//
//
//
	//	let sprite = Sprites.GetSpiderBodyFrame2();
	//	do Sprites.DrawSprite(memAddress, sprite, display);
//
	//	let memAddress = memAddress + 1;
//
	//	let sprite = Sprites.GetSpiderHeadFrame2();
	//	do Sprites.DrawSprite(memAddress, sprite, display);
//
	//	// glava
	//	//do Memory.poke(memAddress + 0, 0);
	//	//do Memory.poke(memAddress + 32, 0);
	//	//do Memory.poke(memAddress + 64, 1);
	//	//do Memory.poke(memAddress + 96, 3);
	//	//do Memory.poke(memAddress + 128, 3);
	//	//do Memory.poke(memAddress + 160, 7);
	//	//do Memory.poke(memAddress + 192, 7);
	//	//do Memory.poke(memAddress + 224, 4071);
	//	//do Memory.poke(memAddress + 256, 8191);
	//	//do Memory.poke(memAddress + 288, 6015);
	//	//do Memory.poke(memAddress + 320, 4735);
	//	//do Memory.poke(memAddress + 352, 8191);
	//	//do Memory.poke(memAddress + 384, 8191);
	//	//do Memory.poke(memAddress + 416, 8188);
	//	//do Memory.poke(memAddress + 448, 11460);
	//	//do Memory.poke(memAddress + 480, 8738);
//
	//	return;
	//}

	//method void DrawSpiderMirroredFrame1(int memAddress)
	//{
	//	// glava
	//	do Memory.poke(memAddress + 0, 0);
	//	do Memory.poke(memAddress + 32, 0);
	//	do Memory.poke(memAddress + 64, ~32767); // -32768
	//	do Memory.poke(memAddress + 96, -16384);
	//	do Memory.poke(memAddress + 128, -16384);
	//	do Memory.poke(memAddress + 160, -8192);
	//	do Memory.poke(memAddress + 192, -8192);
	//	do Memory.poke(memAddress + 224, -6160);
	//	do Memory.poke(memAddress + 256, -8);
	//	do Memory.poke(memAddress + 288, -280);
	//	do Memory.poke(memAddress + 320, -440);
	//	do Memory.poke(memAddress + 352, -8);
	//	do Memory.poke(memAddress + 384, -8);
	//	do Memory.poke(memAddress + 416, 16376);
	//	do Memory.poke(memAddress + 448, 9014);
	//	do Memory.poke(memAddress + 480, 16521);
//
	//	let memAddress = memAddress + 1;
//
	//	do Memory.poke(memAddress + 0, 0);
	//	do Memory.poke(memAddress + 32, 1022);
	//	do Memory.poke(memAddress + 64, 4095);
	//	do Memory.poke(memAddress + 96, 8191);
	//	do Memory.poke(memAddress + 128, 8191);
	//	do Memory.poke(memAddress + 160, 16383);
	//	do Memory.poke(memAddress + 192, 32767);
	//	do Memory.poke(memAddress + 224, 32767);
	//	do Memory.poke(memAddress + 256, 32767);
	//	do Memory.poke(memAddress + 288, 16383);
	//	do Memory.poke(memAddress + 320, 8191);
	//	do Memory.poke(memAddress + 352, 4095);
	//	do Memory.poke(memAddress + 384, 4159);
	//	do Memory.poke(memAddress + 416, 4158);
	//	do Memory.poke(memAddress + 448, 24770);
	//	do Memory.poke(memAddress + 480, -32508);
//
	//	return;
	//}
//
	//method void DrawSpiderMirroredFrame2(int memAddress)
	//{
	//	do Memory.poke(memAddress + 0, 0);
	//	do Memory.poke(memAddress + 32, 0);
	//	do Memory.poke(memAddress + 64, ~32767); // -32768
	//	do Memory.poke(memAddress + 96, -16384);
	//	do Memory.poke(memAddress + 128, -16384);
	//	do Memory.poke(memAddress + 160, -8192);
	//	do Memory.poke(memAddress + 192, -8192);
	//	do Memory.poke(memAddress + 224, -6160);
	//	do Memory.poke(memAddress + 256, -8);
	//	do Memory.poke(memAddress + 288, -280);
	//	do Memory.poke(memAddress + 320, -440);
	//	do Memory.poke(memAddress + 352, -8);
	//	do Memory.poke(memAddress + 384, -8);
	//	do Memory.poke(memAddress + 416, 16376);
	//	do Memory.poke(memAddress + 448, 9012);
	//	do Memory.poke(memAddress + 480, 17476);
//
	//	let memAddress = memAddress + 1;
//
	//	do Memory.poke(memAddress + 0, 0);
	//	do Memory.poke(memAddress + 32, 1022);
	//	do Memory.poke(memAddress + 64, 4095);
	//	do Memory.poke(memAddress + 96, 8191);
	//	do Memory.poke(memAddress + 128, 8191);
	//	do Memory.poke(memAddress + 160, 16383);
	//	do Memory.poke(memAddress + 192, 32767);
	//	do Memory.poke(memAddress + 224, 32767);
	//	do Memory.poke(memAddress + 256, 32767);
	//	do Memory.poke(memAddress + 288, 16383);
	//	do Memory.poke(memAddress + 320, 8191);
	//	do Memory.poke(memAddress + 352, 4095);
	//	do Memory.poke(memAddress + 384, 2111);
	//	do Memory.poke(memAddress + 416, 2110);
	//	do Memory.poke(memAddress + 448, 1058);
	//	do Memory.poke(memAddress + 480, 529);
//
	//	return;
	//}

	//// spider animation 2. frame
	//// dupe
	//do Memory.poke(memAddress + 0, 0);
	//do Memory.poke(memAddress + 32, 32704);
	//do Memory.poke(memAddress + 64, -16);
	//do Memory.poke(memAddress + 96, -8);
	//do Memory.poke(memAddress + 128, -8);
	//do Memory.poke(memAddress + 160, -4);
	//do Memory.poke(memAddress + 192, -2);
	//do Memory.poke(memAddress + 224, -2);
	//do Memory.poke(memAddress + 256, -2);
	//do Memory.poke(memAddress + 288, -4);
	//do Memory.poke(memAddress + 320, -8);
	//do Memory.poke(memAddress + 352, -16);
	//do Memory.poke(memAddress + 384, -1008);
	//do Memory.poke(memAddress + 416, 31760);
	//do Memory.poke(memAddress + 448, 17440);
	//do Memory.poke(memAddress + 480, -30656);
	//// glava
	//do Memory.poke(memAddress + 0, 0);
	//do Memory.poke(memAddress + 32, 0);
	//do Memory.poke(memAddress + 64, 1);
	//do Memory.poke(memAddress + 96, 3);
	//do Memory.poke(memAddress + 128, 3);
	//do Memory.poke(memAddress + 160, 7);
	//do Memory.poke(memAddress + 192, 7);
	//do Memory.poke(memAddress + 224, 4071);
	//do Memory.poke(memAddress + 256, 8191);
	//do Memory.poke(memAddress + 288, 6015);
	//do Memory.poke(memAddress + 320, 4735);
	//do Memory.poke(memAddress + 352, 8191);
	//do Memory.poke(memAddress + 384, 8191);
	//do Memory.poke(memAddress + 416, 8188);
	//do Memory.poke(memAddress + 448, 11460);
	//do Memory.poke(memAddress + 480, 8738);

	//// spider mirrored animation 2. frame
	//// dupe
	//do Memory.poke(memAddress + 0, 0);
	//do Memory.poke(memAddress + 32, 1022);
	//do Memory.poke(memAddress + 64, 4095);
	//do Memory.poke(memAddress + 96, 8191);
	//do Memory.poke(memAddress + 128, 8191);
	//do Memory.poke(memAddress + 160, 16383);
	//do Memory.poke(memAddress + 192, 32767);
	//do Memory.poke(memAddress + 224, 32767);
	//do Memory.poke(memAddress + 256, 32767);
	//do Memory.poke(memAddress + 288, 16383);
	//do Memory.poke(memAddress + 320, 8191);
	//do Memory.poke(memAddress + 352, 4095);
	//do Memory.poke(memAddress + 384, 2111);
	//do Memory.poke(memAddress + 416, 2110);
	//do Memory.poke(memAddress + 448, 1058);
	//do Memory.poke(memAddress + 480, 529);
	//// glava
	//do Memory.poke(memAddress + 0, 0);
	//do Memory.poke(memAddress + 32, 0);
	//do Memory.poke(memAddress + 64, -32768);
	//do Memory.poke(memAddress + 96, -16384);
	//do Memory.poke(memAddress + 128, -16384);
	//do Memory.poke(memAddress + 160, -8192);
	//do Memory.poke(memAddress + 192, -8192);
	//do Memory.poke(memAddress + 224, -6160);
	//do Memory.poke(memAddress + 256, -8);
	//do Memory.poke(memAddress + 288, -280);
	//do Memory.poke(memAddress + 320, -440);
	//do Memory.poke(memAddress + 352, -8);
	//do Memory.poke(memAddress + 384, -8);
	//do Memory.poke(memAddress + 416, 16376);
	//do Memory.poke(memAddress + 448, 9012);
	//do Memory.poke(memAddress + 480, 17476);




	method void DrawEvilJeff(int memAddress)
	{
		do Memory.poke(memAddress + 0, -1);
		do Memory.poke(memAddress + 32, -1);
		do Memory.poke(memAddress + 64, -1);
		do Memory.poke(memAddress + 96, -4113);
		do Memory.poke(memAddress + 128, -2081);
		do Memory.poke(memAddress + 160, -1089);
		do Memory.poke(memAddress + 192, -4129);
		do Memory.poke(memAddress + 224, -4129);
		do Memory.poke(memAddress + 256, -4129);
		do Memory.poke(memAddress + 288, -1);
		do Memory.poke(memAddress + 320, -1);
		do Memory.poke(memAddress + 352, -1985);
		do Memory.poke(memAddress + 384, -2081);
		do Memory.poke(memAddress + 416, -2081);
		do Memory.poke(memAddress + 448, -1);
		do Memory.poke(memAddress + 480, -1);

		return;
	}

	method void DrawEvilJeffMirrored(int memAddress)
	{
		do Memory.poke(memAddress + 0, -1);
		do Memory.poke(memAddress + 32, -1);
		do Memory.poke(memAddress + 64, -1);
		do Memory.poke(memAddress + 96, -2057);
		do Memory.poke(memAddress + 128, -1041);
		do Memory.poke(memAddress + 160, -545);
		do Memory.poke(memAddress + 192, -1033);
		do Memory.poke(memAddress + 224, -1033);
		do Memory.poke(memAddress + 256, -1033);
		do Memory.poke(memAddress + 288, -1);
		do Memory.poke(memAddress + 320, -1);
		do Memory.poke(memAddress + 352, -993);
		do Memory.poke(memAddress + 384, -1041);
		do Memory.poke(memAddress + 416, -1041);
		do Memory.poke(memAddress + 448, -1);
		do Memory.poke(memAddress + 480, -1);

		return;
	}

}

