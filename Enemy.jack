// 0 - spider
// 1 - evil jeff melee
// 2 - evil jeff ranged
// 3 - bat
// 4 - shooter


class Enemy
{
	field int X;
	field int Y;
	field int Width; 
	field int Height;
	field int Type;

	field int heightInPixels;

	field int memAddress;
	field int lastMemAddress;

	field int gravity;
	field bool canJump;
	field int forceY;
	field int jumpHeight;

	field int movementDelay;
	field int movementTimer;

	field bool canMoveLeftRight;
	field bool canMoveUpDown;

	field bool movingLeft;

	field bool IsRoaming;
    field bool IsFlying;
    field bool IsGravityAffected;
    field bool IsMelee;
	field bool IsRanged;
    field bool IsShooting;
    field bool DiesOnSquish;
	field bool IsFollowing;
	field bool IsStationary;

	field bool IsAlive;

	field Array Bullets;
    field int BulletsCount;
    field int currBulletIndex;
    field Bullet currBullet;

    field int bulletTimer;
    field int bulletDelay;

    field bool canShoot;

	field bool hasPlatformAbove;
	field int hasPlatformAboveTimer;
	field int hasPlatformAboveDelay;

	field int followTimer;
	field int lastCX;
	field int lastCY;

    constructor Enemy new(int x, int y, int type)
    {	
		var int i;

		do resetObject();

		let X = x;
		let Y = y;
		let Type = type;

		let memAddress = Constants.getMemAddress(X, Y);

		// SPIDER
		if (Type = 0)
		{
			let Width = Spider.getWidth();
			let Height = Spider.getHeight();

			let movementDelay = Difficulty.getSpiderMovementDelay();

			let IsRoaming = true;
			let DiesOnSquish = true;
		}
		// EVIL JEFF MELEE
		else { if (Type = 1)
		{
			let Width = EvilJeffMelee.getWidth();
			let Height = EvilJeffMelee.getHeight();
			
			let movementDelay = 2;

			let IsGravityAffected = true;
			let IsMelee = true;
		}
		// EVIL JEFF RANGED
		else { if (Type = 2)
		{
			let Width = EvilJeffRanged.getWidth();
			let Height = EvilJeffRanged.getHeight();

			let movementDelay = 3;

			let IsGravityAffected = true;
			let IsShooting = true;
			let IsRanged = true;

			let DiesOnSquish = true;
		}
		// BAT
		else { if (Type = 3)
		{
			let Width = Bat.getWidth();
			let Height = Bat.getHeight();

			let movementDelay = Difficulty.getBatMovementDelay();

			let IsShooting = false;
			let IsRanged = false;

			let IsFollowing = true;
			let IsFlying = true;
			let DiesOnSquish = true;
		}
		else {if (Type = 4)
		{
			let Width = Shooter.getWidth();
			let Height = Shooter.getHeight();

			let IsShooting = true;
			let DiesOnSquish = true;
		}}}}}

		if (IsShooting)
		{
			let BulletsCount = 1;
        	let Bullets = Array.new(BulletsCount);
        	while (i < BulletsCount)
        	{
        	    let Bullets[i] = Bullet.new();
        	    let i = i + 1;
        	}
        	let currBullet = Bullets[currBulletIndex];
		}

		let heightInPixels = Height * 16;

		let movementTimer = movementDelay;

		let canMoveLeftRight = true;
		let canMoveUpDown = true;

		let forceY = 0;
		let gravity = 6; // 6
		let jumpHeight = 30; // 30

		let IsAlive = true;

		let bulletDelay = Difficulty.getEnemyBulletDelay();
        let bulletTimer = bulletDelay;

		let hasPlatformAboveDelay = 5;
		let hasPlatformAboveTimer = hasPlatformAboveDelay;

		let movingLeft = true;

		do Draw();

		let lastMemAddress = memAddress;

        return this;
    }

	method int get_x() { return X; }
	method int get_y() { return Y; }
	method int getWidth() { return Width; }
	method int getHeight() { return Height; }
	method int get_type() { return Type; }

	method bool getIsRoaming() { return IsRoaming; }
    method bool getIsFlying() { return IsFlying; }
    method bool getIsGravityAffected() { return IsGravityAffected; }
    method bool getIsMelee() { return IsMelee; }
    method bool getIsShooting() { return IsShooting; }
    //method bool getDiesOnSquish() { return DiesOnSquish; }
	method bool getIsFollowing() { return IsFollowing; }
	method bool getIsStacionary() { return IsStationary; }

	method bool getIsAlive() { return IsAlive; }
	method Array getBullets() { return Bullets; }
	method int getBulletsCount() { return BulletsCount; }



	method void CheckTimers()
	{
		if (movementTimer < 1)
		{
			let canMoveLeftRight = true;
			let canMoveUpDown = true;
			let movementTimer = movementDelay;
		}

		if (bulletTimer < 1)
        {
            let canShoot = true;
            let bulletTimer = bulletDelay;
        }

		return;
	}

	method void DecrementTimers()
	{
		let movementTimer = movementTimer - 1;
		let bulletTimer = bulletTimer - 1;


		return;
	}

	method bool CheckCollisionWithCharacter(int cx, int cy, int cw, int ch)
	{
		if (IsAlive)
		{
			if (DiesOnSquish & Collision.IsEntityCollidedWithEntityTop(cx, cy, cw, ch, X, Y, Width, heightInPixels))
			{
				do Die();
				do Game.addKill();
				return false;
			}
			else { if (Collision.IsEntityCollidedWithEntitySides(cx, cy, cw, ch, X, Y, Width, heightInPixels))
			{
				return true;
			}}
		}
		
		return false;
	}

	method void CheckCollisionWithBullet(Bullet bullet)
    {
		if (IsAlive)
		{
			if (bullet.CheckCollisionWithEntity(X, Y, Width, heightInPixels))
			{
				do Die();
				do Game.addKill();
			}
		}

		return;
    }

	method void DoActions(int worldOffset, int characterX, int characterY)
	{
		if (IsAlive)
		{
			if (IsGravityAffected)
			{
				do CheckGravity(worldOffset);
				do Collision.RedrawPlatforms(X, Y, Width, heightInPixels, worldOffset);
			}
			if (IsRoaming)
			{
				do Roam(worldOffset);
			}
			if (IsMelee)
			{
				do Melee(worldOffset, characterX, characterY);
			}
			if (IsRanged)
			{
				do Ranged(worldOffset, characterX, characterY);
			}
			if (IsStationary)
			{
				do Draw();
			}
			if (IsFollowing & IsFlying)
			{
				do FollowFlying(worldOffset, characterX, characterY);
			}
			if (IsShooting & ~IsRanged)
			{
				do ShooterAction(worldOffset, characterX);
			}

		}

		return;
	}

	method void ShooterAction(int worldOffset, int characterX)
	{
		if (Constants.IsInScreenX(X))
		{
			if (characterX < X)
			{
				if (~movingLeft)
				{
					let movingLeft = true;
					do ForceDraw();
				}
			}
			else
			{
				if (movingLeft)
				{
					let movingLeft = false;
					do ForceDraw();
				}
			}	

			do Shoot(worldOffset);
		}

		return;
	}

	method void Shoot(int worldOffset)
    {
        var int bulletX;
        var int bulletY;

        if (movingLeft)
        {
            let bulletX = X - 1;
        }
        else
        {
            let bulletX = X + Width;
        }

		if (Type = 4)
		{
			let bulletY = Y - 10;
		}
		else
		{
			let bulletY = Y - Constants.getBlockHeight();
		}

        if (canShoot)
        {
            if (currBullet.IsAvailable())
            {
                do currBullet.Shoot(bulletX, bulletY, movingLeft, worldOffset);

                let currBulletIndex = currBulletIndex + 1;

                if (currBulletIndex > (BulletsCount - 1))
                {
                    let currBulletIndex = 0;
                }
                
                let currBullet = Bullets[currBulletIndex];
            }

            let canShoot = false;
        }

        return;
    }

    method void CheckBullets(int worldOffset)
    {
        var int i;
        var Bullet bullet;

		if (IsShooting)
		{
			while (i < BulletsCount)
        	{
        	    let bullet = Bullets[i];
        	    do bullet.CheckBullet(worldOffset);
        	    let i = i + 1;
        	}
		}

        return;
    }

	method void DrawAllBullets()
    {
        var int i;
        var Bullet bullet;

        while (i < BulletsCount)
        {
            let bullet = Bullets[i];
            do bullet.Draw();
            let i = i + 1;
        }

        return;
    }

	method void ScrollBulletsLeft()
	{
		var int i;
        var Bullet bullet;

        while (i < BulletsCount)
        {
            let bullet = Bullets[i];
            do bullet.ScrollLeft();
            let i = i + 1;
        }

        return;
	}

	method void ScrollBulletsRight()
	{
		var int i;
        var Bullet bullet;

        while (i < BulletsCount)
        {
            let bullet = Bullets[i];
            do bullet.ScrollRight();
            let i = i + 1;
        }

        return;
	}


	//// MOVEMENT

	method void CheckFollowTimer(int characterX, int characterY)
	{
		if (followTimer < 0)
		{
			let lastCX = characterX;
			let lastCY = characterY;
			let followTimer = Difficulty.getEnemyFollowDelay();
		}
		else
		{
			let followTimer = followTimer - 1;
		}

		return;
	}

	method void FollowGravity(int worldOffset, int characterX, int characterY)
	{
		do CheckFollowTimer(characterX, characterY);

		if (hasPlatformAboveTimer < 0)
		{
			let hasPlatformAbove = Collision.HasPlatformAbove(X, Y, Width, worldOffset, movingLeft);
			let hasPlatformAboveTimer = hasPlatformAboveDelay;
		}
		else
		{
			let hasPlatformAboveTimer = hasPlatformAboveTimer - 1;
		}

		if (hasPlatformAbove)
		{
			if (X > lastCX)
			{
				do MoveLeft(worldOffset);
			}
			else
			{
				do MoveRight(worldOffset);
			}
			do Jump();	
		}
		else
		{
			if (Collision.GetPlatformBelowY(X, Y, Width, worldOffset, true) < Collision.GetObstacleBelowY(X, Y, Width, worldOffset, true))
			{
				if (X > lastCX)
				{
					do MoveLeft(worldOffset);
				}
			}
			if (Collision.GetPlatformBelowY(X, Y, Width, worldOffset, false) < Collision.GetObstacleBelowY(X, Y, Width, worldOffset, false))
			{
				if (X < lastCX)
				{
					do MoveRight(worldOffset);
				}
			}
		}

		return;
	}

	method void Melee(int worldOffset, int cx, int cy)
	{
		if (Constants.IsInScreenX(X))
		{
			do FollowGravity(worldOffset, cx, cy);
		}

		return;
	}

	method void Ranged(int worldOffset, int cx, int cy)
	{
		var int distance;

		let distance = Math.abs(X - cx);

		if ((12 < distance) & (distance < 32))
		{
			do FollowGravity(worldOffset, cx, cy);
		}
		else
		{
			if (IsShooting)
			{
				if (X < cx)
				{
					let movingLeft = false;
					do ForceDraw();
				}
				else
				{
					let movingLeft = true;
					do ForceDraw();
				}

				do Shoot(worldOffset);
			}
		}

		return;
	}


	method void FollowFlying(int worldOffset, int characterX, int characterY)
	{
		if (Constants.IsInScreenX(X))
		{
			do CheckFollowTimer(characterX, characterY);

			if ((X > lastCX) & (Map.getValue(X - 1 + worldOffset, Y/16) = 0))
			{
				do MoveLeft(worldOffset);
			}
			if ((X < lastCX) & (Map.getValue(X + Width + worldOffset, Y/16) = 0))
			{
				do MoveRight(worldOffset);
			}
			if ((Y > lastCY) & (Map.getValue(X + worldOffset, (Y/16) - Height) = 0))
			{
				do MoveUp();
			}
			if ((Y < lastCY) & (Map.getValue(X + worldOffset, (Y/16) + 1) = 0))
			{
				do MoveDown();
			}
		}

		do ForceDraw();

		return;
	}



	method void Roam(int worldOffset)
	{
		if (movingLeft)
		{
			do MoveLeft(worldOffset);
		}
		else 
		{
			do MoveRight(worldOffset);
		}

		if (Collision.CheckAnyPlatformCollisionLeft(X, Y, Width, Height, worldOffset) | 
		    Collision.IsAtPlatformBoundaryLeft(X, Y, Width, Height, worldOffset))
		{
			let movingLeft = false;
		}
		else { if (Collision.CheckAnyPlatformCollisionRight(X, Y, Width, Height, worldOffset) | 
		           Collision.IsAtPlatformBoundaryRight(X, Y, Width, Height, worldOffset))
		{
			let movingLeft = true;
		}}

		return;
	}

	method void ScrollRight()
	{
		if (IsAlive)
		{
			let lastMemAddress = memAddress;
			let memAddress = memAddress + 1;
			do Clear();
        	let X = X + 1;
			do Draw();
		}

        return;
	}

	method void ScrollLeft()
    {
		if (IsAlive)
		{
			let lastMemAddress = memAddress;
			let memAddress = memAddress - 1;
			do Clear();
			let X = X - 1;
			do Draw();
		}	

		return;
    }

    method void MoveLeft(int worldOffset)
    {
		let movingLeft = true;

		if (canMoveLeftRight & (Map.getValue(X - 1 + worldOffset, Y/16) = 0))
		{
			let lastMemAddress = memAddress;
			let memAddress = memAddress - 1;
			do Clear();
			let X = X - 1;
			do Draw();
			let canMoveLeftRight = false;
		}
       	return;
		
    }

    method void MoveRight(int worldOffset)
    {
		let movingLeft = false;

		if (canMoveLeftRight & (Map.getValue(X + Width + worldOffset, Y/16) = 0))
		{
			let lastMemAddress = memAddress;
			let memAddress = memAddress + 1;
			do Clear();
			let X = X + 1;
			do Draw();
			let canMoveLeftRight = false;

		}
        	return;
    }

	method void MoveUp()
    {
		if (canMoveUpDown)
		{
			let lastMemAddress = memAddress;
			let memAddress = memAddress - 512;
			do Clear();
			let Y = Y - 16;
			do Draw();
			let canMoveUpDown = false;

		}
        	return;
    }

	method void MoveDown()
    {
		if (canMoveUpDown)
		{
			let lastMemAddress = memAddress;
			let memAddress = memAddress + 512;
			do Clear();
			let Y = Y + 16;
			do Draw();
			let canMoveUpDown = false;
		}
        return;
    }

    method void Jump()
    {
        if (canJump)
        {
            let forceY = forceY - jumpHeight;
        }

        return;
    }

	//// GRAVITY
	method void CheckGravity(int worldOffset)
    {
        var int i;
        var Platform platform;
        var Section section;
        var bool is_on_platform;

        let canJump = Collision.IsOnAnyPlatform(X, Y, Width, Height, forceY, worldOffset);

        if (canJump)
        {
            let Y = Collision.getPlatformY() - 16;

            let forceY = 0;

			let lastMemAddress = memAddress;
			let memAddress = Constants.getMemAddress(X, Y);
			do Clear();
			do Draw();
        }
        // padanje
        else
        {
            if (Y > 219)
            {
                // do Die();
            }

            let forceY = forceY + gravity;            
        }

        let Y = Y + forceY;

		let lastMemAddress = memAddress;
		let memAddress = Constants.getMemAddress(X, Y);
		do Clear();
		do Draw();

        return;
    }

	method void Die()
	{
		var int i;
		var Bullet bullet;

		let lastMemAddress = memAddress;
		let memAddress = Constants.getMemAddress(-10, -10);
		do Clear();
		let X = -10;
		let Y = -10;
		let IsAlive = false;

		return;
	}

	method void Clear()
	{
		if (~(memAddress = lastMemAddress))
		{
			do DrawTypes(lastMemAddress, false);
		}

		return;
	}

    method void Draw()
    {
		if (IsAlive)
		{
			if (~(memAddress = lastMemAddress))
			{
				do DrawTypes(memAddress, true);
			}	
		}
		
		return;
    }

	method void ForceDraw()
	{
		do DrawTypes(memAddress, true);
		return;
	}

	method void DrawTypes(int memAddress, bool display)
    {
		if (Type = 0)
		{
			do Spider.DrawFrame(memAddress, display, movingLeft, X, Y);
		}
		else { if (Type = 1)
		{
			do EvilJeffMelee.DrawFrame(memAddress, display, movingLeft, X, Y);
		}
		else { if (Type = 2)
		{
			do EvilJeffRanged.DrawFrame(memAddress, display, movingLeft, X, Y);
		}
		else { if (Type = 3)
		{
			do Bat.DrawFrame(memAddress, display, movingLeft, X, Y);
		}
		else { if (Type = 4)
		{
			do Shooter.DrawFrame(memAddress, display, movingLeft, X, Y);
		}}}}}
		
		return;
    }

	method void resetObject()
	{
		let X = 0;
		let Y = 0;
		let Width = 0;
		let Height = 0;
		let Type = 0;
		let heightInPixels = 0;
		let memAddress = 0;
		let lastMemAddress = 0;
		let gravity = 0;
		let canJump = 0;
		let forceY = 0;
		let jumpHeight = 0;
		let movementDelay = 0;
		let movementTimer = 0;
		let canMoveLeftRight = 0;
		let canMoveUpDown = 0;
		let movingLeft = 0;
		let IsRoaming = 0;
    	let IsFlying = 0;
    	let IsGravityAffected = 0;
    	let IsMelee = 0;
		let IsRanged = 0;
    	let IsShooting = 0;
    	let DiesOnSquish = 0;
		let IsFollowing = 0;
		let IsStationary = 0;
		let IsAlive = 0;
		let Bullets = 0;
    	let BulletsCount = 0;
    	let currBulletIndex = 0;
    	let currBullet = 0;
    	let bulletTimer = 0;
    	let bulletDelay = 0;
    	let canShoot = 0;
		let hasPlatformAbove = 0;
		let hasPlatformAboveTimer = 0;
		let hasPlatformAboveDelay = 0;
		let followTimer = 0;
		let lastCX = 0;
		let lastCY = 0;
		return;
	}

	method void dispose()
    {
        var int i;
        var Bullet bullet;

        while (i < BulletsCount)
        {   
            let bullet = Bullets[i];
            do bullet.dispose();
			let bullet = 0;
			let i = i + 1;
        }

        if (BulletsCount > 0)
		{
			do Bullets.dispose();
		}

		do resetObject();

        do Memory.deAlloc(this);

        return;
    }

}

