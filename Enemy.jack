// 0 - spider
// 1 - evil jeff melee
// 2 - evil jeff ranged
// 3 - bat


class Enemy
{
	field int x;
	field int y;
	field int type;

	field int width; // spider - 1
	field int height; // spider - 16

	field int location;
	field int lastLocation;
	field int memAddress;
	field int lastMemAddress;

	field int gravity;
	field bool canJump;
	field int forceY;
	field int jumpHeight;



	//field int animationFrameCount;
	//field int currFrame;

	//field int animationDelay;
	//field int animationTimer;

	field int movementDelay;
	field int movementTimer;





	field bool canMove;

	field bool movingLeft;




	field bool Roaming;
    field bool Flying;
    field bool GravityAffected;
    field bool Melee;
    field bool Shooting;
    field bool DamageOnSquish;
	field bool Following;
	field bool Stacionary;




    constructor Enemy new(int x2, int y2, int type2)
    {	
		let x = x2;
		let y = y2;
		let type = type2;

		let location = (32 * y) + x;
		let memAddress = 16384 + location;

		// SPIDER
		if (type = 0)
		{
			let width = 2;
			let height = 1;
			//let animationFrameCount = Spider.GetFrameCount();
			//let animationDelay = 3;
			let movementDelay = 2;

			let Roaming = true;
		}
		// EVIL JEFF MELEE
		else { if (type = 1)
		{
			let width = 3;
			let height = 1;
			//let animationFrameCount = EvilJeffMelee.GetAnimationFrameCount();
			
			//let animationDelay = 3;
			let movementDelay = 2;

			let GravityAffected = true;
			let Melee = true;
			//let DamageOnSquish = true;
			//let Following = true;
			//let Stacionary = true;
			//let Roaming = true; // TEMP
		}
		else { if (type = 2)
		{
			let width = 3;
			let height = 2;

			let movementDelay = 2;
			let GravityAffected = true;
			let Melee = true;
		}
		else { if (type = 3)
		{
			let width = 2;
			let height = 1;

			let Stacionary = true;
		}}}}

		//let currFrame = 0;

		//let animationTimer = animationDelay;
		let movementTimer = movementDelay;

		let canMove = true;

		let forceY = 0;
		let gravity = 6; // 6
		let jumpHeight = 30; // 30

		let lastLocation = location;


        return this;
    }

	method int get_x() { return x; }
	method int get_y() { return y; }
	method int get_type() { return type; }

	method void set_x(int x2)
    {
        let x = x2;
        return;
    }

    method void set_y(int y2)
    {
        let y = y2;
        return;
    }

	method void CheckTimers()
	{
		//if (animationTimer < 1)
		//{
		//	do ChangeFrame();
		//	let animationTimer = animationDelay;
		//}

		if (movementTimer < 1)
		{
			let canMove = true;
			let movementTimer = movementDelay;
		}

		// CHECK TIMERS ZA SVE ENEMYJE - ZASAD NE

		return;
	}

	method void DecrementTimers()
	{
		//let animationTimer = animationTimer - 1;
		let movementTimer = movementTimer - 1;

		//if (type = 0)
		//{
		//}
		//else { if (type = 1)
		//{
		//	do Jeff.DecrementTimers();
		//}
		//else { if (type = 2)
		//{
		//}}}

		return;
	}


	//method void ChangeFrame()
	//{
	//	if (currFrame < (animationFrameCount - 1))
	//	{
	//		let currFrame = currFrame + 1;
	//	}
	//	else
	//	{
	//		let currFrame = 0;
	//	}
//
	//	return;
	//}





	method void DoActions(Array map, int mapWidth, int mapHeight, int worldOffset)
	{
		if (GravityAffected)
		{
			do check_gravity2(map, mapWidth, mapHeight, worldOffset);
			do Collision.RedrawPlatforms(map, mapWidth, mapHeight, x, y, width, height, worldOffset);
		}
		if (Roaming)
		{
			do Roam(map, mapWidth, mapHeight, worldOffset);
		}
		if (Melee)
		{
			do Jump();
		}
		if (Stacionary)
		{
			do Clear();
			do Draw(memAddress, true, false);
		}

		return;
	}

	//// MOVEMENT
	method void Roam(Array map, int mapWidth, int mapHeight, int worldOffset)
	{
		

		if (movingLeft)
		{
			do MoveLeft();
		}
		else 
		{
			do MoveRight();
		}

		if (Collision.CheckAnyPlatformCollisionLeft(x, y, width, height, map, mapWidth, mapHeight, worldOffset, forceY) | 
		    Collision.IsAtPlatformBoundaryLeft(x, y, width, height, map, mapWidth, mapHeight, worldOffset))
		{
			let movingLeft = false;
		}
		else { if (Collision.CheckAnyPlatformCollisionRight(x, y, width, height, map, mapWidth, mapHeight, worldOffset, forceY) | 
		           Collision.IsAtPlatformBoundaryRight(x, y, width, height, map, mapWidth, mapHeight, worldOffset))
		{
			let movingLeft = true;
		}}

		return;
	}



	method void ScrollRight()
	{
        let lastLocation = location;

		do Clear();

		let location = location + 1;
		let memAddress = 16384 + location;
        let x = x + 1;

		do Draw(memAddress, true, movingLeft);

		return;
	}

	method void ScrollLeft()
    {
		let lastLocation = location;

		do Clear();

		let location = location - 1;
		let memAddress = 16384 + location;
        let x = x - 1;
		
		do Draw(memAddress, true, movingLeft);

        return;
    }

    method void MoveLeft()
    {
		let movingLeft = true;

		if (canMove)
		{
			let lastLocation = location;

			do Clear();
			
			let location = location - 1;
			let memAddress = 16384 + location;
        	let x = x - 1;
			
			do Draw(memAddress, true, true);

			let canMove = false;
		}

        return;
    }

    method void MoveRight()
    {
		let movingLeft = false;

		if (canMove)
		{
        	let lastLocation = location;

			do Clear();

			let location = location + 1;
			let memAddress = 16384 + location;
        	let x = x + 1;

			do Draw(memAddress, true, false);

			let canMove = false;
		}


        return;

    }

    method void Jump()
    {
        let lastLocation = location;

        if (canJump)
        {
            let forceY = forceY - jumpHeight;
        }

        return;
    }

	//// GRAVITY

	method void check_gravity2(Array map, int mapWidth, int mapHeight, int worldOffset)
    {
        var int i;
        var Platform platform;
        var Section section;
        var bool is_on_platform;

        let lastLocation = location;

        let canJump = Collision.IsOnAnyPlatform(x, y, width, height, forceY, map, mapWidth, mapHeight, worldOffset);


        if (canJump)
        {
			
			do Clear();

            let y = Collision.getPlatformY() - height;
            let forceY = 0;
            let location = (y * 32) + x;
			let memAddress = 16384 + location;

            //do Clear();
            //do Draw();
			
			do Draw(memAddress, true, false);
        }
        // padanje
        else
        {
            if (y > 219)
            {
                //do Respawn();

                // take damage
            }

            let forceY = forceY + gravity;            
        }

		
		do Clear();

        let y = y + forceY;
        let location = (y * 32) + x;
		let memAddress = 16384 + location;
		
		do Draw(memAddress, true, false);

        return;
    }

    method void check_gravity(Array platforms, int platforms_num)
    {
        var int i;
        var Platform platform;
        var Section section;
        var bool isOnPlatform;

        let lastLocation = location;

        while (i < platforms_num)
        {
            let platform = platforms[i];

            //if (Math.abs(y - platform.get_y()) < 50)
            //{
                let isOnPlatform = Collision.IsOnPlatform(platform, x, y, width, height, forceY);

                let canJump = isOnPlatform;

                if (isOnPlatform)
                {
                    let i = platforms_num - 1;
                }
            //}

            let i = i + 1;
        }

        if (canJump)
        {
			

            let y = platform.get_y() - height;
            let forceY = 0;
            let location = (y * 32) + x;
			//let memAddress = 16384 + location;

            //do Clear();
            //do Draw();
			do Clear();
			do Draw(16384 + location, true, false);
        }
        // padanje
        else
        {
            if (y > 219)
            {
                //do Respawn();

                // take damage
            }

            let forceY = forceY + gravity;            
        }

		

        let y = y + forceY;
        let location = (y * 32) + x;
        
        //do Clear();
        //do Draw();
		do Clear();
		do Draw(16384 + location, true, false);

        return;
    }


    method void Respawn()
    {
        let y = 100;

        if (x - 10 < 1)
        {
            //let x = 2;
            //let absolute_x = 2;
            //temp
            let x = x + 5;
            //let absolute_x = absolute_x + 5;
        }
        else
        {
            let x = x - 10;
            //let absolute_x = absolute_x - 10;
        }
        
        return;
    }

	method bool IsInScreen()
	{
		return ((-1 < x) & ((x + width) < 32));
	}

	method void Clear()
	{
		//if (~(lastLocation = location))
		//{
		//	do Draw(16384 + lastLocation, false, movingLeft);
		//}

		do Draw(16384 + location, false, movingLeft);

		return;
	}

	//ethod void Draw(int memAddress, bool display, bool mirrored)
	//
	//	if (display)
	//	{
	//		if (IsInScreen())
	//		{
	//			do DrawEnemyTypes(memAddress, display, mirrored);
	//		}
	//	}
	//	else
	//	{
	//		if ((0 < (x + width)) & ((x + width) < 32))
	//		{
	//			do DrawEnemyTypes(memAddress, display, mirrored);
	//		}
	//	}

	//	return;
	//

    method void Draw(int memAddress, bool display, bool mirrored)
    {
		if (type = 0)
		{
			do Spider.DrawFrame(memAddress, display, mirrored, x, y);
		}
		// EVIL JEFF MELEE
		else { if (type = 1)
		{
			do EvilJeffMelee.DrawFrame(memAddress, display, mirrored, x, y);
		}
		else { if (type = 2)
		{
			do EvilJeffRanged.DrawFrame(memAddress, display, mirrored, x, y);
		}
		else { if (type = 3)
		{
			do Bat.DrawFrame(memAddress, display, mirrored, x, y);
		}}}}

		return;
    }

}

